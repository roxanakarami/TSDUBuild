<?xml version="1.0"?><doc><members>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCalls">
      <summary>Use objects from the DotNetCalls class to configure and obtain calls for a module the .NET Adapter uses.  Use the DotNetModule.Calls property to obtain the collection of calls for a module.</summary>
      <seealso cref="DotNetCall" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCalls.Item(System.Int32)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="DotNetCall" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCalls.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="DotNetCall" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCalls.New(System.Int32)">
      <summary>Creates a new DotNetCall object and inserts it into the collection at the specified index.</summary>
      <param name="index">Specifies the zero-based index at which to insert the new DotNetCall object into the collection.</param>
      <seealso cref="DotNetCall" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCalls.Delete(System.Int32)">
      <summary>Removes the DotNetCall object at the specified index from the <c>DotNetCalls</c> collection.</summary>
      <param name="index">Specifies the zero-based index of the <c>DotNetCall</c> object to remove from the <c>DotNetCalls</c> collection.</param>
      <seealso cref="DotNetCall" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCalls.DeleteAllAfterIndex(System.Int32)">
      <summary>Removes all items after, but not including, the specified index from the collection.</summary>
      <param name="index">Specifies the zero-based index after which this method removes all DotNetCall objects from the collection.</param>
      <seealso cref="DotNetCall" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCalls.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall">
      <summary>Use objects from the DotNetCall class to specify and obtain .NET Adapter-specific information about the code module that steps or step type substeps execute.
Typically, you use this class only when you are writing a sequence editor.
You can use the DotNetCall.LoadPrototypeFromSignature method to load the prototype for the call.</summary>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.Signature">
      <summary>Returns the signature of the specified .NET member. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call.</summary>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.Parameters">
      <summary>Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs for the corresponding <c>DotNetCall</c> object. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specification and parameters for a <c>DotNetCall</c> object.</summary>
      <remarks>Call the <c>DotNetCall.LoadPrototypeFromSignature</c> method to specify a call before accessing this property.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetParameters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.IsPrototypeIncompatible">
      <summary>Returns a value that indicates whether the <c>DotNetCall</c> object prototype is incompatible with the actual prototype of the .NET member in the assembly.</summary>
      <remarks>If this property cannot determine the prototype information because the assembly is not loadable, the class does not exist, or no member with the specified name exists, this property returns <c>False</c>. This property returns <c>True</c> only when a member with the specified name exists in the specified assembly and class, but does not match the specified prototype.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetCall.UnmappedArgumentValues" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.LoadPrototypeFromSignature(System.String,System.Boolean,System.Int32)">
      <summary>Returns <c>True</c> if the .NET Adapter successfully loaded the prototype for the specified call. This method returns <c>False</c> if the adapter cannot find the signature or member name. This method loads the parameters and prototype information for a .NET member given the signature or name of the member.</summary>
      <remarks>This method replaces the obsolete DotNetModule.LoadPrototypeFromMetadataToken method.
This method is the primary mechanism for specify <c>DotNetCall</c> member prototypes. TestStand finds the member in the assembly that matches the given signature (or member name if you pass <c>True</c> for the allowMemberNameMatching parameter) and loads the prototype while setting all parameters and member information for the call. Use the suffix <c>-&#160;Get</c> or <c>-&#160;Set</c> to specify a get or set property or field operation. When you specify a property or field, you can omit the suffix and TestStand attempts to find a match by giving priority to properties with a <c>-&#160;Get</c> suffix. This behavior occurs even when you pass <c>False</c> for the allowMemberNameMatching parameter.
<para>Note: If you specify a member name instead of a full signature when overloads exist for the member (and you pass <c>True</c> for the allowMemberNameMatching parameter), TestStand loads the prototype of the first overload in sorted order.</para>
Use the following guidelines to specify a signature string:
<para><para>&#160;&#160;&#160;&#160;* For methods and constructors&#8212;Specify the method or class name followed by the data types of the parameters in parentheses, separated by commas. For example:<br/><br/><c>MyClass(Int32, System.String[] ByRef)</c><br/><c>MyMethod(MyNamespace.MyClass ByRef, Double, Int32[,] ByRef)</c><br/><br/>Use the DotNetAdapter.GetMemberNames method to obtain a list of signatures for a particular assembly and class or to review more examples of the format for signatures.</para><para>&#160;&#160;&#160;&#160;* For Create Remote Object calls&#8212;To create a remote object, pass <c>Create Remote Object(System.String)</c>. The .NET Adapter treats the <c>System.String</c> portion as a parameter and uses it to specify the universal remote identifier (URI) of the server.</para><para>&#160;&#160;&#160;&#160;* For Use Existing Objects calls&#8212;To use an existing object reference, pass <c>Use Existing Object(MyNameSpace.MyClass)</c>, such as <c>Use Existing Object(System.Collections.Queue)</c>. The .NET Adapter treats the class name as a parameter and uses it to specify the TestStand variable that holds the object reference you want to use.</para><para>&#160;&#160;&#160;&#160;* For properties and fields&#8212;If a property or field does not have an indexer, specify the property or field name followed by the <c>-&#160;Get</c> or <c>-&#160;Set</c> suffix to specify the type of operation to perform, as in <c>MyProperty&#160;-&#160;Get</c> or <c>MyField&#160;-&#160;Set</c>. If a property or field does have an indexer, add a space after the property name and add square brackets with the indexer types specified in a comma-separated list, as in:<br/><br/><c>MyPropertyWithIndexers [Int32, System.String ByRef] -&#160;Get</c>.</para><para>&#160;&#160;&#160;&#160;* For parameter strings&#8212;For basic types other than <c>System.String</c>, such as 32-bit integers and doubles, omit the <c>System.</c> prefix. For arrays, include the square brackets with commas inside to specify the number of dimensions. For ByRef and output parameters, include the string <c>&#160;ByRef</c>, including the initial space, after the parameter data type.</para></para><h3>Signatures for the First Call in the Collection</h3>
You can set the first call in the collection only to a constructor or static member, or to specify to create a remote object or use an existing object.<h3>Example Signature Formats for System.String Class Members</h3>
<para><para>&#160;&#160;&#160;&#160;* Simple member name&#8212;<c>Replace</c>. No overload exists for this method so the adapter requires only a simple name (as long as you pass <c>True</c> for the allowMemberNameMatching parameter).</para><para>&#160;&#160;&#160;&#160;* Full signature with parameter types&#8212;<c>Split(Char[], Int32, System.StringSplitOptions)</c>. Overloads exist for this method, so the adapter requires the full signature to choose a specific overload (even if you pass <c>True</c> for the allowMemberNameMatching parameter). Note that <c>Char</c> and <c>Int32</c> types do not have the <c>System.</c> prefix before the type name because they are basic types.</para><para>&#160;&#160;&#160;&#160;* Property simple member name&#8212;<c>Length</c>. This property is read-only so the adapter does not require the <c>-&#160;Get</c> suffix because <c>Get</c> is the only option.</para><para>&#160;&#160;&#160;&#160;* Property&#8212;<c>Length&#160;-&#160;Get</c>. If this property has both public read access and public write access, the adapter requires the <c>-&#160;Get</c> or <c>-&#160;Set</c> suffix to specify the operation to perform. However, if no suffix is provided, the adapter chooses <c>- Get</c> by default.</para><para>&#160;&#160;&#160;&#160;* Constructor&#8212;<c>String(Char[], Int32, Int32)</c>. Multiple constructors exist so the adapter requires a full signature to specify a specific constructor. If only one public constructor exists, you can pass <c>String</c> as the signature (as long as you pass <c>True</c> for the allowMemberNameMatching parameter).</para></para></remarks>
      <param name="signatureOrMemberName">Specifies the signature or member name of the member with the prototype you want to load. If you want to pass a member name instead of a full signature, you must also pass <c>True</c> for the allowMemberNameMatching parameter.</param>
      <param name="allowMemberNameMatching">Specifies whether to allow matching simply by member name instead of requiring a match to the full signature. If you pass <c>False</c> for this parameter, the .NET Adapter loads the prototype only if the signatureOrMemberName parameter exactly matches the full signature of a member. If you pass <c>True</c> for this parameter, the adapter first looks for a full signature match to the signatureOrMemberName parameter. If the adapter cannot find a match, it looks for a member name that matches the signatureOrMemberName parameter. To choose a specific overload, you must specify a signature instead of a member name. Refer to the Remarks section of this topic for more information about specifying a signature.</param>
      <param name="options">Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <seealso cref="DotNetCall.IsCallValid" />
      <seealso cref="DotNetCall.IsPrototypeIncompatible" />
      <seealso cref="DotNetCall.SetIncompleteSignature" />
      <seealso cref="LoadPrototypeOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.UnmappedArgumentValues">
      <summary>Returns the UnmappedArgumentValues collection that contains a list of the arguments not used as inputs or outputs for the corresponding <c>DotNetCall</c> object.</summary>
      <remarks>For DotNetModule objects, use this property instead of the Module.UnmappedArgumentValues property.
When you use the DotNetCall.LoadPrototypeFromSignature method to change a <c>DotNetCall</c> object prototype and pass the LoadPrototypeOption_MapExistingParameters option, TestStand attempts to map the current <c>DotNetCall</c> arguments to the new prototype by looking for matching argument names and data types and by matching argument positions and data types. If TestStand cannot assign an argument to the new prototype or if you do not pass the <c>LoadPrototypeOption_MapExistingParameters</c> option, the argument is added the current collection.
TestStand does not clear the collection when you load a new prototype. Use the UnmappedArgumentValues.Clear method to clear the collection after you call the <c>DotNetCall.LoadPrototypeFromSignature</c> method.</remarks>
      <seealso cref="&quot;Module.UnmappedArgumentValues&quot;Module_UnmappedArgumentValues_P.htm" />
      <seealso cref="&quot;UnmappedArgumentValue&quot;UnmappedArgumentValue.htm" />
      <seealso cref="&quot;UnmappedArgumentValues&quot;UnmappedArgumentValues.htm" />
      <seealso cref="&quot;UnmappedArgumentValues.Clear&quot;UnmappedArgumentValues_Clear_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.IsCallValid(System.String@)">
      <summary>Returns <c>True</c> if the <c>DotNetCall</c> object specification matches the actual member found in the corresponding class and assembly. Otherwise, returns <c>False</c>.</summary>
      <remarks>This method also returns <c>False</c> when the .NET Adapter cannot load the assembly or the class or member name does not exist.</remarks>
      <param name="description">If this method returns <c>False</c>, this parameter returns the explanation.</param>
      <seealso cref="DotNetCall.IsPrototypeIncompatible" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.SetIncompleteSignature(System.String)">
      <summary>Stores the given partial signature for the .NET call as the member name, but does not attempt to actually load the prototype. Instead, this method clears parameters and sets the DotNetCall.MemberType property to DotNetMember_DoNotCall.</summary>
      <remarks>Use this method to store signature information on a <c>DotNetCall</c> object without trying to actually load prototype for the call. For example, if the DotNetCall.LoadPrototypeFromSignature method cannot load the prototype for a given signature, you can store the signature on the <c>DotNetCall</c> object by calling this method.</remarks>
      <param name="partialSignature">Specifies the partial signature to store on the <c>DotNetCall</c> object.</param>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetCall.MemberType" />
      <seealso cref="DotNetModuleMemberTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.CallIndex">
      <summary>Returns the index of the <c>DotNetCall</c> object in the DotNetCalls collection on the DotNetModule object.</summary>
      <seealso cref="DotNetCalls" />
      <seealso cref="DotNetModule" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.CreateCode">
      <summary>Launches Microsoft Visual Studio to create code for the .NET call.</summary>
      <remarks>For DotNetModule objects, use this method instead of the Module.CreateCode method.
This method creates a method in the class the DotNetCall.ClassName property specifies. This method uses the DotNetCall.MemberName property as the name of the method to create. The content of the code depends on the code templates configured for the step type of the step that contains the <c>DotNetCall</c> object. Use the Module.CanCreateCode property to determine whether this step can create code.
If you do not specify any files for the DotNetModule.ProjectFilePath or DotNetModule.SourceFilePath properties, call this method to prompt the user to specify the project and source files. The adapter stores the specified project file in the step, but the source file you select applies only to the current .NET call.
When you call this method, you might receive additional prompts to determine whether any of the following conditions exist: <para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box.</para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box, and TestStand cannot match the version of the file.</para><para>&#160;&#160;&#160;&#160;* A method already exists with the same signature.</para><para>&#160;&#160;&#160;&#160;* The specified solution does not contain the specified project.</para><para>&#160;&#160;&#160;&#160;* The specified project does not contain the specified source file.</para></para></remarks>
      <returns>Specifies whether the <c>DotNetCall</c> object was modified.</returns>
      <seealso cref="&quot;.NET Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_NET_Adap_Config.htm')" />
      <seealso cref="DotNetCall.ClassName" />
      <seealso cref="DotNetCall.EditCode" />
      <seealso cref="DotNetCall.MemberName" />
      <seealso cref="DotNetModule" />
      <seealso cref="DotNetModule.ProjectFilePath" />
      <seealso cref="DotNetModule.SourceFilePath" />
      <seealso cref="&quot;Module.CanCreateCode&quot;Module_CanCreateCode_P.htm" />
      <seealso cref="&quot;Module.CreateCode&quot;Module_CreateCode_M.htm" />
      <seealso cref="&quot;Step.CanCreateCode&quot;Step_CanCreateCode_P.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.EditCode">
      <summary>Attempts to launch Microsoft Visual Studio to edit the code associated with the .NET call.</summary>
      <remarks>For DotNetModule objects, use this method instead of the Module.EditCode method.
Use the Module.CanCreateCode property to determine whether this step can edit code.
If you do not specify any files for the DotNetModule.ProjectFilePath or DotNetModule.SourceFilePath properties, call this method to prompt the user to specify the project and source files. The adapter stores the specified project file in the step, but the source file you select applies only to the current .NET call.
When you call this method, you might receive additional prompts to determine whether any of the following conditions exist: <para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box.</para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the .NET Adapter Configuration dialog box, and TestStand cannot match the version of the file.</para><para>&#160;&#160;&#160;&#160;* The specified solution does not contain the specified project.</para><para>&#160;&#160;&#160;&#160;* The specified project does not contain the specified source file.</para></para></remarks>
      <seealso cref="&quot;.NET Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_NET_Adap_Config.htm')" />
      <seealso cref="DotNetCall.ClassName" />
      <seealso cref="DotNetCall.EditCode" />
      <seealso cref="DotNetCall.MemberName" />
      <seealso cref="DotNetModule" />
      <seealso cref="DotNetModule.ProjectFilePath" />
      <seealso cref="DotNetModule.SourceFilePath" />
      <seealso cref="&quot;Module.CanCreateCode&quot;Module_CanCreateCode_P.htm" />
      <seealso cref="&quot;Module.EditCode&quot;Module_EditCode_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.ReloadPrototype(System.Int32)">
      <summary>Attempts to reload prototype information for the selected member, including parameter types and return value types. For each parameter, this method updates in/out information, struct definitions, and array dimensions, if applicable.</summary>
      <remarks>If the .NET Adapter cannot find an assembly, class, or member anywhere in the call chain up to and including the current call, this method returns an error.</remarks>
      <param name="options">Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="LoadPrototypeOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.GetAssembly(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations@,System.String@)">
      <summary>Returns the location of the assembly and pathname if the assembly is located in a file. This method returns the strong name if the assembly is located in the Global Assembly Cache (GAC).</summary>
      <remarks>Returns the assembly that contains the type information for the class that corresponds to the DotNetCall.ClassName property. All calls before this call in the DotNetCalls collection must be valid before calling this method.</remarks>
      <param name="assemblyLocationParam">Returns a value that indicates whether the assembly is in a file or in the GAC.</param>
      <param name="assemblyPathParam">Returns the pathname if the assembly is located in a file. This parameter specifies the strong name if the assembly is located in the GAC.</param>
      <seealso cref="DotNetCall.ClassName" />
      <seealso cref="DotNetCall.GetAssemblyForNextCall" />
      <seealso cref="DotNetCalls" />
      <seealso cref="DotNetModule.GetAssembly" />
      <seealso cref="DotNetModule.SetAssembly" />
      <seealso cref="DotNetModuleAssemblyLocations" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.GetAssemblyForNextCall(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations@,System.String@)">
      <summary>Obtains assembly information for a subsequent call based on the return value for the current call and all previous calls in the call chain. This method returns the location of the assembly and the pathname, if the assembly is located in a file, or the strong name, if the assembly is located in the Global Assembly Cache (GAC).</summary>
      <remarks>If the current or any previous <c>DotNetCall</c> object in the call chain does not have a return value or does not return a callable type, this method returns an error.</remarks>
      <param name="assemblyLocationParam">Returns a value that indicates whether the assembly is located in a file or in the GAC.</param>
      <param name="assemblyPathParam">Returns the pathname if the assembly is located in a file. This parameter specifies the strong name if the assembly is located in the GAC.</param>
      <seealso cref="DotNetCall.GetAssembly" />
      <seealso cref="DotNetModuleAssemblyLocations" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.ClassName">
      <summary>Returns the name of the class on which to perform the call. This property is based on the DotNetModule.ClassName property if the current <c>DotNetCall</c> object is the first call on the step. Otherwise, this property is based on the return value of the previous <c>DotNetCall</c> object in the chain of calls.</summary>
      <seealso cref="DotNetModule.ClassName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.ClassHelpString">
      <summary>Returns the help string the assembly associates with the class for this call.</summary>
      <seealso cref="DotNetCall.ClassName" />
      <seealso cref="DotNetCall.MemberHelpString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.ClassNameForNextCall">
      <summary>If you add a new call to the call chain after the current call, this property returns the class name the new call uses. If the current call does not have a return value of a type on which TestStand supports making another call, this property returns an empty string.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.MemberType">
      <summary>Returns the type of call the current <c>DotNetCall</c> object is configured to make. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a <c>DotNetCall</c> object.</summary>
      <seealso cref="DotNetCall.MemberName" />
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModuleMemberTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.MemberFlags">
      <summary>Returns certain attributes of the member the <c>DotNetCall</c> object calls. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a <c>DotNetCall</c> object.</summary>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetMemberFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.MemberName">
      <summary>Returns the name of the member function to call or property or field to access. Use the DotNetCall.LoadPrototypeFromSignature method to change the member specifications for a <c>DotNetCall</c> object.</summary>
      <seealso cref="DotNetCall.ClassName" />
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetCall.MemberType" />
      <seealso cref="DotNetCall.Signature" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetCall.MemberHelpString">
      <summary>Returns the help string the assembly associates with the member.</summary>
      <seealso cref="DotNetCall.ClassHelpString" />
      <seealso cref="DotNetCall.MemberName" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapterGetMemberNamesOptions">
      <summary>Use these constants with the options parameter of the DotNetAdapter.GetMemberNames method. If you pass no option (Value: 0x0), the adapter retrieves non-instance members only, including constructors, static members, and special options, such as Create Remote Object and Use Existing Object.</summary>
      <seealso cref="DotNetAdapter.GetMemberNames" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapterGetMemberNamesOptions.DotNetAdapterGetMemberNamesOption_InstanceMembers">
      <summary>(Value: 0x1) The DotNetAdapter.GetMemberNames method retrieves only instance members. The adapter does not retrieve static members or constructors.</summary>
      <seealso cref="DotNetAdapter.GetMemberNames" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWProjectPathTypes">
      <summary>Use these constants with the LabVIEWModule.DisplaySelectVIFromProjectDialog, LabVIEWModule.GetProjectUrlPathsForVIs, and LabVIEWModule.FindVIUrlUsingVIPath methods to specify the LabVIEW project path property to use.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWModule.DisplaySelectVIFromProjectDialog" />
      <seealso cref="LabVIEWModule.GetProjectUrlPathsForVIs" />
      <seealso cref="LabVIEWModule.FindVIUrlUsingVIPath" />
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="LabVIEWModule.RemoteProjectPath" />
      <seealso cref="&quot;Organizing Test Program Files with LabVIEW Projects&quot;javascript:TSLabVIEW('/InfoTopics/Project.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWProjectPathTypes.LVProjectPathType_Local">
      <summary>(Value: 0) Indicates to use the LabVIEWModule.ProjectPath property.
</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWProjectPathTypes.LVProjectPathType_Remote">
      <summary>(Value: 1) Indicates to use the LabVIEWModule.RemoteProjectPath property.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetArgument">
      <summary>Use objects from this class to specify the argument value to pass to a DotNetCall object using the DotNetModule.Execute method.</summary>
      <seealso cref="DotNetCall" />
      <seealso cref="DotNetModule.Execute" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetArgument.Value">
      <summary>Specifies the argument value to pass for the corresponding parameter.</summary>
      <remarks>When you pass a DotNetModuleArguments collection to the DotNetModule.Execute method, the adapter passes this property to the function instead of evaluating the DotNetParameter.ValueExpr expression.</remarks>
      <seealso cref="DotNetModule.Execute" />
      <seealso cref="DotNetModuleArguments" />
      <seealso cref="DotNetParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetArgument.ParameterName">
      <summary>Returns the name of the parameter with the argument.</summary>
      <seealso cref="DotNetArgument.ParameterName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetArgument.Elements">
      <summary>Returns a collection of DotNetArgument objects to pass to a struct or an array parameter.</summary>
      <remarks>The collection contains the same number of items as the corresponding DotNetParameter.Elements collection.</remarks>
      <seealso cref="DotNetArgument" />
      <seealso cref="DotNetModule.Execute" />
      <seealso cref="DotNetModuleArguments" />
      <seealso cref="DotNetParameter.Elements" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetArguments">
      <summary>Use objects from this class to pass specific argument values to a specific DotNetCall object using the DotNetModule.Execute method. Use the DotNetModule.NewModuleArguments method to create a new DotNetModuleArguments collection of <c>DotNetArguments</c> objects.</summary>
      <seealso cref="DotNetCall" />
      <seealso cref="DotNetModule.Execute" />
      <seealso cref="DotNetModule.NewModuleArguments" />
      <seealso cref="DotNetModuleArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetArguments.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to obtain.</param>
      <seealso cref="DotNetArgument" />
      <seealso cref="DotNetArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetArguments.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="DotNetArgument" />
      <seealso cref="DotNetArguments" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleArguments">
      <summary>Use objects from this class to pass specific argument values to a DotNetModule object using the DotNetModule.Execute method. Use the DotNetModule.NewModuleArguments method to create a new <c>DotNetModuleArguments</c> collection.</summary>
      <seealso cref="DotNetModule" />
      <seealso cref="DotNetModule.Execute" />
      <seealso cref="DotNetModule.NewModuleArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleArguments.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="DotNetArguments" />
      <seealso cref="DotNetModuleArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleArguments.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="DotNetArguments" />
      <seealso cref="DotNetModuleArguments" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWCallTypes">
      <summary>Use these constants with the LabVIEWModule.CallType property to specify the type of call the LabVIEW module executes.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWModule.CallType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWCallTypes.LVCallType_VI_Call">
      <summary>(Value: 0) Indicates that the VI code module calls a VI without LabVIEW dynamic dispatching. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWCallTypes.LVCallType_Class_Member_Call">
      <summary>(Value: 1) Indicates that the VI code module calls a LabVIEW class member VI with dynamic dispatching enabled. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWCallTypes.LVCallType_Property_Node_Call">
      <summary>(Value: 2) Indicates that the VI code module calls a LabVIEW Property Node.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVIOptions">
      <summary>Use these constants with the options parameter of the LabVIEWModule.ImportVI method. Use the bitwise-OR operator to specify more than one option.</summary>
      <seealso cref="LabVIEWModule.ImportVI" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVIOptions.ImportVIOption_NoOptions">
      <summary>(Value: 0) No options.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVIOptions.ImportVIOption_ConfigureExpressVI">
      <summary>(Value: 0x1) Specifies to configure the Express VI before importing it into the code module. This option is valid only when you pass the ImportVIType_ExpressVITemplate enumeration for the type parameter of the LabVIEWModule.ImportVI method. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWPropertyOptions">
      <summary>Use these constants with the LabVIEWAdapter.GetPropertiesForNodeClass and LabVIEWAdapter.GetPropertiesForLabVIEWClass methods to obtain options for the properties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWPropertyOptions.LVPropertyOption_Read">
      <summary>(Value: 0x1) Indicates that you can read the property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWPropertyOptions.LVPropertyOption_Default">
      <summary>(Value: 0x4) Indicates that the property can use the default value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWPropertyOptions.LVPropertyOption_Write">
      <summary>(Value: 0x2) Indicates that you can write to the property.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodePropertyDirections">
      <summary>The LabVIEWNodeProperty.Direction property returns one of these constants to indicate how the code module passes the property when it executes.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodePropertyDirections.LVNodePropertyDirection_In">
      <summary>(Value: 0) Indicates that TestStand passes the property to the VI.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodePropertyDirections.LVNodePropertyDirection_Out">
      <summary>(Value: 1) Indicates that the VI returns the property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodePropertyDirections.LVNodePropertyDirection_Default">
      <summary>(Value: 2) Indicates that the property uses the default value.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperties">
      <summary>Use objects from the <c>LabVIEWNodeProperties</c> class to configure and obtain <c>LabVIEWNodeProperties</c> for a module that uses the LabVIEW Adapter. Use the LabVIEWModule.NodeProperties property to obtain the collection of <c>LabVIEWNodeProperties</c> for a module.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperties.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperties.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperties.New(System.Int32,System.String,System.String,System.String,NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodePropertyDirections)">
      <summary>Adds a new item to the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to add.</param>
      <param name="longName">Specifies the LongName of a particular property.</param>
      <param name="dataName">Specifies the DataName of a particular property.</param>
      <param name="uniqueID">Specifies the unique ID of a particular property.</param>
      <param name="nodePropertyDirection">Indicates the direction of the property. <c>0</c> indicates an In property. <c>1</c> indicates an Out property.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperties.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperties.Delete(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">Specifies the zero-based index of the item to delete.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperty">
      <summary>Use objects from the LabVIEWNodeProperty class to configure and obtain LabVIEWNodeProperty-specific information for an item in the LabVIEWNodeProperties collection class. </summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWModule.NodeProperties" />
      <seealso cref="LabVIEWNodeProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperty.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the LabVIEWPropertyNode object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperty.LongName">
      <summary>Specifies the LongName of a particular property.</summary>
      <seealso cref="LabVIEWNodeProperty.DataName" />
      <seealso cref="LabVIEWNodeProperty.Direction" />
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperty.DataName">
      <summary>Specifies the DataName of a particular property.</summary>
      <seealso cref="LabVIEWNodeProperty.Direction" />
      <seealso cref="LabVIEWNodeProperty.LongName" />
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperty.Direction">
      <summary>Indicates the direction of the property. <c>0</c> indicates an In property. <c>1</c> indicates an Out property.</summary>
      <seealso cref="LabVIEWNodeProperty.DataName" />
      <seealso cref="LabVIEWNodeProperty.LongName" />
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeProperty.UniqueID">
      <summary>Specifies the UniqueID of a particular property.</summary>
      <seealso cref="LabVIEWNodeProperty.DataName" />
      <seealso cref="LabVIEWNodeProperty.Direction" />
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeOperationModes">
      <summary>Use these constants with the LabVIEWModule.NodeOperationMode property to indicate the behavior of the Configure Property Node dialog box.</summary>
      <seealso cref="LabVIEWModule.NodeOperationMode" />
      <seealso cref="&quot;Configure Property Node dialog box&quot;javascript:RefLink('/InfoTopics/DB_Prop_Node_Config.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeOperationModes.LVNodeOperationMode_Default">
      <summary>(Value: 0) Indicates that the Configure Property Node dialog box operates in default mode. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWNodeOperationModes.LVNodeOperationMode_Restricted">
      <summary>(Value: 1) Indicates that the Configure Property Node dialog box operates in restricted mode.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWDevelopmentEnvironmentBitnessOptions">
      <summary>Use these constants with the LabVIEWAdapter.LabVIEWDevelopmentEnvironmentBitness property to specify the bitness of the LabVIEW Development Environment version to use.</summary>
      <seealso cref="LabVIEWAdapter.LabVIEWDevelopmentEnvironmentBitness" />
      <seealso cref="&quot;LabVIEW Adapter Configuration Dialog Box&quot;javascript:RefLink('/InfoTopics/DB_LVAdapterConfig.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWDevelopmentEnvironmentBitnessOptions.LVDevelopmentEnvironmentBitness_Default">
      <summary>(Value: 0) Launches the current active 32-bit or 64-bit LabVIEW development environment, with a preference to match the bitness of TestStand.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWDevelopmentEnvironmentBitnessOptions.LVDevelopmentEnvironmentBitness_32bit">
      <summary>(Value: 1) Launches the current active 32-bit LabVIEW development environment.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWDevelopmentEnvironmentBitnessOptions.LVDevelopmentEnvironmentBitness_64bit">
      <summary>(Value: 2) Launches the current active 64-bit LabVIEW development environment.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXAdapter">
      <summary>Use objects from the ActiveXAdapter class to configure and obtain ActiveX/COM Adapter-specific information about the module adapter. Call Engine.GetAdapter or Engine.GetAdapterByKeyName to obtain a reference to the adapter object.
To access the properties and methods of the Adapter class, use AsAdapter to obtain an object.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="&quot;Engine.GetAdapter&quot;javascript:APILink('/RefTopics/Engine_GetAdapter_M.htm')" />
      <seealso cref="&quot;Engine.GetAdapterByKeyName&quot;javascript:APILink('/RefTopics/Engine_GetAdapterByKeyName_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter object that represents the ActiveXAdapter object.</summary>
      <remarks>Use the underlying module Adapter object to access properties and methods common to all adapters.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXAdapter.UseLateBinding">
      <summary>Specifies whether the ActiveX/COM Adapter uses late binding or early binding. When you specify the module for an ActiveX/COM step, TestStand stores the IDs and names of the object and member the step calls. During execution, the ActiveX/COM Adapter must invoke the ActiveX Automation server and specify which object to create and which member to call.
You can use one of the following options to specify how the server performs operations on the objects:
<para><para>&#160;&#160;&#160;&#160;* Early Binding&#8212;Configures the module adapter to use IDs.</para><para>&#160;&#160;&#160;&#160;* Late Binding&#8212;Configures the module adapter to use names.</para></para>
While early binding is more efficient, it requires that the IDs for objects and methods exposed by automation servers do not change. If you are developing an automation server in an application development environment (ADE) that does not provide direct control over IDs, National Instruments recommends using late binding during development so inadvertent changes to IDs do not invalidate the module information for the step. When you finish developing the automation server, set the Use Late Binding option in the ActiveX/COM Adapter Configuration dialog box to <c>False</c> and update the IDs in the client sequences.
To update the IDs in the client sequences, edit the module information for each step that references the server or select Tools&#0187;Update Automation Identifiers in each sequence file that contains ActiveX/COM steps that reference the server.</summary>
      <remarks>If you are using a third-party or release version of an automation server, or if you are developing a server in an ADE in which you can control the server IDs, National Instruments recommends disabling the Use Late Binding option.
When you configure the ActiveX/COM Adapter to use late binding, the adapter uses the stored names to determine the proper IDs to use at run time.
The ActiveX/COM Adapter looks at the most recent version of type information for the server.
Servers can also specify type information in different languages. If the ActiveX/COM Adapter cannot find a version of the type information that uses the system default language ID, it attempts to find type information that uses the English or Neutral language IDs, in that order. </remarks>
      <seealso cref="&quot;ActiveX/COM Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_ActiveX_AdapterConfig.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXAdapter.UnloadUnusedActiveXServersAfterExec">
      <summary>Specifies that the ActiveX/COM Adapter requests the operating system to unload in-process (DLL) servers after every execution. The operating system only unloads servers you are no longer using. Disable this option to improve execution speed.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXAdapter.ShowActiveXControlsWhenSpecifyingModule">
      <summary>Specifies that the Specify Module dialog box for the ActiveX/COM Adapter includes ActiveX controls in the list of available servers.</summary>
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXAdapter.UpdateAutomationIDs(NationalInstruments.TestStand.Interop.API.SequenceFile,System.Int32@,System.Int32@,System.String@)">
      <summary>When you update the interface for an ActiveX Automation server and the object and member identifiers have changed, you must respecify any step that uses the server. Use the UpdateAutomationIDs method to update the identifiers in a sequence file based on the name of the object or member.
For steps that create an object, this method updates the object identifiers CLSID and IID. For steps that call a method or property, this method updates the member identifier MEMBERID.</summary>
      <remarks>This method applies only when you configure the ActiveX/COM Adapter to use early binding.</remarks>
      <param name="seqFileToUpdate">Specifies a reference to the sequence file that contains ActiveX steps to update.</param>
      <param name="numStepsModified">Returns the number of steps the method updated.
</param>
      <param name="numStepUpdatesFailed">Returns the number of steps the method failed to update.</param>
      <param name="errorDescription">When a syntax error exists, this parameter returns an error message describing the type of error.</param>
      <seealso cref="SequenceFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXAdapter.Servers">
      <summary>Returns the list of ActiveX Automation servers registered on this computer.</summary>
      <seealso cref="ActiveXServers" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter">
      <summary>Use objects from the CommonCAdapter class to configure and obtain common information about the LabWindows/CVI and C/C++ DLL Adapters.
To access the properties and methods of the Adapter class, use the CommonCAdapter.AsAdapter method to obtain an object.
To access the properties and methods of a specific adapter class, query the CommonCAdapter object for the interface of the adapter-specific interface you want.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="CVIAdapter" />
      <seealso cref="DllAdapter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter object that represents the CommonCAdapter.</summary>
      <remarks>Use the underlying module Adapter object to access properties and methods common to all adapters.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="CVIAdapter" />
      <seealso cref="DllAdapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.DefaultStructPacking">
      <summary>Specifies how an adapter packs the structure parameters it passes to a corresponding module. Set the packing options to match the default for structure packing in the development environment.</summary>
      <remarks>Specify the type of struct passing by using the <c>StructPassingOptions</c> constants.</remarks>
      <seealso cref="&quot;C/C++ DLL Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_DLLAdapterConfig.htm')" />
      <seealso cref="CommonCAdapter.DefaultStructPacking" />
      <seealso cref="CommonCAdapter.GetStructPacking" />
      <seealso cref="CommonCAdapter.SetStructPacking" />
      <seealso cref="&quot;LabWindows/CVI Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_C_CVI_AdapterConfig.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetAllowStructPassing(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Returns a value that indicates whether a type definition allows the adapter to pass instances of the type as structures to the corresponding module.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <seealso cref="CommonCAdapter.SetAllowStructPassing" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.SetAllowStructPassing(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Boolean)">
      <summary>Specifies whether a type definition allows the adapter to pass instances of the type as structures to the corresponding module.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="allowStructPassing">If this parameter is <c>True</c>, structure passing is enabled. Otherwise, structure passing is disabled.</param>
      <seealso cref="CommonCAdapter.GetAllowStructPassing" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetStructPacking(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Returns the manner in which an adapter packs the structure parameters it passes to a corresponding module. The packing options must match the structure packing for the struct in the code module.</summary>
      <returns>Indicates the structure passing for the specific type definition.</returns>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <seealso cref="&quot;C/C++ DLL Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_DLLAdapterConfig.htm')" />
      <seealso cref="CommonCAdapter.DefaultStructPacking" />
      <seealso cref="CommonCAdapter.SetStructPacking" />
      <seealso cref="&quot;LabWindows/CVI Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_C_CVI_AdapterConfig.htm')" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.SetStructPacking(NationalInstruments.TestStand.Interop.API.PropertyObject,NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions)">
      <summary>Specifies how a type definition allows the adapter to pack the structure parameters it passes to a corresponding module. Set the packing options to match structure packing for the struct in the code module.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="structPackingOption">Specifies the structure passing for the specific type definition.</param>
      <seealso cref="CommonCAdapter.DefaultStructPacking" />
      <seealso cref="CommonCAdapter.GetStructPacking" />
      <seealso cref="PropertyObject" />
      <seealso cref="StructPassingOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetExcludeFromStruct(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns a value that indicates whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as parameters to the corresponding code module.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="CommonCAdapter.SetExcludeFromStruct" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.SetExcludeFromStruct(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Boolean)">
      <summary>Specifies whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as parameters to the corresponding code module.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="excludeFromStruct">Set this parameter to <c>True</c> to exclude the corresponding property. Otherwise, set this parameter to <c>False</c>.</param>
      <seealso cref="CommonCAdapter.GetExcludeFromStruct" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetStructMemberType(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns the type of the type definition property that the corresponding location specifies.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="CommonCAdapter.SetStructMemberType" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.SetStructMemberType(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes)">
      <summary>Specifies the type of the type definition property that the corresponding location specifies.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="structMemberType">Specifies the type of specific property in the corresponding typeDefinition parameter.</param>
      <seealso cref="CommonCAdapter.GetStructMemberType" />
      <seealso cref="PropertyObject" />
      <seealso cref="StructMemberTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetStructMemberStorage(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns the kind of storage used for the type definition property that the corresponding location specifies.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="CommonCAdapter.GetStructMemberStorage" />
      <seealso cref="CommonCAdapter.GetStructMemberType" />
      <seealso cref="CommonCAdapter.SetStructMemberStorage" />
      <seealso cref="CommonCAdapter.SetStructMemberType" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.SetStructMemberStorage(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberStorageOptions)">
      <summary>Specifies the kind of storage used for the type definition that the corresponding location stores.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="structMemberStorage">Specifies the kind of storage of the specific property in the corresponding typeDefinition parameter.</param>
      <seealso cref="CommonCAdapter.GetStructMemberStorage" />
      <seealso cref="PropertyObject" />
      <seealso cref="StructMemberArrayStorageOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetStructMemberArrayStorage(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns the kind of array storage used for the type definition array property that the corresponding location specifies.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="CommonCAdapter.SetStructMemberArrayStorage" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.SetStructMemberArrayStorage(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberArrayStorageOptions)">
      <summary>Specifies the kind of array storage used for the type definition property that the corresponding location specifies.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="structMemberArrayStorage">Specifies the kind of array storage of the specific property in the corresponding typeDefinition parameter.</param>
      <seealso cref="CommonCAdapter.GetStructMemberArrayStorage" />
      <seealso cref="PropertyObject" />
      <seealso cref="StructMemberArrayStorageOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetStructMemberStringBufferSize(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns the string buffer size that corresponds to the property that the corresponding location specifies.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="CommonCAdapter.SetStructMemberStringBufferSize" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.SetStructMemberStringBufferSize(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Int32)">
      <summary>Specifies the string buffer size corresponding to the property that the corresponding location specifies.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the PropertyObject is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="structMemberStringBufferSize">Specifies the string buffer size for the corresponding property.</param>
      <seealso cref="CommonCAdapter.GetStructMemberStringBufferSize" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetDllFunctions(System.String)">
      <summary>Returns the functions for a specific DLL.</summary>
      <remarks>This method reads the specified DLL and obtains a list of functions in the DLL. If a type library exists in the same directory as the DLL and the type library has the same base filename as the DLL, this method reads the type library for function parameter information.</remarks>
      <param name="dllPath">Specifies the absolute path of the DLL.</param>
      <seealso cref="DllFunctions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetStructNames">
      <summary>Returns a list of TestStand type names to use to pass to C struct parameters. The list contains all the currently loaded TestStand types you can pass to structure parameters.</summary>
      <seealso cref="&quot;Type Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_DataTypeProp_Struct_Tab.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCAdapter.GetEnumerationNames(System.Boolean)">
      <summary>Returns a list of TestStand type names to use to pass to enumeration parameters. The list contains all currently loaded TestStand types you can pass to enumeration parameters.</summary>
      <param name="includeEnumArrays">Set this parameter to <c>True</c> to include Arrays of Enumerations in the list of TestStand type names. Otherwise, set to <c>False</c>.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllAdapter">
      <summary>Use objects from the DllAdapter class to configure and obtain C/C++ DLL Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
To access the properties and methods of the Adapter class, use the DllAdapter.AsAdapter method to obtain an object.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="CommonCAdapter" />
      <seealso cref="DLLAdapter.AsAdapter" />
      <seealso cref="&quot;Engine.GetAdapter&quot;javascript:APILink('/RefTopics/Engine_GetAdapter_M.htm')" />
      <seealso cref="&quot;Engine.GetAdapterByKeyName&quot;javascript:APILink('/RefTopics/Engine_GetAdapterByKeyName_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllAdapter.AsCommonCAdapter">
      <summary>Returns the underlying CommonCAdapter object that represents the C/C++ DLL Adapter.</summary>
      <remarks>Use the CommonCAdapter object to access properties and methods common to all adapters derived from this class.</remarks>
      <seealso cref=".AsAdapter" />
      <seealso cref="CommonCAdapter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter object that represents the C/C++ DLL Adapter.</summary>
      <remarks>Use the adapter to access properties and methods common to all adapters.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="DllAdapter.AsCommonCAdapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllAdapter.VisualStudioDTEVersionForEditing">
      <summary>Specifies the Microsoft Visual Studio development environment (DTE) version the C&#47;C&#43;&#43; DLL Adapter  uses when creating and editing code when more than one version of Visual Studio is installed.</summary>
      <remarks>If you have only one version of Visual Studio installed, the C&#47;C&#43;&#43; DLL Adapter always uses that version for debugging.
You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.</remarks>
      <seealso cref="VisualStudioDTEVersions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllAdapter.VisualStudioDTEVersionForDebugging">
      <summary>Specifies the Microsoft Visual Studio development environment (DTE) version the C&#47;C&#43;&#43; DLL Adapter uses when debugging into code modules when more than one version of Visual Studio is installed.</summary>
      <remarks>If you have only one version of Visual Studio installed, the C&#47;C&#43;&#43; DLL Adapter always uses that version for debugging.
You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.
<para>Note: The <c>VisualStudioDTEVersion_MatchProject</c> constant is not a valid value for this property.</para></remarks>
      <seealso cref="VisualStudioDTEVersions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllAdapter.NewModule">
      <summary>Creates and returns a new DllModule object. Use this method to create a <c>DllModule</c> object that you can execute without using a step, sequence, or execution.</summary>
      <seealso cref="DllModule" />
      <seealso cref="DllModule.Execute" />
      <seealso cref="DllParameters.NewArguments" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIAdapter">
      <summary>Use objects from the CVIAdapter class to configure and obtain LabWindows/CVI Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
To access the properties and methods of the Adapter class, use the CVIAdapter.AsAdapter method to obtain an object.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="CommonCAdapter" />
      <seealso cref="&quot;Engine.GetAdapter&quot;javascript:APILink('/RefTopics/Engine_GetAdapter_M.htm')" />
      <seealso cref="&quot;Engine.GetAdapterByKeyName&quot;javascript:APILink('/RefTopics/Engine_GetAdapterByKeyName_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIAdapter.CodeTemplatePolicy">
      <summary>Specifies which code templates to use during code creation. You can choose to use new templates, legacy templates, or both new and legacy templates.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIAdapter.AsCommonCAdapter">
      <summary>Returns the underlying CommonCAdapter object that represents the LabWindows/CVI Adapter.</summary>
      <remarks>Use the CommonCAdapter object to access properties and methods common to all adapters derived from this class.</remarks>
      <seealso cref="CommonCAdapter" />
      <seealso cref="CVIAdapter.AsAdapter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter object that represents the LabWindows/CVI Adapter.</summary>
      <remarks>Use the adapter to access properties and methods common to all adapters.</remarks>
      <seealso cref="Adapter" />
      <seealso cref="CVIAdapter.AsCommonCAdapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIAdapter.ExecuteStepsInExternalInstance">
      <summary>You can specify the test execution mode as in-process or out-of-process for the LabWindows/CVI Adapter. When the adapter runs tests in-process, it executes them in the same process as the sequence editor or the user interface you are running. When the adapter runs tests out-of-process, it executes them in an external instance of the LabWindows/CVI development environment. 
If this property is <c>True</c>, the tests run out-of-process. If the property is <c>False</c>, the tests run in-process.</summary>
      <remarks>When you execute code modules in the same process as the sequence editor or user interface, the adapter loads and runs code modules directly without using the LabWindows/CVI development environment.</remarks>
      <seealso cref="CVIAdapter.ExecutionServerProjectPathName" />
      <seealso cref="CVIModule.AlwaysRunInProcess" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIAdapter.ExecutionServerProjectPathName">
      <summary>The LabWindows/CVI Adapter can launch two different copies of LabWindows/CVI. 
The adapter uses one copy to execute test modules. By default, the adapter opens <c>&lt;TestStand&gt;\AdapterSupport\CVI\tscvirun.prj</c> in the copy of LabWindows/CVI that is executing the code modules. You can use the LabWindows/CVI Adapter Configuration dialog box to change which project the adapter uses to run code modules.
The adapter uses the other copy of LabWindows/CVI to allow you to edit the projects you use to create DLLs, static libraries, and object files.</summary>
      <remarks>When you execute code modules in the same process as the sequence editor or user interface, the adapter loads and runs code modules directly without using the LabWindows/CVI development environment.</remarks>
      <seealso cref="CVIAdapter.ExecuteStepsInExternalInstance" />
      <seealso cref="&quot;LabWindows/CVI Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_C_CVI_AdapterConfig.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIAdapter.NewModule">
      <summary>Creates and returns a new CVIModule object. Use this method to create a <c>CVIModule</c> object that you can execute without using a step, sequence, or execution.</summary>
      <seealso cref="CVIModule" />
      <seealso cref="CVIModule.Execute" />
      <seealso cref="CVIParameters.NewArguments" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicAdapter">
      <summary>Use objects from the HTBasicAdapter class to configure and obtain HTBasic Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
To access the properties and methods of the Adapter class, use the HTBasicAdapter.AsAdapter method to obtain an object.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="&quot;Engine.GetAdapter&quot;javascript:APILink('/RefTopics/Engine_GetAdapter_M.htm')" />
      <seealso cref="&quot;Engine.GetAdapterByKeyName&quot;javascript:APILink('/RefTopics/Engine_GetAdapterByKeyName_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter object that represents the HTBasicAdapter object.</summary>
      <remarks>Use the adapter to access properties and methods common to all adapters.</remarks>
      <seealso cref="Adapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicAdapter.UseDevelopmentServer">
      <summary>Specifies whether the HTBasic Adapter uses the development or run-time version of the HTBasic server.</summary>
      <remarks>If this property is <c>True</c>, the adapter uses the development version. Otherwise, the adapter uses the run-time version.</remarks>
      <seealso cref="HTBasicAdapter.DevelopmentServerPath" />
      <seealso cref="HTBasicAdapter.RunTimeServerPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicAdapter.RunTimeServerPath">
      <summary>Specifies the location of the run-time version of the HTBasic server.</summary>
      <remarks>The specified location must be a valid path.</remarks>
      <seealso cref="HTBasicAdapter.DevelopmentServerPath" />
      <seealso cref="HTBasicAdapter.UseDevelopmentServer" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicAdapter.DevelopmentServerPath">
      <summary>Specifies the location of the development version of the HTBasic server.</summary>
      <remarks>The specified location must be a valid path.</remarks>
      <seealso cref="HTBasicAdapter.RunTimeServerPath" />
      <seealso cref="HTBasicAdapter.UseDevelopmentServer" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicAdapter.DefaultWorkingDirectory">
      <summary>Specifies whether the HTBasic Adapter sets the working directory prior to invoking a subroutine. This setting applies only to HTBasic steps when you set the Working Directory option of the step to Use Adapter Default.</summary>
      <remarks>The default value is the subroutine file directory.</remarks>
      <seealso cref="HTBasicAdapter.DevelopmentServerPath" />
      <seealso cref="HTBasicAdapter.RunTimeServerPath" />
      <seealso cref="HTBasicAdapter.SpecWorkingDirectoryPath" />
      <seealso cref="HTBasicModule.WorkingDirectory" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicAdapter.SpecWorkingDirectoryPath">
      <summary>Specifies the working directory used for the HTBasic Adapter. The specified working directory must be a valid path.</summary>
      <remarks>This path is only used when you select Use Specified Directory as the Default Working Directory option.</remarks>
      <seealso cref="HTBasicAdapter.DefaultWorkingDirectory" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter">
      <summary>Use objects from the LabVIEW Adapter class to configure and obtain LabVIEW Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
To access the properties and methods of the Adapter class, use the LabVIEWAdapter.AsAdapter method to obtain an object.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="&quot;Engine.GetAdapter&quot;javascript:APILink('/RefTopics/Engine_GetAdapter_M.htm')" />
      <seealso cref="&quot;Engine.GetAdapterByKeyName&quot;javascript:APILink('/RefTopics/Engine_GetAdapterByKeyName_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.CodeTemplatePolicy">
      <summary>Specifies which code templates to use during code creation. Policies to choose from include using new templates, using legacy templates, or using both new and legacy templates.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.Initialize">
      <summary>Initializes the LabVIEW Adapter by connecting to the configured LabVIEW server.</summary>
      <remarks>If you do not call this method, the LabVIEW Adapter connects to the configured LabVIEW server when first needed. </remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.IsCurrentLabVIEWServerAnEditor">
      <summary>Returns a value that indicates whether the LabVIEW server TestStand is using to run VIs can edit VIs.</summary>
      <remarks>A LabVIEW server includes a LabVIEW Development Environment, a LabVIEW-created executable that exports the LabVIEW ActiveX Automation server interface, or a LabVIEW Run-Time Engine.</remarks>
      <seealso cref="LabVIEWAdapter.CurrentLabVIEWServerVersion" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter object that represents the LabVIEWAdapter object.</summary>
      <remarks>Use the underlying module Adapter object to access properties and methods that are common to all adapters.</remarks>
      <seealso cref="Adapter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetServerInfo(NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWServerTypes@,System.String@)">
      <summary>Returns information about the LabVIEW server that the LabVIEW Adapter is currently configured to use for running VIs. Returns <c>AutoDetect</c> when you select the Autodetect using VI version option in the Select or Type Which LabVIEW Server to Use section of the LabVIEW Adapter Configuration dialog box.</summary>
      <remarks>The LabVIEW Adapter uses a LabVIEW ActiveX Automation server or a LabVIEW Run-Time Engine.</remarks>
      <param name="serverType">Returns the type of LabVIEW server&#8212;either a LabVIEW ActiveX server or a LabVIEW Run-Time Engine.</param>
      <param name="serverInfo">Returns the progID of the LabVIEW ActiveX server or the path of the LabVIEW Run-Time Engine that the adapter is currently using.</param>
      <seealso cref="&quot;LabVIEW Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_LVAdapterConfig.htm')" />
      <seealso cref="LabVIEWAdapter.SetServerInfo" />
      <seealso cref="LabVIEWServerTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.UUTIterationNumberExpression">
      <summary>Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT # element of the Invocation Information cluster when calling a legacy VI.</summary>
      <returns>The expression to evaluate at run time.</returns>
      <seealso cref="LabVIEWAdapter.UUTSerialNumberExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.UUTSerialNumberExpression">
      <summary>Specifies the expression the LabVIEW Adapter evaluates at run time to generate a value to pass to the UUT Info element of the Invocation Information cluster when calling a legacy VI.</summary>
      <returns>The expression to evaluate at run time.</returns>
      <seealso cref="LabVIEWAdapter.UUTIterationNumberExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.ReserveLoadedVIsForExec">
      <summary>Specifies that LabVIEW reserves each VI to run when TestStand loads the VI. This property eliminates the need to use permanent reference VIs for sharing between step modules.</summary>
      <remarks>When a VI is reserved for execution, references that it creates during execution remain valid until the VI is unreserved. VIs that LabVIEW reserves take less time to call, but you cannot edit them in LabVIEW unless you click the Edit VI button in the Edit LabVIEW VI Call dialog box or select Edit Code from the context menu of the calling step.
TestStand unreserves a VI under the following circumstances:
<para><para>&#160;&#160;&#160;&#160;* When you select File&#0187;Unload All Modules from the File menu.</para><para>&#160;&#160;&#160;&#160;* When the VI is unloaded based on a sequence file or step unload options.</para><para>&#160;&#160;&#160;&#160;* When you open a VI for editing from within TestStand.</para></para>
You can create a reference in a VI called by one step in a sequence, use the reference in a VI called by a second step, and close the reference in a third step. For example, you can create a file refnum from Open File, use the reference in Read File or Write File, and close the reference using Close File when you no longer need the reference.
If you set the Unload Option for a step that calls a VI to Unload After Step Executes or Unload When Precondition Fails, the LabVIEW references the step creates might be destroyed on completion of the step. If you do not reserve VIs for execution, you can use the permanent reference VIs to maintain LabVIEW references between steps.</remarks>
      <seealso cref="&quot;Edit LabVIEW VI Call dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditLVCall.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetClusterPassingEnabled(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Returns a value that indicates whether a type definition allows the LabVIEW Adapter to pass instances of the type as cluster parameters to VIs.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <seealso cref="LabVIEWAdapter.SetClusterPassingEnabled" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.SetClusterPassingEnabled(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Boolean)">
      <summary>Specifies whether a type definition allows the LabVIEW Adapter to pass instances of the type as cluster parameters to VIs.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="clusterPassingEnabled">Specifies whether cluster passing is enabled.</param>
      <seealso cref="LabVIEWAdapter.GetClusterPassingEnabled" />
      <seealso cref="LabVIEWAdapter.SetExcludeFromCluster" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetExcludeFromCluster(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns a value that indicates whether the specified type definition property is excluded when converting instances of the type definition into clusters to pass as parameters to VIs.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="LabVIEWAdapter.GetClusterPassingEnabled" />
      <seealso cref="LabVIEWAdapter.SetExcludeFromCluster" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.SetExcludeFromCluster(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Boolean)">
      <summary>Specifies whether the specified type definition property is excluded when converting instances of the type definition into clusters to pass as parameters to VIs.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="excludeFromCluster">Pass <c>True</c> to exclude the corresponding property. Otherwise, set this parameter to <c>False</c>.</param>
      <seealso cref="LabVIEWAdapter.GetExcludeFromCluster" />
      <seealso cref="LabVIEWAdapter.SetClusterPassingEnabled" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetClusterMemberLabel(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns the label of the cluster member that corresponds to the specified type definition property.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the type definition.</param>
      <seealso cref="LabVIEWAdapter.GetClusterPassingEnabled" />
      <seealso cref="LabVIEWAdapter.SetClusterMemberLabel" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.SetClusterMemberLabel(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.String)">
      <summary>Specifies the label of the cluster member that corresponds to the specified type definition property.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="clusterMemberLabel">Specifies the label of the cluster member.</param>
      <seealso cref="LabVIEWAdapter.GetClusterMemberLabel" />
      <seealso cref="LabVIEWAdapter.SetClusterPassingEnabled" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.SetServerInfo(NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWServerTypes,System.String)">
      <summary>Specifies which server the LabVIEW Adapter uses to run VIs.</summary>
      <remarks>The LabVIEW Adapter uses either a LabVIEW ActiveX Automation server or a supported LabVIEW Run-Time Engine to run VIs. If you specify an ActiveX server, it can be either a supported LabVIEW development environment or a supported version of a LabVIEW-built application that has enabled the LabVIEW ActiveX server. Refer to the NI TestStand Release Notes for more information about the versions of LabVIEW TestStand supports.</remarks>
      <param name="serverType">Specifies the type of LabVIEW server&#8212;either a LabVIEW ActiveX server or a LabVIEW Run-Time Engine.</param>
      <param name="serverInfo">Identifies the LabVIEW server that the LabVIEW Adapter currently uses. For LabVIEW ActiveX servers, the string is the progID of the server; for a LabVIEW Run-Time Engine, the string is the path to the run-time engine. The progID for LabVIEW is <c>LabVIEW</c>.</param>
      <seealso cref="LabVIEWAdapter.GetServerInfo" />
      <seealso cref="LabVIEWServerTypes" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.DeployProjectLibrary(System.String,System.String,NationalInstruments.TestStand.Interop.AdapterAPI.DeployProjectLibraryOptions)">
      <summary>Deploys or undeploys the shared variables defined in a LabVIEW project library file to the specified remote computer.</summary>
      <remarks>TestStand can deploy a shared variable bound to another shared variable only when you use an NI Publish-Subscribe Protocol (NI-PSP) URL to bind the shared variable to deploy to another shared variable. If you attempt to use a Deploy Library step to deploy a shared variable to a variable in a LabVIEW project, the deployment fails. Refer to the LabVIEW Help for more information about deploying shared variables and NI-PSP URLs.</remarks>
      <param name="targetIPAddress">Specifies the remote computer.  Leave this option empty to use the local computer.</param>
      <param name="libraryPath">Specifies the path to the project library file on the local computer to deploy or undeploy.
<para>Note: The library must only define shared variables and cannot contain any VI files.</para></param>
      <param name="options">Specifies whether to deploy or undeploy the LabVIEW project library file.</param>
      <seealso cref="&quot;Deploying Network-Published Shared Variables&quot;javascript:TSLabVIEW('/InfoTopics/Variable.htm')" />
      <seealso cref="DeployProjectLibraryOptions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.CheckRemoteSystemStatus(System.String,System.Int32,System.Int32,System.String@)">
      <summary>Returns a value that indicates whether a remote system is running LabVIEW and allows TestStand to connect to it. This is particularly useful on a real-time system.</summary>
      <param name="targetIPAddress">Specifies the remote computer. Leave this option empty to use the local computer.</param>
      <param name="portNumber">Specifies the TCP/IP port number to use to connect to the remote system. </param>
      <param name="timeout">Specifies the time, in milliseconds, to wait for a connection before timing out. A value of <c>-1</c> indicates to wait indefinitely.</param>
      <param name="statusMessage">Returns any error messages generated while checking system status.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.CurrentLabVIEWServerVersion">
      <summary>Returns the version of the LabVIEW server that TestStand is using to run VIs. The version contains only the major and minor version numbers, such as &quot;8.0&quot;. Returns <c>AutoDetect</c> when you select the Autodetect using VI version option in the Select or Type Which LabVIEW Server to Use section of the LabVIEW Adapter Configuration dialog box.</summary>
      <remarks>A LabVIEW server includes a LabVIEW Development Environment, a LabVIEW-created executable that exports the LabVIEW ActiveX Automation server interface, or a LabVIEW Run-Time Engine.</remarks>
      <seealso cref="LabVIEWAdapter.IsCurrentLabVIEWServerAnEditor" />
      <seealso cref="&quot;LabVIEW Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_LVAdapterConfig.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetExpressVIMenuStructure(System.Boolean,System.Int32)">
      <summary>Returns a PropertyObject array that specifies the structure of the Express VI menu TestStand uses to select an Express VI. </summary>
      <remarks>TestStand uses this method to create the context menu that becomes visible when you browse for an Express VI in the LabVIEW Module pane. Each element of the array is a PropertyObject container with subproperties that specify the menu name, the path to the Express VI, and the icon for the menu.</remarks>
      <param name="refreshMenu">Specifies whether to force TestStand to rebuild the Express VI menu. TestStand caches the menu and only rebuilds the menu when you configure the LabVIEW Adapter to use a different LabVIEW version. TestStand does not automatically refresh the menu when you select a different function palette view in LabVIEW.</param>
      <param name="parentHWnd">Specifies the parent window handle TestStand uses for the progress window the method might display.</param>
      <seealso cref="ExpressVIMenuItemProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.IsExpressVI(System.String,System.String@)">
      <summary>Returns a value that indicates whether the specified VI is an Express VI.</summary>
      <remarks>Use the absolute path to the Express VI.</remarks>
      <param name="path">Specifies a string containing the absolute pathname of a VI.</param>
      <param name="displayVIName">Returns the display name of the Express VI.  If the VI is not an Express VI, the method returns an empty string.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetVIVersion(System.String)">
      <summary>Returns the LabVIEW version that saved the specified VI. The version contains only the major and minor version numbers, such as &quot;8.2&quot;.</summary>
      <param name="path">Specifies a string containing the absolute pathname of a VI.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.FileExistsInLLB(System.String)">
      <summary>Returns a value that indicates whether the given file exists in an LLB file.</summary>
      <remarks>The Engine.FindFile method does not search LLB files. Use this method whenever <c>Engine.FindFile</c> fails to find a VI.</remarks>
      <param name="path">Specifies a string containing the absolute pathname of the VI in the LLB file.</param>
      <seealso cref="Engine.FindFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.LabVIEWDevelopmentEnvironmentBitness">
      <summary>Specifies the bitness of the LabVIEW development environment version to use. Options include the current active 32-bit or 64-bit LabVIEW development environment, only the current active 32-bit LabVIEW development environment, or only the current active 64-bit LabVIEW development environment. </summary>
      <seealso cref="&quot;LabVIEW Adapter Configuration Dialog Box&quot;javascript:RefLink('/InfoTopics/DB_LVAdapterConfig.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.IsLabVIEWActiveXServerConnectionValid">
      <summary>Returns a value that indicates whether the LabVIEW ActiveX server connection TestStand is using is valid.</summary>
      <seealso cref="LabVIEWAdapter.CurrentLabVIEWServerVersion" />
      <seealso cref="LabVIEWAdapter.IsCurrentLabVIEWServerAnEditor" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetVINamespace(System.String)">
      <summary>Returns the LabVIEW namespace of the specified VI. The namespace of the VI is the qualified name of the owning LabVIEW project library.</summary>
      <remarks>This method requires the LabVIEW 2012 Run-Time Engine or later to be installed. Otherwise, the method returns an empty string.</remarks>
      <param name="path">Specifies a string that contains the absolute pathname of a VI.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetClusterMemberIsBinaryString(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns <c>True</c> if the cluster member that corresponds to the specified type definition property contains binary data.</summary>
      <remarks>TestStand preserves NUL bytes when setting and getting LabVIEW string data for binary strings.</remarks>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="LabVIEWAdapter.GetClusterPassingEnabled" />
      <seealso cref="LabVIEWAdapter.SetClusterMemberIsBinaryString" />
      <seealso cref="LabVIEWParameter.PassAsBinaryString" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.SetClusterMemberIsBinaryString(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Boolean)">
      <summary>Specifies whether the cluster member that corresponds to the specified type definition property contains binary data.</summary>
      <remarks>TestStand preserves NUL bytes when setting and getting LabVIEW string data for binary strings.</remarks>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="val">Pass <c>True</c> to specify that the cluster member is a binary string.</param>
      <seealso cref="LabVIEWAdapter.GetClusterMemberIsBinaryString" />
      <seealso cref="LabVIEWAdapter.SetClusterPassingEnabled" />
      <seealso cref="LabVIEWParameter.PassAsBinaryString" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.NewModule">
      <summary>Creates and returns a new LabVIEWModule object. Use this method to create a <c>LabVIEWModule</c> object that you can use to execute a LabVIEW VI without using a step, sequence, or execution.</summary>
      <seealso cref="LabVIEWModule" />
      <seealso cref="LabVIEWModule.Execute" />
      <seealso cref="LabVIEWParameters.NewArguments" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.AutoDeploySharedVariables">
      <summary>Set this property to <c>True</c> for TestStand to deploy shared variables defined in LabVIEW libraries within the LabVIEW projects you use in TestStand. This occurs the first time a loading LabVIEW step references the project. </summary>
      <remarks>The LabVIEW library to deploy should contain only shared variables.
TestStand can deploy a shared variable bound to another shared variable only when you use an NI Publish-Subscribe Protocol (NI-PSP) URL to bind the shared variable to deploy to another shared variable. If you attempt to use a Deploy Library step to deploy a shared variable to a variable in a LabVIEW project, the deployment fails. Refer to the LabVIEW Help for more information about deploying shared variables and NI-PSP URLs.</remarks>
      <seealso cref="&quot;Deploying Network-Published Shared Variables&quot;javascript:TSLabVIEW('/InfoTopics/Variable.htm')" />
      <seealso cref="LabVIEWAdapter.AutoUndeploySharedVariables" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.AutoUndeploySharedVariables">
      <summary>Set this property to <c>True</c> for TestStand to undeploy the shared variables defined in LabVIEW libraries within the LabVIEW project once the last LabVIEW step that references the LabVIEW Project is unloaded.</summary>
      <remarks>TestStand can deploy a shared variable bound to another shared variable only when you use an NI Publish-Subscribe Protocol (NI-PSP) URL to bind the shared variable to deploy to another shared variable. If you attempt to use a Deploy Library step to deploy a shared variable to a variable in a LabVIEW project, the deployment fails. Refer to the LabVIEW Help for more information about deploying shared variables and NI-PSP URLs.</remarks>
      <seealso cref="&quot;Deploying Network-Published Shared Variables&quot;javascript:TSLabVIEW('/InfoTopics/Variable.htm')" />
      <seealso cref="LabVIEWAdapter.AutoDeploySharedVariables" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.UseMultipleThreadsWhenExecutingVIsWithRTE">
      <summary>Specifies to use multiple LabVIEW execution threads when executing VIs using the LabVIEW Run-Time Engine (RTE).
<para>Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.</para></summary>
      <remarks>Changes to this property do not take effect until you restart the TestStand Engine.</remarks>
      <seealso cref="LabVIEWAdapter.AdditionalThreadsInheritCallingThreadsCPUAffinity" />
      <seealso cref="LabVIEWAdapter.NumberofThreadsUsedWhenExecutingVIsWithRTE" />
      <seealso cref="&quot;Symmetric Multiprocessing in VIs Executed from TestStand&quot;javascript:TSLabVIEW('/InfoTopics/SMP.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.NumberOfThreadsUsedWhenExecutingVIsWithRTE">
      <summary>Specifies the number of LabVIEW execution threads to use when executing VIs with the LabVIEW Run-Time Engine (RTE).
<para>Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.</para></summary>
      <remarks>Changes to this property do not take effect until you restart the TestStand Engine.</remarks>
      <seealso cref="LabVIEWAdapter.AdditionalThreadsInheritCallingThreadsCPUAffinity" />
      <seealso cref="LabVIEWAdapter.UseMultipleThreadsWhenExecutingVIsWithRTE" />
      <seealso cref="&quot;Symmetric Multiprocessing in VIs Executed from TestStand&quot;javascript:TSLabVIEW('/InfoTopics/SMP.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.AdditionalThreadsInheritCallingThreadsCPUAffinity">
      <summary>Specifies if the CPU affinity for the additional threads used to execute VIs with the LabVIEW Run-Time Engine (RTE) inherit the CPU affinity of the TestStand execution thread.
<para>Note: The LabVIEW Adapter uses this property only when executing VIs using the LabVIEW RTE and the preferred execution system of the VIs is same as caller.</para></summary>
      <remarks>Changes to this property do not take effect until you restart the TestStand Engine.</remarks>
      <seealso cref="LabVIEWAdapter.NumberofThreadsUsedWhenExecutingVIsWithRTE" />
      <seealso cref="LabVIEWAdapter.UseMultipleThreadsWhenExecutingVIsWithRTE" />
      <seealso cref="&quot;Symmetric Multiprocessing in VIs Executed from TestStand&quot;javascript:TSLabVIEW('/InfoTopics/SMP.htm')" />
      <seealso cref="&quot;Using TestStand on SMP Systems&quot;javascript:TSFundLink('/InfoTopics/SMP_Clarification.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetMemberNames(System.String,System.String)">
      <summary>Returns an array that contains the names for each public member VI found in the specified LabVIEW class. </summary>
      <param name="projectAbsolutePath">Specifies the absolute path of the LabVIEW project. Pass an empty string if no project exists. </param>
      <param name="classAbsolutePath">Specifies the absolute path of the LabVIEW class.</param>
      <seealso cref="LabVIEWModule.ClassPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetNodeLibraries(System.String[]@,System.String[]@,System.String[]@)">
      <summary>Returns arrays that contain the names, genericTypes, and genericTypeNames for all available LabVIEW node libraries.</summary>
      <param name="libraryNames">Specifies the names of the available LabVIEW node libraries.</param>
      <param name="genericTypes">Specifies the genericTypes of the available LabVIEW node libraries.</param>
      <param name="genericTypeNames">Specifies the genericTypeNames of the available LabVIEW node libraries.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetClassesForNodeLibrary(System.String,System.String,System.String[]@,System.String[]@)">
      <summary>Returns arrays that contain the long names and data names of the classes defined by the LabVIEW node library you specify.</summary>
      <param name="libraryName">Specifies the name of the LabVIEW node library you select.</param>
      <param name="genericType">Specifies the genericType of the LabVIEW node library you select.</param>
      <param name="longNames">Specifies the LongNames of the available properties for the LabVIEW node library class you select.</param>
      <param name="dataNames">Specifies the DataNames of the available properties of the LabVIEW node library class you select.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetPropertiesForNodeClass(System.String,System.String,System.String,System.String[]@,System.String[]@,System.String[]@,System.String[]@,System.String[]@,System.Int32[]@)">
      <summary>Returns arrays that contain information about the properties of the LabVIEW node library class you select, such as LongName, ShortName, DataName, HelpDescription, and options.</summary>
      <param name="libraryName">Specifies the name of the LabVIEW node library you select.</param>
      <param name="genericType">Specifies the genericType of the LabVIEW node library you select.</param>
      <param name="classDataName">Specifies the DataName of the LabVIEW node library class you select.</param>
      <param name="longNames">Specifies the LongNames of the available properties for the LabVIEW node library class you select.</param>
      <param name="shortNames">Specifies the ShortNames of the available properties of the LabVIEW node library class you select.</param>
      <param name="dataNames">Specifies the DataNames of the available properties of the LabVIEW node library class you select.</param>
      <param name="uniqueIDs">Specifies the unique IDs of the available properties for the LabVIEW node library class you select.</param>
      <param name="helpDescriptions">Specifies the help descriptions of the available properties of the LabVIEW node library class you select.</param>
      <param name="options">Specifies the options for the available properties of the LabVIEW node library class you select.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.GetPropertiesForLabVIEWClass(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String[]@,System.String[]@,System.String[]@,System.String[]@,System.String[]@,System.Int32[]@)">
      <summary>Returns arrays that contain information about the properties of the LabVIEW node class you select, such as LongName, ShortName, DataName, HelpDescription, and options.</summary>
      <param name="libraryName">Specifies the name of the LabVIEW node library you select.</param>
      <param name="genericType">Specifies the genericType of the LabVIEW node library you select.</param>
      <param name="projectAbsolutePath">Specifies the absolute path of the LabVIEW project. Pass an empty string if no LabVIEW project exists.</param>
      <param name="classAbsolutePath">Specifies the absolute path of the LabVIEW node class you select.</param>
      <param name="classLongName">Specifies the LongName of the LabVIEW node class you select.
</param>
      <param name="classDataName">Specifies the DataName of the LabVIEW node library class you select.</param>
      <param name="longNames">Specifies the LongNames of the available properties for the LabVIEW node library class you select.</param>
      <param name="shortNames">Specifies the ShortNames of the available properties of the LabVIEW node library class you select.</param>
      <param name="dataNames">Specifies the DataNames of the available properties of the LabVIEW node library class you select.
</param>
      <param name="uniqueIDs">Specifies the unique IDs of the available properties for the LabVIEW node library class you select.</param>
      <param name="helpDescriptions">Specifies the help descriptions of the available properties of the LabVIEW node library class you select.</param>
      <param name="options">Specifies the options for the available properties of the LabVIEW node library class you select.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.DisplayHelpForNodeProperty(System.String,System.String,System.String,System.String,System.String)">
      <summary>Launches the LabVIEW Help topic for the property.</summary>
      <param name="libraryName">Specifies the name of the LabVIEW node library you select.</param>
      <param name="genericType">Specifies the genericType of the LabVIEW node library you select.</param>
      <param name="classDataName">Specifies the Class Data Name of the LabVIEW node property.</param>
      <param name="propertyDataName">Specifies the Property Data Name of the LabVIEW node property.</param>
      <param name="propertyUniqueID">Specifies the unique ID of the LabVIEW node property.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWAdapter.EnableRTEDebuggingAndTracing">
      <summary>Specifies whether LabVIEW Runtime engine (RTE) support for debugging and tracing is enabled.</summary>
      <remarks>Changes to this property do not take effect until you restart the TestStand engine.</remarks>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceAdapter">
      <summary>Use objects from the Sequence Adapter class to configure and obtain Sequence Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
To access the properties and methods of the Adapter class, use the SequenceAdapter.AsAdapter method to obtain an object.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="&quot;Engine.GetAdapter&quot;javascript:APILink('/RefTopics/Engine_GetAdapter_M.htm')" />
      <seealso cref="&quot;Engine.GetAdapterByKeyName&quot;javascript:APILink('/RefTopics/Engine_GetAdapterByKeyName_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter that represents the SequenceAdapter object.</summary>
      <remarks>Use the underlying module Adapter object to access properties and methods common to all adapters.</remarks>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceAdapter.GetSequenceFile(System.String)">
      <summary>Returns a reference to a SequenceFile object for examining the contents of the file.</summary>
      <remarks>Use this method to examine the contents of a sequence file without running load and unload callbacks, without preloading modules, and without merging types. Sequence files loaded by this method remain in memory until they have not been referenced after several minutes. As a result, calling this method multiple times for the same file does not usually cause the file to be loaded multiple times.

Do not call Engine.ReleaseSequenceFileEx on this object before releasing it.

To execute or edit a sequence file, use the Engine.GetSequenceFileEx method instead of this method.</remarks>
      <returns>Returns a reference to a <c>SequenceFile</c> object that represents the sequence file the path parameter specifies. The returned reference is null if the path parameter is invalid or does not specify a valid sequence file.  </returns>
      <param name="path">Specifies the absolute pathname of the sequence file.</param>
      <seealso cref="Engine.GetSequenceFileEx" />
      <seealso cref="Engine.ReleaseSequenceFileEx" />
      <seealso cref="&quot;SequenceFile&quot;SequenceFile.htm" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter">
      <summary>Use objects from the DotNetAdapter class to configure and obtain .NET Adapter-specific information about the module adapter. Call the Engine.GetAdapter or Engine.GetAdapterByKeyName method to obtain a reference to the adapter object.
To access the properties and methods of the Adapter class, use the DotNetAdapter.AsAdapter method to obtain an object.</summary>
      <seealso cref="&quot;Adapter&quot;Adapter.htm" />
      <seealso cref="&quot;Engine.GetAdapter&quot;javascript:APILink('/RefTopics/Engine_GetAdapter_M.htm')" />
      <seealso cref="&quot;Engine.GetAdapterByKeyName&quot;javascript:APILink('/RefTopics/Engine_GetAdapterByKeyName_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.GetStructurePassingEnabled(NationalInstruments.TestStand.Interop.API.PropertyObject)">
      <summary>Returns a value that indicates whether a type definition allows the .NET Adapter to pass instances of the type as structure parameters.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <seealso cref="DotNetAdapter.SetStructurePassingEnabled" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.SetStructurePassingEnabled(NationalInstruments.TestStand.Interop.API.PropertyObject,System.Boolean)">
      <summary>Specifies whether a type definition allows the .NET Adapter to pass instances of the type as structure parameters.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="structPassingEnabled">Specifies whether structure passing is enabled.</param>
      <seealso cref="DotNetAdapter.GetStructurePassingEnabled" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.GetExcludeFromStructure(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns a value that indicates whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as .NET parameters.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="DotNetAdapter.SetExcludeFromStructure" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.SetExcludeFromStructure(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Boolean)">
      <summary>Specifies whether the specified type definition property is excluded when converting instances of the type definition into structures to pass as .NET parameters.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="excludeFromStructure">Pass <c>True</c>  to exclude the corresponding property. Otherwise, set this parameter to <c>False</c>.</param>
      <seealso cref="DotNetAdapter.GetExcludeFromStructure" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.GetStructureMemberLabel(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String)">
      <summary>Returns the label of the structure member that corresponds to the specified type definition property.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <seealso cref="DotNetAdapter.SetStructureMemberLabel" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.SetStructureMemberLabel(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.String)">
      <summary>Specifies the label of the structure member that corresponds to the specified type definition property.</summary>
      <param name="typeDefinition">Specifies the type definition. This method returns an error if the property object is not a type definition.</param>
      <param name="propertyLookupString">Specifies the location of the property in the type definition.</param>
      <param name="structureMemberLabel">Specifies the label of the structure member.</param>
      <seealso cref="DotNetAdapter.GetStructureMemberLabel" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.AsAdapter">
      <summary>Returns the underlying module Adapter object that represents the DotNetAdapter object.</summary>
      <remarks>Use the underlying module Adapter object to access properties and methods common to all adapters.</remarks>
      <seealso cref="Adapter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.VisualStudioDTEVersionForEditing">
      <summary>Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when creating and editing code when more than one version of Visual Studio is installed. </summary>
      <remarks>If you have only one version of Visual Studio installed, the .NET Adapter always uses that version for debugging.
You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.</remarks>
      <seealso cref="VisualStudioDTEVersions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.VisualStudioDTEVersionForDebugging">
      <summary>Specifies the Microsoft Visual Studio development environment (DTE) version the .NET Adapter uses when debugging into code modules when more than one version of Visual Studio is installed. </summary>
      <remarks>If you have only one version of Visual Studio installed, the .NET Adapter always uses that version for debugging.
You can set this property to a supported value of the VisualStudioDTEVersions constants or to the programmatic identifier of the DTE version you want to use.
<para>Note: The <c>VisualStudioDTEVersion_MatchProject</c> constant is not a valid value for this property.</para></remarks>
      <seealso cref="VisualStudioDTEVersions" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.GetGACAssemblyStrongNames">
      <summary>Returns the strong name of each assembly found in the Global Assembly Cache (GAC).</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.CacheAssemblyInfo(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations,System.String)">
      <summary>Reads the specified assembly and caches type information for later use in TestStand. This method also reads and caches types and assemblies this assembly references. If a cached assembly changes, TestStand detects the change and updates the cache.</summary>
      <param name="assemblyLocationParam">Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).</param>
      <param name="assemblyPathParam">Specifies the pathname if the assembly is located in a file. This parameter passes the strong name if the assembly is located in the GAC.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.IsClassValid(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations,System.String,System.String)">
      <summary>Returns <c>True</c> if the .NET Adapter finds the given class in the given assembly. Otherwise, this method returns <c>False</c>.</summary>
      <param name="assemblyLocationParam">Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).</param>
      <param name="assemblyPathParam">Specifies the pathname if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.</param>
      <param name="classTypeNameParam">Specifies the fully specified type name for the class, including namespaces.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.GetClassNames(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations,System.String,System.Int32,System.String[]@,System.String[]@)">
      <summary>Retrieves the list of class names found in the given assembly.</summary>
      <param name="assemblyLocationParam">Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).</param>
      <param name="assemblyPathParam">Specifies the pathname if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.</param>
      <param name="reserved">This parameter is not currently used but may be used in the future. Pass <c>0</c> for this parameter.</param>
      <param name="typeNames">Returns an array that contains the fully qualified type names of all classes found in the specified assembly. This array is parallel to the displayNames array.</param>
      <param name="displayNames">Returns an array that contains the display names for all classes found in the assembly. This array is parallel to the typeNames array.
The display name for a class might be slightly different than the fully qualified name. For example, if all classes in the assembly share a common namespace, the display names do not include the namespace.</param>
      <seealso cref="DotNetAdapter.GetMemberNames" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.GetMemberNames(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations,System.String,System.String,System.Int32,System.String[]@,System.String[]@)">
      <summary>Retrieves the list of public member names found in the given class.</summary>
      <param name="assemblyLocationParam">Specifies whether the assembly is located in a file or in the Global Assembly Cache (GAC).</param>
      <param name="assemblyPathParam">Specifies the pathname, if the assembly is located in a file. The parameter passes the strong name if the assembly is located in the GAC.</param>
      <param name="classTypeNameParam">Specifies the fully specified type name for the class, including namespaces.</param>
      <param name="options">Specifies one or more DotNetAdapterGetMemberNamesOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <param name="signatures">Returns an array that contains the full signature for each member found in the specified class. This array is parallel to the displayNames array.</param>
      <param name="displayNames">Returns an array that contains the display name for each member found in the specified class. This array is parallel to the signatures array.
Display names may be slightly different than the member signatures. For example, static members have the <c>static</c> suffix at the end of the display name.</param>
      <seealso cref="DotNetAdapter.GetClassNames" />
      <seealso cref="DotNetAdapterGetMemberNamesOptions" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetAdapter.NewModule">
      <summary>Creates and returns a new DotNetModule object you can call directly without using a step, sequence, or execution.</summary>
      <seealso cref="DotNetModule" />
      <seealso cref="DotNetModule.Execute" />
      <seealso cref="DotNetModule.NewModuleArguments" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule">
      <summary>Use objects from the ActiveXModule class to specify and obtain ActiveX/COM Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to an ActiveXModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the Module class, use the ActiveXModule.AsModule method to obtain an object.
You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.</summary>
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.AsModule">
      <summary>Returns the underlying module that represents the ActiveXModule object.</summary>
      <remarks>Use the module to access properties and methods common to all modules.</remarks>
      <seealso cref="Module" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.ActiveXReferenceExpr">
      <summary>Specifies a variable or property using the ActiveX Reference type.</summary>
      <remarks>When an ActiveX module creates an object, it assigns the object reference to the variable or property, if specified. Otherwise, the module automatically releases the object reference after executing. If the module does not create an object, but calls a method or accesses a property instead, the ActiveXReferenceExpr property must contain the value of a valid ActiveX reference that refers to the object on which to call the method or access the property.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.ServerId">
      <summary>Specifies the name of the ActiveX Automation server the module uses.</summary>
      <remarks>The server must be registered with Microsoft Windows before the module executes, unless the ActiveXModule.CreateOption property specifies <c>ActiveXCreate_FromFile</c> and the ActiveXModule.FilePath property specifies a path from which to load the object.</remarks>
      <returns>The name of the server.</returns>
      <seealso cref="ActiveXModule.CreateOption" />
      <seealso cref="ActiveXModule.FilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.CoClassName">
      <summary>Specifies the name of the server class the module uses when it creates an object of the class.</summary>
      <remarks>An ActiveX module can access two groups of server objects. The first group includes all top-level objects the module can create. The second group includes all other objects the server creates as a result of an invocation of a method or a property call. Because objects in this second group do not have a class name, ensure the CoClassName remains empty when specifying a module that accesses them. For either group of objects, ensure the ActiveXModule.InterfaceName property contains the name of the interface with which the module accesses the object.</remarks>
      <returns>The name of the class object.</returns>
      <seealso cref="ActiveXModule.InterfaceName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.InterfaceName">
      <summary>Specifies the name of the interface the module uses when it invokes a server object. </summary>
      <remarks>An ActiveX module can access two groups of server objects. The first group includes all top-level objects the module can create. The second group includes all other objects the server creates as a result of an invocation of a method or a property call. Because objects in this second group do not have a class name, ensure the ActiveXModule.CoClassName property remains empty when specifying a module that accesses them. For either group of objects, ensure this property contains the name of the interface with which the module accesses the object.</remarks>
      <returns>The name of the interface.</returns>
      <seealso cref="ActiveXModule.CoClassName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.CreateOption">
      <summary>Specifies how a module creates a new instance of the specified object class when it executes.</summary>
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.UseStepLoadOptions">
      <summary>Controls the lifetime of an object that the module creates. If this property is <c>False</c>, the module creates the object when it begins executing. The module then releases its internal reference to the object when it completes executing. If this property is <c>True</c>, the module creates the object when the step loads according to the Step.ModuleLoadOption property and then holds an internal reference to the object until the step unloads according to the Step.ModuleUnloadOption property.</summary>
      <seealso cref="&quot;Step.ModuleLoadOption&quot;Step_ModuleLoadOption_P.htm" />
      <seealso cref="&quot;Step.ModuleUnloadOption&quot;Step_ModuleUnloadOption_P.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.RemoteHost">
      <summary>Specifies a remote system on which to create the object. Set the ActiveXModule.SpecifyHostByExpression property to <c>True</c> if the value of <c>RemoteHost</c> contains an expression. Otherwise, set the <c>ActiveXModule.SpecifyHostByExpression</c> property to <c>False</c> to indicate that this property contains a literal value.</summary>
      <remarks>The module ignores this property when the ActiveXModule.CreateOption property specifies <c>ActiveXCreate_AttachToActive</c> or <c>ActiveXCreate_DoNotCreate</c>.
<para>Note: Leave this property empty to create the object on a local computer.</para></remarks>
      <returns>Specifies the name of the remote system.</returns>
      <seealso cref="ActiveXModule.CreateOption" />
      <seealso cref="ActiveXModule.SpecifyHostByExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.SpecifyHostByExpression">
      <summary>Specifies if the ActiveXModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host. Otherwise, the <c>ActiveXModule.RemoteHost</c> property contains a literal value.</summary>
      <remarks>The module ignores this property if RemoteHost is blank.</remarks>
      <seealso cref="ActiveXModule.RemoteHost" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.FilePath">
      <summary>When the ActiveXModule.CreateOption property specifies <c>ActiveXCreate_FromFile</c>, this property specifies the path of the file from which the module loads the object and obtains a reference.</summary>
      <remarks>You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths. 
If a server application is already running, the module might launch another copy of the application. The server application determines when to launch multiple copies of itself.</remarks>
      <returns>The path of the file from which to load the object.</returns>
      <seealso cref="ActiveXModule.CreateOption" />
      <seealso cref="&quot;Search Directory Paths&quot;javascript:TSFundLink('/InfoTopics/Module_Adapters_Search_Paths.html')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.MemberType">
      <summary>Specifies whether the module calls a method or accesses a property.</summary>
      <seealso cref="ActiveXModule.MemberName" />
      <seealso cref="ActiveXModule.Parameters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.MemberName">
      <summary>Specifies the name of the class method to invoke or the class property to access.</summary>
      <returns>The name of the method or property.</returns>
      <seealso cref="ActiveXModule.MemberType" />
      <seealso cref="ActiveXModule.Parameters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.LoadMemberInfo(System.Boolean)">
      <summary><para>Note: This method is obsolete. Use the Module.LoadPrototype method instead.</para></summary>
      <remarks>Loads information for the parameters of the specified member of the module.
You must set the ActiveXModule.ServerId, ActiveXModule.InterfaceName, ActiveXModule.MemberType, and ActiveXModule.MemberName properties for the module before calling this module to access the ActiveXModule.Parameters property.</remarks>
      <returns>Returns a value that indicates whether the member information of the module was loaded. This method usually returns <c>True</c>.</returns>
      <param name="discardParameterValues">Specifies whether to reset the ActiveXParameter.ValueExpr property of existing parameter values when loading a new prototype.</param>
      <seealso cref="ActiveXModule.InterfaceName" />
      <seealso cref="ActiveXModule.MemberName" />
      <seealso cref="ActiveXModule.MemberType" />
      <seealso cref="ActiveXModule.Parameters" />
      <seealso cref="ActiveXModule.ServerId" />
      <seealso cref="ActiveXParameter.ValueExpr" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.Parameters">
      <summary>Returns the ActiveXParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.</summary>
      <remarks>Call the Module.LoadPrototype method before you access this property.</remarks>
      <returns>Collection of parameters.</returns>
      <seealso cref="ActiveXParameters" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModule.ReloadServer">
      <summary>Call this method to direct the ActiveXModule to update type library information it stores internally.</summary>
      <remarks>The ActiveXModule stores the type library information of the server specified by ActiveXModule.ServerId internally. The ActiveXModule uses this type library information when you access properties and methods of ActiveXModule or Module. For example, when you call Module.LoadPrototype the ActiveXModule uses this type library information to read the prototype of a property or method. The ActiveXModule obtains this type library information the first time you access a property or method that needs it. Use this method to force the ActiveXModule to update the type library information if the type library information might have changed. When you call this method, the ActiveXModule updates the type library information only if the type library has been modified on disk since the last time the ActiveXModule read the type library.</remarks>
      <returns>Returns <c>True</c> if the ActiveXModule updates the type library information.
</returns>
      <seealso cref="ActiveXModule.ServerId" />
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameters">
      <summary>Use objects from the ActiveXParameters class to configure and obtain parameters for a module that uses the ActiveX/COM Adapter. Use the ActiveXModule.Parameters property to obtain the collection of parameters for a module.</summary>
      <seealso cref="ActiveXModule.Parameters" />
      <seealso cref="ActiveXParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameters.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the parameter to retrieve.</param>
      <seealso cref="ActiveXParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameters.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter">
      <summary>Use objects from the ActiveXParameter class to configure and obtain parameter-specific information for an item in the ActiveXParameters collection class.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the ActiveXParameter object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.ValueExpr">
      <summary>Specifies an expression defining the argument to pass as the parameter when calling the member.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.ParameterName">
      <summary>Returns the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.Type">
      <summary>Returns the ActiveX data type of the parameter.</summary>
      <remarks>The standard ActiveX Automation VARTYPE enumeration defines the ActiveX parameter types.</remarks>
      <returns>The data type of the parameter.</returns>
      <seealso cref="ActiveXParameter.DisplayType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.DisplayType">
      <summary>Returns a localized string that describes the ActiveX data type for the parameter.</summary>
      <returns>The display value of the data type of the parameter.</returns>
      <seealso cref="ActiveXParameter.EnumTypeName" />
      <seealso cref="ActiveXParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.Direction">
      <summary>Returns a value that indicates whether the parameter is input, output, or both. Refer to ActiveXParameterDirections for all the possible values.</summary>
      <remarks>For input parameters that have default values, optional input parameters, and output parameters, you can leave the ActiveXParameter.ValueExpr property empty. Otherwise, you must specify the name of a variable, parameter, or property.</remarks>
      <seealso cref="ActiveXParameterDirections" />
      <seealso cref="ActiveXParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.UseDefault">
      <summary>Specifies that the parameter must use the default value when available.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.UserData">
      <summary>Holds a data item you associate with the parameter object.</summary>
      <remarks>Typically, you do not use this property.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.ValidEvaluationTypes">
      <summary>Returns the valid types that this parameter can evaluate to.</summary>
      <remarks>You can pass the value of this property to the validEvaluationTypes parameter of the <c>Expression.ValidateEvaluationType</c> method to determine whether the value of the ActiveXParameter.ValueExpr property contains errors.
If you are using an ExpressionEdit control to display the value of the <c>ActiveXParameter.ValueExpr</c> property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.</remarks>
      <seealso cref="ActiveXParameter.GetEnumValues" />
      <seealso cref="ActiveXParameter.ValueExpr" />
      <seealso cref="EvaluationTypes" />
      <seealso cref="&quot;EvaluationTypes.PropertyValueTypeFlags&quot;EvaluationTypes_PropertyValueTypeFlags_P.htm" />
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.GetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;ExpressionEdit.SetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_SetValidEvaluationTypes_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.EnumTypeName">
      <summary>Returns the name of the enumeration type for a parameter that is an enumeration.</summary>
      <seealso cref="ActiveXParameter.DisplayType" />
      <seealso cref="ActiveXParameter.GetEnumValues" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.GetEnumValues">
      <summary>Returns the enumeration constants for a parameter that is an enumeration.</summary>
      <remarks>The property objects in the array that this method returns have a name and value that corresponds to the name and value of the enumeration constant.
Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the ActiveXParameter.ValueExpr property for errors.

If you are using an ExpressionEdit control to specify the <c>ActiveXParameter.ValueExpr</c> property, pass the return value of this method to ExpressionEdit.SetAdditionalEvaluationConstants to direct the ExpressionEdit control to recognize the enumeration constants.</remarks>
      <returns>Returns an array of property objects where each property object represents an enumeration value.</returns>
      <seealso cref="ActiveXParameter.EnumTypeName" />
      <seealso cref="ActiveXParameter.ValidEvaluationTypes" />
      <seealso cref="ActiveXParameter.ValueExpr" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="&quot;ExpressionEdit.SetAdditionalEvaluationConstants&quot;javascript:UILink('/RefTopics/ExpressionEdit_SetAdditionalEvaluationConstants_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.DefaultValue">
      <summary>Returns a display string that represents the default value defined for the parameter.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.IsOptional">
      <summary>This property is <c>True</c> if the parameter has the COM optional attribute.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.ValueExprIsOptional">
      <summary>Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values, output parameters, and parameters with the COM optional attribute are optional.</summary>
      <seealso cref="ActiveXParameter.Direction" />
      <seealso cref="ActiveXParameter.IsOptional" />
      <seealso cref="ActiveXParameter.ValueExpr" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.ValueExprIsIgnored">
      <summary>Use this property to determine whether the ActiveX Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.</summary>
      <seealso cref="ActiveXParameter.UseDefault" />
      <seealso cref="ActiveXParameter.ValueExpr" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameter.IsParameterMappingInvalid(System.String@)">
      <summary></summary>
      <param name="reasonNotValid"></param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule">
      <summary>Use objects from the CommonCModule class to specify and obtain common information for the LabWindows/CVI and C/C++ DLL code modules that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a CommonCModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the Module class, use the CommonCModule.AsModule method to obtain an object. To access the properties and methods of a specific module class, query the CommonCModule object for the interface of the module-specific interface you want to acquire.
You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.</summary>
      <seealso cref="CVIModule" />
      <seealso cref="DLLModule" />
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.AsModule">
      <summary>Returns the underlying module object that represents the CommonCModule.</summary>
      <remarks>Use the Module object to access properties and methods common to all modules.</remarks>
      <seealso cref="CVIModule" />
      <seealso cref="DLLModule" />
      <seealso cref="&quot;Module&quot;Module.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.ModulePath">
      <summary>Specifies the pathname of the code module file that contains the function the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.</summary>
      <seealso cref="CommonCModule.FunctionName" />
      <seealso cref="CVIModule.ModuleType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.FunctionName">
      <summary>Specifies the function in the code module the step calls.</summary>
      <seealso cref="CommonCModule.ModulePath" />
      <seealso cref="CVIModule.ModuleType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.LoadPrototype(System.Boolean)">
      <summary><para>Note: This method is obsolete. Use the Module.LoadPrototype method instead.</para></summary>
      <remarks>At any time, you can request the LabWindows/CVI or C/C++ DLL Adapter to query the type library or read the DLL export table for the currently selected function by calling this method. If the module file does not have prototype information, this method returns <c>False</c>. Otherwise, this method returns <c>True</c>.
If the module contains prototype information, all the information is updated in the internal structure of the module configuration every time you call this method.</remarks>
      <returns>Returns a value that indicates whether the prototype was loaded. This method usually returns <c>True</c>.</returns>
      <param name="discardParameterValues">Specifies whether to discard the values assigned to the current parameters once the prototype information is updated.</param>
      <seealso cref="CommonCModule.FunctionName" />
      <seealso cref="CommonCModule.LoadPrototypeFromCodeTemplate" />
      <seealso cref="CommonCModule.ModulePath" />
      <seealso cref="CommonCModule.UpdatePrototypeFromSource" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.SourceFilePath">
      <summary>Specifies the pathname of the source file. If you want to create a new source file, you must enter an absolute pathname. If you are using an existing source file, you can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.</summary>
      <remarks>You can specify the source file to generate the source code for the function, edit the source code, and resolve differences between the parameter list in the source code and the parameter information. You do not have to specify the source file for TestStand to call the step code module.</remarks>
      <seealso cref="CommonCModule.ProjectFilePath" />
      <seealso cref="CommonCModule.WorkspaceFilePath" />
      <seealso cref="&quot;Module.CreateCode&quot;Module_CreateCode_M.htm" />
      <seealso cref="&quot;Module.EditCode&quot;Module_EditCode_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.ProjectFilePath">
      <summary>Specifies the name of the Microsoft Visual Studio or LabWindows/CVI project used to create the code module.</summary>
      <remarks>TestStand uses this property when you create or edit source code for this module using the Module.CreateCode or Module.EditCode methods.</remarks>
      <seealso cref="CommonCModule.ModulePath" />
      <seealso cref="CommonCModule.SourceFilePath" />
      <seealso cref="CommonCModule.WorkspaceFilePath" />
      <seealso cref="&quot;Module.CreateCode&quot;Module_CreateCode_M.htm" />
      <seealso cref="&quot;Module.EditCode&quot;Module_EditCode_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.WorkspaceFilePath">
      <summary>Specifies the pathname of the LabWindows/CVI workspace file or Microsoft Visual Studio solution file used to create source code for this module.</summary>
      <remarks>TestStand uses this property when you create or edit source code for this module using the Module.CreateCode or Module.EditCode methods.  If you do not specify a workspace file for this module, TestStand uses a default workspace.</remarks>
      <seealso cref="CommonCModule.ModulePath" />
      <seealso cref="CommonCModule.ProjectFilePath" />
      <seealso cref="CommonCModule.SourceFilePath" />
      <seealso cref="&quot;Module.CreateCode&quot;Module_CreateCode_M.htm" />
      <seealso cref="&quot;Module.EditCode&quot;Module_EditCode_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.VerifyPrototypeFromSource">
      <summary>Call this method to check for conflicts between the source code and the currently loaded parameter information. This method does not prompt the user if a conflict exists</summary>
      <returns>Indicates that there are no conflicts.</returns>
      <seealso cref="CommonCModule.UpdatePrototypeFromSource" />
      <seealso cref="CommonCModule.VerifyPrototype" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.UpdatePrototypeFromSource(System.Boolean)">
      <summary>Call this method to update the current parameters prototype from the source code.</summary>
      <remarks>If you update the prototype from the source code, TestStand deletes any parameters not present in the source code prototype.</remarks>
      <param name="keepParameterValues">Pass <c>True</c> to keep the parameter values after updating the prototype from the source file.</param>
      <seealso cref="CommonCModule.VerifyPrototype" />
      <seealso cref="CommonCModule.VerifyPrototypeFromSource" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.FunctionCall">
      <summary>Returns the function call using the syntax for calling an expression function.</summary>
      <remarks>Use the CommonCModule.AcceptFunctionCall method to update the function name, parameters, and parameter values for the module using a string with syntax for calling an expression function.</remarks>
      <seealso cref="CommonCModule.AcceptFunctionCall" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.AcceptFunctionCall(NationalInstruments.TestStand.Interop.API.PropertyObject,System.String,System.Boolean,System.Boolean@,System.Boolean@)">
      <summary>This method updates the function name, parameters, and parameter values on the module to match the function call you pass as the funcCall parameter. If the function call you pass modifies the prototype of the function, this method prompts the user to accept the changes to the prototype.</summary>
      <remarks>Use the CommonCModule.FunctionCall property to obtain a string that represents the current function call using syntax for calling an expression function.</remarks>
      <returns>Returns <c>True</c> if this method modifies the module.</returns>
      <param name="evaluationContext">This method uses this object to locate variables the funcCall parameter specifies.</param>
      <param name="funcCall">Specifies a string for the function call that uses the syntax for calling an expression function.</param>
      <param name="allowEditingPrototype">Pass <c>True</c> to allow this method to update the prototype of the currently loaded parameters from the funcCall parameter. Pass <c>False</c> to allow this method to only update the function name and parameter values.</param>
      <param name="prototypeModified">Returns <c>True</c> if this method added, removed, or changed the type of a parameter in the function call.</param>
      <param name="cancelled">Returns <c>True</c> if the user cancels accepting the changes to the prototype.</param>
      <seealso cref="CommonCModule.FunctionCall" />
      <seealso cref="CommonCModule.FunctionName" />
      <seealso cref="CVIModule.Parameters" />
      <seealso cref="DllModule.Parameters" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.CodeTemplateName">
      <summary>Specifies a code template associated with this module.</summary>
      <remarks>The Module.CreateCode and CommonCModule.LoadPrototypeFromCodeTemplate methods use the code template this property specifies. If this property is empty, the <c>Module.CreateCode</c> method does not use a code template and the <c>CommonCModule.LoadPrototypeFromCodeTemplate</c> method does nothing. You can acquire a list of code template names using the collection the StepType.CodeTemplates property returns.</remarks>
      <seealso cref="CommonCModule.LoadPrototypeFromCodeTemplate" />
      <seealso cref="Module.CreateCode" />
      <seealso cref="&quot;StepType.CodeTemplates&quot;StepType_CodeTemplates_P.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.LoadPrototypeFromCodeTemplate">
      <summary>Updates the parameters of the module to match the prototype and parameter values of the code template the  CommonCModule.CodeTemplateName property specifies.</summary>
      <remarks>This method does nothing if the <c>CommonCModule.CodeTemplateName</c> property is empty.
For adapters that use Microsoft Visual Studio, calling this method can result in prompts to the user if any of the following conditions exist:
<para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Always Prompt for Version option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box.</para><para>&#160;&#160;&#160;&#160;* Multiple versions of Visual Studio exist on the computer and you select the Use the Version that Matches the Project File option from the Version of Visual Studio to Use for Create and Edit Code ring control in the Adapter Configuration dialog box, and TestStand cannot match the version of the file.</para></para></remarks>
      <returns>Returns <c>True</c> if this method modifies the step.</returns>
      <seealso cref="&quot;Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_AdapterConfig.htm')" />
      <seealso cref="CommonCModule.CodeTemplateName" />
      <seealso cref="CVIModule.Parameters" />
      <seealso cref="DllModule.Parameters" />
      <seealso cref="Module.LoadPrototype" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCModule.VerifyPrototype(NationalInstruments.TestStand.Interop.AdapterAPI.CommonCVerifyPrototypeResults@)">
      <summary>This method checks if the prototype the source code specifies matches the currently loaded parameters. If they do not match, this method prompts you to modify the module or source code so that the prototypes match.</summary>
      <returns>Returns <c>True</c> if this method modifies the module.</returns>
      <param name="result">Returns a value that specifies the results of this method.</param>
      <seealso cref="CommonCModule.UpdatePrototypeFromSource" />
      <seealso cref="CommonCModule.VerifyPrototypeFromSource" />
      <seealso cref="CommonCVerifyPrototypeResults" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter">
      <summary>Use objects from the CommonCParameter class to configure and obtain common parameter information for a CVIParameter or DllParameter object.
To access the properties and methods of a specific parameter class, query the CommonCParameter object for the interface of the parameter-specific interface you want.</summary>
      <seealso cref="CVIParameter" />
      <seealso cref="DllParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.UnknownInfo">
      <summary>Specifies what part of the parameter information is unknown based on the category and type.</summary>
      <remarks>You can  have unknown information when you load a prototype from a module that does not contain enough information to determine the exact category and type of the specific parameter.</remarks>
      <seealso cref="CommonCParameterUnknownInfoFlags" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.Flags">
      <summary>Specifies certain attributes for the parameter, such as whether TestStand sets the <c>Error.Code</c> property of the step to the return value or parameter value the argument returns. Refer to CommonCParameterFlags for all the possible values.</summary>
      <seealso cref="CommonCParameter.ResultAction" />
      <seealso cref="CommonCParameterFlags" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the adapter.</summary>
      <remarks>Use the PropertyObject to edit, add, or remove custom properties of the adapter.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ParameterName">
      <summary>Returns the symbolic name for the parameter.</summary>
      <seealso cref="CommonCParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ValueExpr">
      <summary>Specifies the argument expression. </summary>
      <remarks>If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where to store the result value.</remarks>
      <seealso cref="CommonCParameter.ParameterName" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.GetDescription">
      <summary>Returns the parameter description.</summary>
      <remarks>This property corresponds to the short description of the parameter type using C++ syntax.</remarks>
      <seealso cref="CommonCParameter.ParameterName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.Pass">
      <summary>Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function. Use the CommonCParameter.PassArrayElementBy property to specify how to pass structure elements of an array parameter.</summary>
      <remarks>This option is not used for string or array parameters.
The <c>CParamPass_ByConstPointer</c> and <c>CParamPass_ByConstReference</c> values are valid only for parameters that have the Category set to one of the C++ classes
The <c>CParamPass_ByReference</c> value is valid only for C/C++ DLL module parameters.</remarks>
      <seealso cref="&quot;C++ classes&quot;javascript:RefLink('/InfoTopics/DB_EditDLLCall_CClassObjParam.htm')" />
      <seealso cref="CommonCParameter.PassArrayElementBy" />
      <seealso cref="CommonCParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ResultAction">
      <summary>Specifies whether TestStand sets the <c>Error.Occurred</c> property of the step to <c>True</c> when the return value or parameter value after the call is greater than zero, less than zero, equal to zero, or not equal to zero.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.StringBufferSize">
      <summary><para>Note: This property is obsolete. Use the CommonCParameter.StringBufferSizeExpr property instead.</para></summary>
      <remarks>Specifies the buffer size for a string parameter. TestStand assigns this value to the <c>CommonCParameter.StringBufferSizeExpr</c> property. When you use this property, TestStand returns the value stored in the <c>CommonCParameter.StringBufferSizeExpr</c> property if the expression is a numeric value; otherwise TestStand throws an exception.</remarks>
      <seealso cref="CommonCParameter.StringBufferSizeExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.StructType">
      <summary>Specifies the name of the type used when the category of a parameter is a C structure argument or a TestStand object.</summary>
      <remarks>If you specify <c>DllParamCategory_CStruct</c> or <c>DllParamCategory_CStructArray</c> for the DllParameter.Category property or  <c>CVIParamCategory_CStruct</c> or <c>CVIParamCategory_CStructArray</c> for the CVIParameter.Category property, you can pass variables and properties you create with named data types to function parameters that accept structures. When you create or edit a data type, specify if the type can be a C structure argument and how the type represents itself in memory when you pass it to a structure parameter.
If you specify <c>DllParamCategory_TSObject</c> for the DllParameter.Category property, you can pass objects from the TestStand ActiveX API to function parameters that accept object references.</remarks>
      <seealso cref="CVIParameter.Category" />
      <seealso cref="CVIParameter.Type" />
      <seealso cref="DllParameter.Category" />
      <seealso cref="DllParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ArrayDimensions">
      <summary>Specifies the number of dimensions for array parameters.</summary>
      <seealso cref="CommonCParameter.GetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.SetArrayDimensionSizeExpr" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.GetArrayDimensionSize(System.Int32)">
      <summary><para>Note: This property is obsolete. Use the CommonCParameter.GetArrayDimensionSizeExpr method instead.</para>
</summary>
      <remarks>Returns the value of the <c>CommonCParameter.GetArrayDimensionSizeExpr</c> method if the expression is a numeric value; otherwise TestStand throws an exception. </remarks>
      <param name="dimension">Specifies the zero-based index corresponding to one of the array dimensions.</param>
      <seealso cref="CommonCParameter.GetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.SetArrayDimensionSize" />
      <seealso cref="CVIParameter.Category" />
      <seealso cref="DllParameter.Category" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.SetArrayDimensionSize(System.Int32,System.Int32)">
      <summary><para>Note: This property is obsolete. Use the CommonCParameter.SetArrayDimensionSizeExpr method instead.</para>
</summary>
      <remarks>Specifies the size of the array corresponding to the zero-based index passed as an input.  TestStand assigns this value to the <c>CommonCParameter.SetArrayDimensionSizeExpr</c> property.</remarks>
      <param name="dimension">Specifies the zero-based index corresponding to one of the array dimensions.</param>
      <param name="arrayDimensionSize">Specifies the dimension size.</param>
      <seealso cref="CommonCParameter.GetArrayDimensionSize" />
      <seealso cref="CommonCParameter.SetArrayDimensionSizeExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.UserData">
      <summary>Holds a data item you associate with the parameter object.</summary>
      <remarks>Typically, you do not use this property.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.GetArrayDimensionSizeExpr(System.Int32)">
      <summary>Returns an expression that determines the size of the array corresponding to the zero-based index passed as input.</summary>
      <param name="dimension">Specifies the zero-based index corresponding to one of the array dimensions.</param>
      <seealso cref="CommonCParameter.SetArrayDimensionSizeExpr" />
      <seealso cref="CVIParameter.Category" />
      <seealso cref="DllParameter.Category" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.SetArrayDimensionSizeExpr(System.Int32,System.String)">
      <summary>Specifies an expression that determines the size of the array corresponding to the zero-based index passed as an input.</summary>
      <param name="dimension">Specifies the zero-based index corresponding to one of the array dimensions.</param>
      <param name="arrayDimensionSizeExpr">Specifies the dimension size.</param>
      <seealso cref="CVIParameter.Category" />
      <seealso cref="DllParameter.Category" />
      <seealso cref=".GetArrayDimensionSizeExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ValidEvaluationTypes">
      <summary>Returns the valid types to which this parameter can evaluate.</summary>
      <remarks>You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the CommonCParameter.ValueExpr property contains errors.
If you are using an ExpressionEdit control to display the value of the <c>CommonCParameter.ValueExpr</c> property, pass the value of this property to the  ExpressionEdit.SetValidEvaluationTypes method.</remarks>
      <seealso cref="CommonCParameter.GetEnumValues" />
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="&quot;EvaluationTypes&quot;EvaluationTypes.htm" />
      <seealso cref="EvaluationTypes.PropertyValueTypeFlags&quot;EvaluationTypes_PropertyValueTypeFlags_P.htm" />
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.GetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;ExpressionEdit.SetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.StringBufferSizeExpr">
      <summary>Specifies an expression that determines the buffer size for a string parameter. When you specify one of the string buffer types as the parameter type, the adapter copies the contents of the string argument and a trailing zero element into a temporary buffer before calling the function. Specify the minimum size of the temporary buffer using this property.</summary>
      <remarks>If the string value is longer than the buffer size you specify, the adapter resizes the temporary buffer so it is large enough to hold the contents of the string argument and the trailing zero element. After the function returns, TestStand copies the value the function writes into the temporary buffer back to the string argument.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.EnumTypeName">
      <summary>Returns the name of the enumeration type for a parameter that is an enumeration.</summary>
      <seealso cref="CommonCParameter.GetEnumValues" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.DisplayValueExpr">
      <summary>Returns the text to display for the CommonCParameter.ValueExpr property. </summary>
      <remarks>The text of this property differs from the text of the <c>CommonCParameter.ValueExpr</c> property when the expression contains an enumeration constant. If you set the <c>CommonCParameter.ValueExpr</c> property to an expression that contains an enumeration constant, this property is set to the expression with the constant, and the <c>CommonCParameter.ValueExpr</c> property is set to an expression that contains the value of the constant.</remarks>
      <seealso cref="CommonCParameter.ValueExpr" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.GetEnumValues">
      <summary>Returns the enumeration constants for a parameter that is an enumeration.</summary>
      <remarks>The property objects in the array this method returns have a name and value that corresponds to the name and value of the enumeration constant.
Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the CommonCParameter.ValueExpr property for errors.

If you are using an ExpressionEdit control to specify the <c>CommonCParameter.ValueExpr</c> property, pass the return value of this method to ExpressionEdit.SetAdditionalEvaluationConstants to direct the ExpressionEdit control to recognize the enumeration constants.</remarks>
      <returns>Returns an array of property objects where each property object represents an enumeration value.</returns>
      <seealso cref="CommonCParameter.EnumTypeName" />
      <seealso cref="CommonCParameter.ValidEvaluationTypes" />
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="&quot;ExpressionEdit.SetAdditionalEvaluationConstants&quot;javascript:UILink('/RefTopics/ExpressionEdit_SetAdditionalEvaluationConstants_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.PassArrayElementBy">
      <summary>Specifies how to pass structures in arrays. Valid values are <c>CParamPass_ByPointer</c> and <c>CParamPass_ByVal</c>.</summary>
      <seealso cref="CommonCParameter.Pass" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ValueExprIsIgnored">
      <summary>Use this property to determine whether the adapter ignores the argument value expression when it calls the module. The LabWindows/CVI and C/C++ DLL Adapters ignore the value expression for the parameter that corresponds to the return value of a void function.</summary>
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="CommonCParameter.ValueExprIsOptional" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ValueExprIsOptional">
      <summary>Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional.</summary>
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="CommonCParameter.ValueExprIsIgnored" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameter.ParamIsCompatible(System.String,System.String@)">
      <summary></summary>
      <param name="enumTypeName"></param>
      <param name="reasonNotCompatible"></param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModule">
      <summary>Use objects from the CVIModule class to specify and obtain  LabWindows/CVI Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a CVIModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the CommonCModule class, use the CVIModule.AsCommonCModule method to obtain an object.
You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.</summary>
      <seealso cref="CommonCModule" />
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModule.AsCommonCModule">
      <summary>Returns the underlying CommonCModule that represents the CVIModule.</summary>
      <remarks>Use the CommonCModule object to access properties and methods common to all modules derived from this class.</remarks>
      <seealso cref="CommonCModule" />
      <seealso cref="&quot;Module&quot;Module.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModule.ModuleType">
      <summary>Specifies the type of code module the step calls.</summary>
      <remarks>The LabWindows/CVI Adapter supports calling functions in DLL files.</remarks>
      <seealso cref="CommonCModule.FunctionName" />
      <seealso cref="CommonCModule.ModulePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModule.AlwaysRunInProcess">
      <summary>If the value of this property is <c>True</c>, the step always runs in-process even when the LabWindows/CVI Adapter is configured to run out-of-process.</summary>
      <seealso cref="CVIAdapter.ExecuteStepsInExternalInstance" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModule.Parameters">
      <summary>Returns the CVIParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.</summary>
      <remarks>If you need to add or modify a parameter, you must first obtain the parameters collection.</remarks>
      <seealso cref="CVIParameters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModule.Execute(NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.AdapterAPI.CVIArguments)">
      <summary>Use this method to call a LabWindows/CVI module function directly without using a step, sequence, or execution.</summary>
      <remarks>When you call a LabWindows/CVI module function using this method you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a CVIArguments collection.
To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam to use to evaluate the CommonCParameter.ValueExpr expressions.
To pass specific argument values, use the CVIParameters.NewArguments method to create a collection of CVIArgument objects and set the CVIArgument.Value property on each item in the collection.</remarks>
      <param name="sequenceContextParam">Specifies the <c>SequenceContext</c> object that this method uses to evaluate each of the <c>CommonCParameter.ValueExpr</c> expressions in the module parameters. Pass <c>NULL</c> for this parameter if you pass a <c>CVIArguments</c> collection to the argumentsParam parameter.</param>
      <param name="argumentsParam">Specifies the argument collection that contains the argument values to pass to the function. Pass <c>NULL</c> for this parameter to pass the values obtained from evaluating each of the <c>CommonCParameter.ValueExpr</c> expressions in the module parameters.</param>
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="CVIArgument" />
      <seealso cref="CVIArgument.Value" />
      <seealso cref="CVIArguments" />
      <seealso cref="CVIParameters.NewArguments" />
      <seealso cref="&quot;SequenceContext&quot;SequenceContext.htm" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameters">
      <summary>Use objects from the CVIParameters class to configure and obtain parameters for a module that uses the LabWindows/CVI Adapter. Use the CVIModule.Parameters property to obtain the collection of parameters for a module.</summary>
      <seealso cref="CVIModule.Parameters" />
      <seealso cref="CVIParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameters.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the parameter to retrieve.</param>
      <seealso cref="CVIParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameters.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameters.New(System.Int32,System.String,System.String,NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories,NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions,NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes)">
      <summary>Adds a new parameter to the collection.</summary>
      <param name="index">Specifies the zero-based index of where to insert the parameter.</param>
      <param name="parameterName">Specifies the name assigned to the new parameter.</param>
      <param name="parameterValueExpr">Specifies the argument expression.
If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where to store the result value.</param>
      <param name="parameterCategory">Specifies the parameter category.</param>
      <param name="parameterPass">Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function and sets the CommonCParameter.Pass property.</param>
      <param name="parameterType">Specifies the parameter type.</param>
      <seealso cref="CommonCParameter.Pass" />
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="CommonCParameterPassOptions" />
      <seealso cref="CommonCParameterTypes" />
      <seealso cref="CVIParameterCategories" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameters.Delete(System.Int32)">
      <summary>Removes the parameter located at the specific index.</summary>
      <param name="index">Specifies the zero-based index of the parameter to delete.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameters.Move(System.Int32,System.Int32)">
      <summary>Moves a parameter within the collection.</summary>
      <param name="index">Specifies the zero-based index indicating the current position of the parameter to move.</param>
      <param name="newIndex">Specifies the zero-based index indicating the new position of the parameter.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameters.NewArguments">
      <summary>Creates and returns a new CVIArguments collection. Use this collection to pass argument values to a LabWindows/CVI module function using the CVIModule.Execute method.</summary>
      <remarks>The new collection contains the same number of items as the CVIParameters collection. To pass an argument value to a function parameter, set the CVIArgument.Value property on the item in the <c>CVIArguments</c> collection that has the same index as the parameter in the <c>CVIParameters</c> collection.</remarks>
      <seealso cref="CVIArgument.Value" />
      <seealso cref="CVIArguments" />
      <seealso cref="CVIModule.Execute" />
      <seealso cref="CVIParameters" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameter">
      <summary>Use objects from the CVIParameters class to configure and obtain LabWindows/CVI parameter-specific information for an item in the CVIParameter collection class.
To access the properties and methods of the CommonCParameter class, use the CVIParameter.AsCommonCParameter method to obtain an object.</summary>
      <seealso cref="CommonCParameter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameter.AsCommonCParameter">
      <summary>Returns the underlying CommonCParameter that represents the CVIParameter.</summary>
      <remarks>Use the CommonCParameter object to access properties and methods common to all parameters derived from this class.</remarks>
      <seealso cref="CommonCParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameter.Category">
      <summary>Returns the category of the parameter.</summary>
      <seealso cref="CommonCParameter.GetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.SetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.StringBufferSizeExpr" />
      <seealso cref="CommonCParameter.StructType" />
      <seealso cref="CVIParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameter.Type">
      <summary>Specifies the type of parameter.</summary>
      <remarks>The parameter category depends on the parameter type. Before you choose the type, ensure you select the correct category.</remarks>
      <seealso cref="CommonCParameter.StringBufferSizeExpr" />
      <seealso cref="CommonCParameter.StructType" />
      <seealso cref="CommonCParameterTypes" />
      <seealso cref="CVIParameter.Category" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllModule">
      <summary>Use objects from the DllModule class to specify and obtain C/C++ DLL Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a DllModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the CommonCModule class, use the DllModule.AsCommonCModule method to obtain an object.
You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.</summary>
      <seealso cref="CommonCModule" />
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllModule.AsCommonCModule">
      <summary>Returns the underlying CommonCModule object that represents the DllModule.</summary>
      <remarks>Use the CommonCModule object to access properties and methods common to all modules derived from this class.</remarks>
      <seealso cref="CommonCModule" />
      <seealso cref="&quot;Module&quot;Module.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllModule.Parameters">
      <summary>Returns the DllParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.</summary>
      <remarks>If you need to add or modify a parameter, you must first obtain the DllParameters collection.</remarks>
      <seealso cref="DllParameters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllModule.CodeCreationTarget">
      <summary>Specifies where the module creates and edits code.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllModule.Execute(NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.AdapterAPI.DllArguments)">
      <summary>Use this method to call a DLL module function directly without using a step, sequence, or execution.</summary>
      <remarks>When you call a DLL module function using this method you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a DllArguments collection.
To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam to use to evaluate the CommonCParameter.ValueExpr expressions.
To pass specific argument values, use the DllParameters.NewArguments method to create a collection of DllArgument objects and set the DllArgument.Value property on each item in the collection.</remarks>
      <param name="sequenceContextParam">Specifies the <c>SequenceContext</c> object that this method uses to evaluate each of the <c>CommonCParameter.ValueExpr</c> expressions in the module parameters. Pass <c>NULL</c> for this parameter if you pass a <c>DllArguments</c> collection to the argumentsParam parameter.</param>
      <param name="argumentsParam">Specifies the argument collection that contains the argument values to pass to the function. Pass <c>NULL</c> for this parameter to pass the values obtained from evaluating each of the <c>CommonCParameter.ValueExpr</c> expressions in the module parameters.</param>
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="DllArgument.Value" />
      <seealso cref="DllArgument" />
      <seealso cref="DllArguments" />
      <seealso cref="DllParameters.NewArguments" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameters">
      <summary>Use objects from the DllParameters class to configure and obtain parameters for a module that uses the C/C++ DLL Adapter. Use the DllModule.Parameters property to obtain the collection of parameters for a module.</summary>
      <seealso cref="DLLModule.Parameters" />
      <seealso cref="DllParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameters.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the parameter to retrieve.</param>
      <seealso cref="DllParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameters.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameters.New(System.Int32,System.String,System.String,NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories,NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions,NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes)">
      <summary>Adds a new parameter to the collection.</summary>
      <param name="index">Specifies the zero-based index of where to insert the parameter.</param>
      <param name="parameterName">Specifies the name assigned to the new parameter.</param>
      <param name="parameterValueExpr">Specifies the argument expression.
If the parameter is an input, this expression corresponds to the value to pass. If the parameter is an output, this expression specifies where TestStand stores the result value.</param>
      <param name="parameterCategory">Specifies the parameter category.</param>
      <param name="parameterPass">Specifies how to pass the value specified in the argument expression property, CommonCParameter.ValueExpr, to the specific function and sets the CommonCParameter.Pass property.</param>
      <param name="parameterType">Specifies the parameter type.</param>
      <seealso cref="CommonCParameter.Pass" />
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="CommonCParameterPassOptions" />
      <seealso cref="CommonCParameterTypes" />
      <seealso cref="DllParameterCategories" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameters.Delete(System.Int32)">
      <summary>Removes the DllParameter object located at the specified index.</summary>
      <param name="index">Specifies the zero-based index of the parameter to delete.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameters.Move(System.Int32,System.Int32)">
      <summary>Moves a DllParameter object within a collection.</summary>
      <param name="index">Specifies the zero-based index indicating the current position of the parameter to move.</param>
      <param name="newIndex">Specifies the zero-based index indicating the new position of the parameter.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameters.NewArguments">
      <summary>Creates and returns a new DllArguments collection. Use this collection to pass argument values to a DLL module function using the DllModule.Execute method.</summary>
      <remarks>The new collection contains the same number of items as the DllParameters collection.  To pass an argument value to a function parameter, set the DllArgument.Value property on the item in the <c>DllArguments</c> collection that has the same index as the parameter in the <c>DllParameters</c> collection.</remarks>
      <seealso cref="DllArgument.Value" />
      <seealso cref="DllArguments" />
      <seealso cref="DllModule.Execute" />
      <seealso cref="DllParameters" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameter">
      <summary>Use objects from the DllParameter class to configure and obtain C/C++ DLL parameter-specific information for an item in the DllParameters collection class.
To access the properties and methods of the CommonCParameter class, use the DllParameter.AsCommonCParameter method.</summary>
      <seealso cref="CommonCParameter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameter.AsCommonCParameter">
      <summary>Returns the underlying CommonCParameter that represents the DllParameter.</summary>
      <remarks>Use the CommonCParameter object to access properties and methods common to all parameters derived from this class.</remarks>
      <seealso cref="CommonCParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameter.Category">
      <summary>Returns the category of the parameter.</summary>
      <seealso cref="CommonCParameter.GetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.SetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.StringBufferSizeExpr" />
      <seealso cref="CommonCParameter.StructType" />
      <seealso cref="DllParameter.Type" />
      <seealso cref="DllParameterCategories" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameter.Type">
      <summary>Specifies the type of parameter.</summary>
      <remarks>The parameter category depends on the parameter type. Be sure to select the correct category before selecting the type.</remarks>
      <seealso cref="DllParameter.Category" />
      <seealso cref="CommonCParameter.StringBufferSizeExpr" />
      <seealso cref="CommonCParameter.StructType" />
      <seealso cref="CommonCParameterTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameter.TSObjectParameterType">
      <summary>Use the TS Object category to pass TestStand objects to DLL functions that use the Microsoft Visual Studio #import classes. Use the #import statement in Visual Studio to access the TestStand API and to define C++ classes. When you select the TS object category for the parameter, this property specifies the name of the object you pass to the function.</summary>
      <remarks>Ensure that the DLL function does not call the <c>Release</c> COM method on the object passed in.</remarks>
      <seealso cref="DllParameter.Category" />
      <seealso cref="DLLParameterCategories" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameter.ImaginaryPartValueExpr">
      <summary>Specifies the argument expression for the imaginary part of a <c>DllParamCategory_CNiComplex</c> or <c>DllParamCategory_CNiComplexVector</c> parameter.</summary>
      <remarks>Parameters using the <c>DllParamCategory_CNiComplexVector</c> type and the <c>DllParamCategory_CNiComplex</c> type take two argument expressions: one for the real part and one for the imaginary part. The argument expression for the real part is stored in the CommonCParameter.ValueExpr property. The imaginary part argument expression is stored in this property.</remarks>
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="DllParameterCategories" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule">
      <summary>Use objects from the LabVIEWModule class to specify and obtain LabVIEW Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a LabVIEWModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the Module class, use the LabVIEWModule.AsModule method to obtain an object.
You can use the Module.LoadPrototype method to load the prototype for the module the step specifies.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.AsModule">
      <summary>Returns the underlying Module object that represents the LabVIEWModule object.</summary>
      <remarks>Use the Module object to access properties and methods common to all modules.</remarks>
      <seealso cref="Module" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.VIPath">
      <summary>Specifies the path and name of the VI the LabVIEWModule calls. For remote systems, this property specifies which VI the module calls unless the LabVIEWModule.RemoteVIPath property specifies a path and name of a VI.</summary>
      <remarks>You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.</remarks>
      <seealso cref="LabVIEWModule.RemoteVIPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.VICallOptions">
      <summary>Specifies options for calling the VI of the module.</summary>
      <seealso cref="LabVIEWModuleCallOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.RemoteHost">
      <summary>Specifies the remote system on which to run the VI. Leave this property empty if you are not using a remote system.</summary>
      <remarks>If the LabVIEWModule.SpecifyHostByExpression property is <c>True</c>, the value of this property must be in the format of an expression.</remarks>
      <seealso cref="LabVIEWModule.RemoteConnectionTimeout" />
      <seealso cref="LabVIEWModule.RemotePortNumber" />
      <seealso cref="LabVIEWModule.RemoteVIPath" />
      <seealso cref="LabVIEWModule.SpecifyHostByExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.SpecifyHostByExpression">
      <summary>Specifies that the LabVIEWModule.RemoteHost property contains an expression the LabVIEW Adapter evaluates at run time to determine the name of the remote host.</summary>
      <remarks>If RemoteHost is empty, this property is ignored.</remarks>
      <seealso cref="LabVIEWModule.RemoteHost" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.RemoteVIPath">
      <summary>Specifies the path and name of the VI the step calls on the remote system.</summary>
      <remarks>If the path is relative, the remote system interprets the path as relative to the application directory, if applicable. If an absolute or relative path is specified, the VI is loaded into memory on the remote system, if it is not already open. If a VI of the same name is already in memory, that VI is used regardless of whether the path is the same as the path specified.
If a path is not specified for this property, the VI specified in the  LabVIEWModule.VIPath property downloads to the remote system if it is not already in memory and if the remote system is running LabVIEW Real-Time Module.
If the step uses a remote project path, the LabVIEWModule.RemoteVIPath property specifies the URL of the VI within the defined LabVIEW project. If the LabVIEWModule.RemoteHost property is empty, this property is ignored.</remarks>
      <seealso cref="LabVIEWModule.RemoteConnectionTimeout" />
      <seealso cref="LabVIEWModule.RemoteHost" />
      <seealso cref="LabVIEWModule.RemotePortNumber" />
      <seealso cref="LabVIEWModule.VIPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.RemotePortNumber">
      <summary>Specifies the port number to use to connect to the remote system.</summary>
      <remarks>If the LabVIEWModule.RemoteHost property is empty, this property is ignored.</remarks>
      <seealso cref="LabVIEWModule.RemoteConnectionTimeout" />
      <seealso cref="LabVIEWModule.RemoteHost" />
      <seealso cref="LabVIEWModule.RemoteVIPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.RemoteConnectionTimeout">
      <summary>Specifies the time to wait for a connection before timing out, in milliseconds.</summary>
      <remarks>If the LabVIEWModule.RemoteHost property is empty, this property is ignored.</remarks>
      <seealso cref="LabVIEWModule.RemoteHost" />
      <seealso cref="LabVIEWModule.RemotePortNumber" />
      <seealso cref="LabVIEWModule.RemoteVIPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.VIDescription">
      <summary>Returns the description of the VI.</summary>
      <remarks>If no description exists for the VI, this property returns an empty string.
The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.</remarks>
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.LoadPrototype(System.Boolean)">
      <summary><para>Note: This method is obsolete. Use the Module.LoadPrototype method instead.</para></summary>
      <remarks>Loads parameter information from the VI of the module.
You must set the LabVIEWModule.VIPath property of the module before calling this method. You must call this method before accessing the LabVIEWModule.Parameters property of the module.</remarks>
      <returns>Returns a value that indicates whether the prototype of the VI was loaded. This method usually returns <c>True</c>.</returns>
      <param name="discardParameterValues">Specifies whether to reset the LabVIEWParameter.ValueExpr property of the existing parameter values when loading a new prototype.</param>
      <seealso cref="LabVIEWModule.Parameters" />
      <seealso cref="LabVIEWModule.VIPath" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.Parameters">
      <summary>Returns the LabVIEWParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.</summary>
      <remarks>Call the Module.LoadPrototype method before accessing this property.</remarks>
      <returns>The collection of parameters.</returns>
      <seealso cref="LabVIEWParameters" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.VIType">
      <summary>Specifies the type of VI the module is calling.</summary>
      <remarks>If you set LabVIEWVITypes to LVVIType_Express, you need to call ImportVI to import the Express VI you want to call.</remarks>
      <seealso cref="LabVIEWModule.ImportVI" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ExportVI(System.String@,System.Int32)">
      <summary>Exports the embedded VI of the module to a file. Use this function to generate a wrapper VI for a step that you configured to use an Express VI or a LabVIEW Property Node call.</summary>
      <remarks>To import a VI, call the LabVIEWModule.ImportVI method.</remarks>
      <param name="pathString">Specifies an existing directory path with a trailing slash or an empty string. This method returns the full path of the exported VI. The VI filename is generated using the ID of the parent step of the module. If an existing directory path is passed, the VI is exported to the given directory. If an empty string is passed, then the VI is exported to a temporary file. The temporary file is deleted when the TestStand Engine shuts down.</param>
      <param name="options">Reserved for future use. Pass <c>0</c>.</param>
      <seealso cref="LabVIEWModule.ImportVI" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ImportVI(System.String,NationalInstruments.TestStand.Interop.AdapterAPI.ImportVITypes,System.Int32)">
      <summary>Imports a VI from a file into the module. Use this function to configure a LabVIEW step to call an Express VI from a template or from a wrapper VI generated by a previous call to the LabVIEWModule.ExportVI method. You can also use this function to configure a LabVIEW step to call a LabVIEW Property Node wrapper VI generated by a previous call to the <c>LabVIEWModule.ExportVI</c> method.</summary>
      <remarks>To export the VI, call the <c>LabVIEWModule.ExportVI</c> method.</remarks>
      <param name="pathString">Specifies the pathname of the file to import into the module. Pass an empty path to remove an imported VI from the module.</param>
      <param name="type">Specifies the type of VI to import.</param>
      <param name="options">Specifies one or more ImportVIOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <seealso cref="ImportVIOptions" />
      <seealso cref="ImportVITypes" />
      <seealso cref="LabVIEWModule.ExportVI" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ExpressVIName">
      <summary>Returns the name of the Express VI the module is calling.</summary>
      <remarks>If the VI type of the module is Standard, this property returns an empty string.
The LabVIEW Adapter persists this property value when you specify an Express VI as the code module for a step.  For an unspecified step, you must call the LabVIEWModule.ImportVI method before retrieving this property.</remarks>
      <seealso cref="LabVIEWModule.ImportVI" />
      <seealso cref="LabVIEWModule.VIType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.VIAttached">
      <summary>Returns a value that indicates whether the module contains an embedded VI.</summary>
      <remarks>You can embed a VI by calling the LabVIEWModule.ImportVI method.</remarks>
      <seealso cref="LabVIEWModule.ExportVI" />
      <seealso cref="LabVIEWModule.ImportVI" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.HelpPicture">
      <summary>Returns the context help picture of the VI that the module calls.</summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.</remarks>
      <seealso cref="LabVIEWModule.HelpContext" />
      <seealso cref="LabVIEWModule.HelpPictureRects" />
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.HelpPictureRects">
      <summary>Returns the coordinates to the rectangles of each label and terminal in the context help picture of the VI the module calls.</summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.</remarks>
      <returns>Returns a PropertyObject array where each element of the array is a PropertyObject that represents a wired terminal on the VI connector pane. The order of the terminals corresponds to the order of the parameters the LabVIEWModule.Parameters property returns. Each element of the array contains two properties, LabelRect and TerminalRect. Each property contains the following four subproperties: Top, Bottom, Left, and Right that represent the absolute coordinate values of the rectangle for the label or the terminal.</returns>
      <seealso cref="LabVIEWModule.HelpPicture" />
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="LabVIEWModule.Parameters" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ConvertExpressVIToStandardVI(System.String)">
      <summary>Converts an Express VI to a standard VI by detaching the Express VI from the module, creating a standard VI on disk that calls the Express VI, and reconfigures the module to call the new VI.</summary>
      <remarks>This method overwrites an existing VI file without prompting.</remarks>
      <returns>Returns a value that indicates whether TestStand successfully converted the Express VI to a standard VI.</returns>
      <param name="newVIPath">Specifies a string containing the absolute pathname of the new VI to create.</param>
      <seealso cref="LabVIEWModule.VIAttached" />
      <seealso cref="LabVIEWModule.VIPath" />
      <seealso cref="LabVIEWModule.VIType" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.LoadVIInfo">
      <summary>Loads information about the VI that the module calls, including default values, enumeration values, the VI help file information, and the VI context help picture.</summary>
      <returns>Returns a value that indicates whether the prototype of the VI specified in the step matches the prototype of the VI on disk.</returns>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.HelpFilePath">
      <summary>Returns the absolute path to the help file of the VI the module calls.</summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.</remarks>
      <seealso cref="LabVIEWModule.HelpContext" />
      <seealso cref="LabVIEWModule.HelpPicture" />
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.HelpContext">
      <summary>Returns the tag for the help topic of the VI the module calls.</summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.</remarks>
      <seealso cref="LabVIEWModule.HelpFilePath" />
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.GetProjectUrlPathsForVIs(NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWProjectPathTypes,System.String[]@)">
      <summary>Obtains a list of URL paths for the VIs in the LabVIEW project you select. If TestStand cannot find the LabVIEW project, this list is empty.</summary>
      <param name="pathToUse">Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.</param>
      <param name="items">Returns the list of URL paths for the VIs in the LabVIEW project you select. </param>
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="LabVIEWModule.RemoteProjectPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.FindVIUrlUsingVIPath(NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWProjectPathTypes,System.String@)">
      <summary>Obtains the VI URL by finding an absolute VI path match in the LabVIEW project you select. If TestStand cannot find a match, the viUrl parameter is empty.</summary>
      <returns>Returns a value that indicates whether TestStand successfully found a URL for the VI.</returns>
      <param name="pathToUse">Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.</param>
      <param name="viUrl">Returns the VI URL path in the LabVIEW project you select.</param>
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="LabVIEWModule.RemoteProjectPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.NodeLibraryName">
      <summary>Specifies the LabVIEW I/O Library Name when calling a LabVIEW Property Node.</summary>
      <seealso cref="LabVIEWModule.NodeClassDataName" />
      <seealso cref="LabVIEWModule.NodeLibraryGenericTypeName" />
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.NodeLibraryGenericTypeName">
      <summary>Specifies the LabVIEW I/O Library Generic Type Name when calling a LabVIEW Property Node.</summary>
      <seealso cref="LabVIEWModule.NodeClassDataName" />
      <seealso cref="LabVIEWModule.NodeLibraryName" />
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.Execute(NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArguments)">
      <summary>Use this method to call a LabVIEW VI directly without using a step, sequence, or Execution.</summary>
      <remarks>When you call a LabVIEW module using this method you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a LabVIEWArguments collection.
To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam to use to evaluate the LabVIEWParameter.ValueExpr expressions. 
To pass specific argument values, use the LabVIEWParameters.NewArguments method to create a collection of LabVIEWArgument objects and set the LabVIEWArgument.Value property on each item in the collection and on each item in contained collections like the LabVIEWArgument.Elements collection.</remarks>
      <param name="sequenceContextParam">Specifies the <c>SequenceContext</c> object that this method uses to evaluate each of the <c>LabVIEWParameter.ValueExpr</c> expressions in the module parameters. Pass <c>NULL</c> for this parameter if you pass a <c>LabVIEWArguments</c> collection to the argumentsParam parameter.</param>
      <param name="argumentsParam">Specifies the argument collection that contains the argument values to pass to the VI. Pass <c>NULL</c> for this parameter to pass the values obtained from evaluating each of the LabVIEWParameter.ValueExpr expressions in the module parameters.</param>
      <seealso cref="LabVIEWArgument" />
      <seealso cref="LabVIEWArgument.Elements" />
      <seealso cref="LabVIEWArgument.Value" />
      <seealso cref="LabVIEWArguments" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
      <seealso cref="LabVIEWParameters.NewArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ProjectPath">
      <summary>Specifies the path and name of the LabVIEW project the <c>LabVIEWModule</c> calls.</summary>
      <remarks>You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths.</remarks>
      <seealso cref="LabVIEWModule.RemoteProjectPath" />
      <seealso cref="LabVIEWModule.VIPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.RemoteProjectPath">
      <summary>Specifies the path and name of the LabVIEW project the step calls on the remote system. Use the LabVIEWModule.RemoteVIPath property to specify the URL of the VI to call within the defined LabVIEW project.</summary>
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="LabVIEWModule.RemoteConnectionTimeout" />
      <seealso cref="LabVIEWModule.RemoteHost" />
      <seealso cref="LabVIEWModule.RemotePortNumber" />
      <seealso cref="LabVIEWModule.RemoteVIPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.CreateProject">
      <summary>Launches LabVIEW to create the LabVIEW project associated with this module.</summary>
      <seealso cref="LabVIEWModule.EditProject" />
      <seealso cref="LabVIEWModule.ProjectPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.EditProject">
      <summary>Launches LabVIEW to edit the LabVIEW project associated with this module.</summary>
      <seealso cref="LabVIEWModule.CreateProject" />
      <seealso cref="LabVIEWModule.ProjectPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.DisplaySelectVIFromProjectDialog(NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWProjectPathTypes)">
      <summary>Launches a dialog box with VIs from the LabVIEW project to select. Returns <c>True</c> if the step was updated.</summary>
      <param name="pathToUse">Pass LVProjectPathType_Remote to use the value of the LabVIEWModule.RemoteProjectPath property. Pass LVProjectPathType_Local to use the value of the LabVIEWModule.ProjectPath property.</param>
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="LabVIEWModule.RemoteProjectPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.IsProjectValid(System.String@)">
      <summary>Returns <c>True</c> if the LabVIEW project associated with this module has a valid configuration.</summary>
      <param name="description">Returns a string with the error description when the method returns <c>False</c>.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.GetVIAbsolutePath(System.String@)">
      <summary>Obtains the absolute path of the VI. If the module uses a LabVIEW project path, TestStand uses the URL the LabVIEWModule.VIPath property defines in conjunction with the LabVIEW project to determine the absolute path of the VI.</summary>
      <returns>Returns <c>True</c> if TestStand finds the file.</returns>
      <param name="viAbsolutePath">Returns the absolute path of the VI. If TestStand does not find the VI, this parameter returns an empty string.</param>
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="LabVIEWModule.VIPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.NodeClassDataName">
      <summary>Specifies the LabVIEW I/O Library Class Data Name when calling a LabVIEW Property Node.</summary>
      <seealso cref="LabVIEWModule.NodeLibraryGenericTypeName" />
      <seealso cref="LabVIEWModule.NodeLibraryName" />
      <seealso cref="LabVIEWModule.NodeProperties" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.NodeUsesDataValueReference">
      <summary>Indicates that the step accesses a LabVIEW class indirectly through a Data Reference Value (DVR) rather than directly by using an object reference.</summary>
      <remarks>This property is valid only when you build a LabVIEW Property Node for a LabVIEW Class.</remarks>
      <seealso cref="LabVIEWModule.NodeClassDataName" />
      <seealso cref="LabVIEWModule.NodeLibraryName" />
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ConfiguredWithOldChecksum">
      <summary></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.Namespace">
      <summary>Returns the LabVIEW namespace of the VI. The namespace of the VI is the qualified name of the owning LabVIEW project library.</summary>
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="LabVIEWModule.VIPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.LabVIEWVersionThatWillBeUsedToRunVI">
      <summary></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.TDChecksum">
      <summary></summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.CallType">
      <summary>Specifies the type of call the code module executes.</summary>
      <remarks>You must also set the appropriate properties for the type of call you want to make. For example, for a class member call, you must set the LabVIEWModule.ClassPath and LabVIEWModule.CallName properties. You might also need to set the LabVIEWModule.ProjectPath property depending on the configuration of the code module.</remarks>
      <seealso cref="LabVIEWModule.CallName" />
      <seealso cref="LabVIEWModule.ClassPath" />
      <seealso cref="LabVIEWModule.ProjectPath" />
      <seealso cref="&#xD;&#xA;&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ClassPath">
      <summary>Specifies the path and name of the LabVIEW class the LabVIEWModule object calls.</summary>
      <remarks>You can specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths. </remarks>
      <seealso cref="LabVIEWModule" />
      <seealso cref="LabVIEWModule.CallName" />
      <seealso cref="&quot;Search Directory Paths&quot;javascript:TSFundLink('/InfoTopics/Module_Adapters_Search_Paths.html')" />
      <seealso cref="LabVIEWModule.EditClass" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.CallName">
      <summary>Returns the name of the LabVIEW class member VI the code module calls.</summary>
      <seealso cref="LabVIEWModule.ClassPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.DisplaySelectClassFromProjectDialog(System.Int32)">
      <summary>Launches the Select a Class from LabVIEW Project dialog box, in which you can select a LabVIEW class to call from the LabVIEW project. Returns <c>True</c> if the step was updated.</summary>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="LabVIEWModule.ClassPath" />
      <seealso cref="&quot;Select a Class from LabVIEW Project dialog box&quot;javascript:RefLink('/InfoTopics/DB_Select_Class_Proj.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.GetClassAbsolutePath(System.String@)">
      <summary>Obtains the absolute path of the LabVIEW class. If the code module uses a LabVIEW project path, TestStand uses the URL the LabVIEWModule.ClassPath property defines and the LabVIEW project to determine the absolute path of the LabVIEW class.</summary>
      <returns>Returns <c>True</c> if TestStand finds the file.</returns>
      <param name="classAbsolutePath">Returns the absolute path of the LabVIEW class. If TestStand does not find the class, this parameter returns an empty string.</param>
      <seealso cref="LabVIEWModule.ClassPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.FindClassUrlUsingClassPath(System.String@)">
      <summary>Obtains the LabVIEW class URL by finding an absolute class path match in the LabVIEW project you select. If TestStand cannot find a match, the classUrl parameter is empty.</summary>
      <returns>Returns <c>True</c> if TestStand successfully finds a URL for the LabVIEW class.</returns>
      <param name="classUrl">Returns the LabVIEW class URL path in the LabVIEW project you select.</param>
      <seealso cref="LabVIEWModule.ClassPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.GetProjectUrlPathsForClasses">
      <summary>Obtains a list of URL paths for the LabVIEW classes in the LabVIEW project you select. If TestStand cannot find the LabVIEW project, this list is empty.</summary>
      <seealso cref="LabVIEWModule.ClassPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.DisplaySelectClassMemberFromProjectDialog(System.Int32)">
      <summary>Launches the Select a Class Member from LabVIEW Project dialog box, in which you can select a LabVIEW class member VI to call from the LabVIEW project. Returns <c>True</c> if the step was updated.</summary>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="LabVIEWModule.ClassPath" />
      <seealso cref="&quot;Select a Class Member from LabVIEW Project dialog box&quot;javascript:RefLink('/InfoTopics/DB_Select_Class_Member_From_LV_Project.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.DisplaySelectMemberFromClassDialog(System.Int32)">
      <summary>Launches the Select a Class Member from LabVIEW Class dialog box, in which you can select a LabVIEW class member VI to call from the LabVIEW class. Returns <c>True</c> if the step was updated.</summary>
      <param name="reserved">Reserved for future use.</param>
      <seealso cref="LabVIEWModule.ClassPath" />
      <seealso cref="&quot;Select a Class Member from LabVIEW Class dialog box&quot;javascript:RefLink('/InfoTopics/DB_Select_Class_Member_LV_Class.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.DisplayParameterMappingDialog(System.Int32)">
      <summary>Launches the Parameter Name/Mapping dialog box to configure parameter mapping settings for a LabVIEW step type. Returns <c>True</c> if the step was updated.</summary>
      <param name="commonDialogOptions">Pass the CommonDlgOption_ReadOnly constant to display the Parameter Name/Mapping dialog box in read-only mode when the step type cannot be changed.</param>
      <seealso cref="LabVIEWModule" />
      <seealso cref="&quot;Parameter Name/Mapping dialog box&quot;javascript:RefLink('/InfoTopics/DB_ParamName_Map.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.NodeIgnoresInternalErrors">
      <summary>Indicates that a LabVIEW Property Node should continue to process any remaining properties in the node when it encounters an error while accessing a property.</summary>
      <seealso cref="LabVIEWModule.NodeProperties" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.NodeProperties">
      <summary>Contains the properties to use in a step configured to call a LabVIEW Property Node.</summary>
      <seealso cref="LabVIEWModule.NodeClassDataName" />
      <seealso cref="LabVIEWModule.NodeIgnoresInternalErrors" />
      <seealso cref="LabVIEWModule.NodeLibraryGenericTypeName" />
      <seealso cref="LabVIEWModule.NodeLibraryName" />
      <seealso cref="LabVIEWNodeProperty.LongName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.NodeOperationMode">
      <summary>Indicates the mode of operation of the Configure Property Node dialog box for LabVIEW property calls.</summary>
      <seealso cref="&quot;Configure Property Node dialog box&quot;javascript:RefLink('/InfoTopics/DB_Prop_Node_Config.htm')" />
      <seealso cref="LabVIEWModule.NodeClassDataName" />
      <seealso cref="LabVIEWModule.NodeIgnoresInternalErrors" />
      <seealso cref="LabVIEWModule.NodeLibraryGenericTypeName" />
      <seealso cref="LabVIEWModule.NodeLibraryName" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.EditClass">
      <summary>Launches LabVIEW and opens the LabVIEW class associated with the code module.</summary>
      <seealso cref="LabVIEWModule.ClassPath" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModule.ConvertToStandardVI(System.String,System.Int32)">
      <summary>Converts a LabVIEW step configured with an embedded VI to a standard VI call by detaching the embedded VI from the code module, creating a standard VI on disk that contains the previously embedded VI, and reconfiguring the step to call the new VI in a standard VI call.</summary>
      <param name="newVIPath">Specifies the file path for the new VI to create on disk.</param>
      <param name="options">Reserved for future use.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameters">
      <summary>Use objects from the LabVIEWParameters class to configure and obtain parameters for a module that uses the LabVIEW Adapter. Use the LabVIEWModule.Parameters property to obtain the collection of parameters for a module.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWModule.Parameters" />
      <seealso cref="LabVIEWParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameters.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the parameter to retrieve.</param>
      <seealso cref="LabVIEWParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameters.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="LabVIEWParameter" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameters.NewArguments">
      <summary>Creates and returns a new LabVIEWArguments collection. Use this collection to pass argument values to a LabVIEW module using the LabVIEWModule.Execute method.</summary>
      <remarks>The new collection contains the same number of items as the LabVIEWParameters collection. To pass a argument value to a VI parameter, set the LabVIEWArgument.Value property on the item in the <c>LabVIEWArguments</c> collection that has the same index as the parameter in the <c>LabVIEWParameters</c> collection.</remarks>
      <seealso cref="LabVIEWArgument.Value" />
      <seealso cref="LabVIEWArguments" />
      <seealso cref="LabVIEWModule.Execute" />
      <seealso cref="LabVIEWParameters" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter">
      <summary>Use objects from the LabVIEWParameter class to configure and obtain LabVIEWParameter-specific information for an item in the LabVIEWParameters collection class.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWParameters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the LabVIEWParameter object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.UseDefaultValue">
      <summary>Specifies whether to use the default value of the parameter when calling the VI.</summary>
      <remarks>You can use the default value for recommended or optional parameters.</remarks>
      <seealso cref="LabVIEWParameter.PartiallySpecified" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
      <seealso cref="LabVIEWParameter.WireRequirement" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ValueExpr">
      <summary>Specifies an expression to define the argument to pass for the parameter when calling the VI.</summary>
      <remarks>TestStand ignores this parameter if the LabVIEWParameter.UseDefaultValue property is <c>True</c>.
Call the LabVIEWModule.LoadVIInfo method before you get or set this property to ensure that LabVIEW parameters, such as enumeration values and ring controls, are updated with their current definitions.</remarks>
      <seealso cref="LabVIEWParameter.DefaultValue" />
      <seealso cref="LabVIEWParameter.UseDefaultValue" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.Category">
      <summary>Returns the group of data types (number, string, and so on) to which this parameter belongs.</summary>
      <remarks>After obtaining the category of the parameter, you can obtain the data type with the LabVIEWParameter.Type property.
The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.</remarks>
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.Direction">
      <summary>Returns a value that indicates whether the parameter is an input or output parameter.</summary>
      <remarks>The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.</remarks>
      <seealso cref="LabVIEWParameter.WireRequirement" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.Type">
      <summary>Returns the data type of the parameter element, specifically indicating the type of number, string, and so on.</summary>
      <remarks>Obtain the category using the LabVIEWParameter.Category property before obtaining the data type of the parameter.
The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.</remarks>
      <seealso cref="LabVIEWParameter.Category" />
      <seealso cref="LabVIEWParameter.TypeDisplayString" />
      <seealso cref="LabVIEWParameterCategories" />
      <seealso cref="LabVIEWParameterTypes" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.WireRequirement">
      <summary>Indicates whether the parameter is required, recommended, or optional.</summary>
      <remarks>The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call Module.LoadPrototype before retrieving this property.</remarks>
      <seealso cref="LabVIEWParameter.Direction" />
      <seealso cref="LabVIEWParameterWireRequirements" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ParameterName">
      <summary>Returns the name of the parameter in the VI.</summary>
      <remarks>The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
Use the LabVIEWParameter.ParameterCaption property to determine the caption of the parameter. </remarks>
      <seealso cref="LabVIEWParameter.ParameterCaption" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.PassAsBinaryString">
      <summary>Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.</summary>
      <remarks>This property applies only when the LabVIEWParameter.Category property of the parameter is <c>LVParamCategory_String</c> or <c>LVParamCategory_StringArray</c> and the LabVIEWParameter.Type property of the parameter is <c>LVParamType_String</c>.
TestStand handles the string data in different ways depending on the version of LabVIEW you are using. 
When this property is <c>False</c>, the LabVIEW Adapter treats strings as C-style strings with a NUL character to indicate the end of the string. C-strings cannot contain binary data.
Call the PropertyObject.GetValBinary method on the variable that stores the binary string to retrieve the raw data in TestStand when the binary data is compressed.</remarks>
      <seealso cref="LabVIEWParameter.Category" />
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="LabVIEWParameterCategories" />
      <seealso cref="LabVIEWParameterTypes" />
      <seealso cref="&quot;PropertyObject.GetValBinary&quot;PropertyObject_GetValBinary_M.htm" />
      <seealso cref="&quot;String Parameters&quot;javascript:RefLink('/InfoTopics/LabVIEW_String_Params.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.Elements">
      <summary>Returns a collection that accesses the members of a parameter that is a cluster, or accesses the elements of a parameter that is an array of clusters.</summary>
      <seealso cref="LabVIEWParameterElements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.DefaultValue">
      <summary>Returns a display string that represents the default value defined for the parameter.</summary>
      <remarks>Default values apply only to recommended and optional parameters. You must call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before retrieving the default value. Otherwise, TestStand returns an empty string. The values stay in memory until the sequence file closes.</remarks>
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="LabVIEWParameter.UseDefaultValue" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
      <seealso cref="LabVIEWParameter.WireRequirement" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ArrayDimensions">
      <summary>Returns the number of dimensions for array parameters.</summary>
      <seealso cref="LabVIEWParameter.GetArrayIndex" />
      <seealso cref="LabVIEWParameter.GetDefaultArrayDimensionSize" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.GetDefaultArrayDimensionSize(System.Int32)">
      <summary>Returns the default size of the array corresponding to the zero-based index passed as input.</summary>
      <remarks>The default size corresponds to the default size of the array control in the front panel of a VI. Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method.</remarks>
      <param name="dimension">Specifies the zero-based index corresponding to one of the array dimensions.</param>
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="LabVIEWParameter.ArrayDimensions" />
      <seealso cref="LabVIEWParameter.GetArrayIndex" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.GetArrayIndex(System.Int32,System.Int32)">
      <summary>Returns the index of the array element the offset parameter specifies.</summary>
      <returns>An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: <c>[0][1]</c>.</returns>
      <param name="offset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Reserved for future use. Pass <c>0</c>.</param>
      <seealso cref="LabVIEWParameter.ArrayDimensions" />
      <seealso cref="LabVIEWParameter.GetDefaultArrayDimensionSize" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.UserData">
      <summary>Holds a data item you associate with the parameter object.</summary>
      <remarks>Typically, you do not use this property.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.DisplayType">
      <summary>Returns a localized string that describes the LabVIEW data type for the parameter.</summary>
      <remarks>The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before you retrieve this property value.</remarks>
      <returns>The display value of the data type of the parameter.</returns>
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="LabVIEWParameter.WireRequirement" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ArrayElementPrototype">
      <summary>Returns the cluster prototype for the elements of the array.</summary>
      <remarks>This property is valid only for arrays of LabVIEW clusters. Call the LabVIEWParameter.Category property to determine whether the parameter is an array of LabVIEW clusters. The array element prototype is a template from which new elements are copied when the size of the array increases. The array element prototype represents the expected structure of elements of the array. You can also use the array element prototype to create a TestStand custom data type that maps to the LabVIEW cluster.</remarks>
      <seealso cref="LabVIEWParameter.Category" />
      <seealso cref="LabVIEWParameterElement" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.TypeDisplayString">
      <summary>Returns a string that describes the type of the parameter.</summary>
      <seealso cref="LabVIEWParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ValidEvaluationTypes">
      <summary>Returns the valid types to which this parameter can evaluate.</summary>
      <remarks>You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the LabVIEWParameter.ValueExpr property contains errors.
If you are using an ExpressionEdit control to display the value of the <c>LabVIEWParameter.ValueExpr</c> property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.</remarks>
      <seealso cref="EvaluationTypes" />
      <seealso cref="&quot;EvaluationTypes.PropertyValueTypeFlags&quot;EvaluationTypes_PropertyValueTypeFlags_P.htm" />
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.GetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;ExpressionEdit.SetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.GetEnumValues">
      <summary>Returns the enumeration constants for an enumeration parameter or returns the ring control values for a ring control parameter.</summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo method or the Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
<para>Note: TestStand supports ring control values only when you use LabVIEW 2012 and later.</para>
Use the name and value of the property objects in the array this method returns to determine the name and value of the enumeration constants or ring controls.
Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the LabVIEWParameter.ValueExpr property for errors.
If you are using an ExpressionEdit control to display the value of the <c>LabVIEWParameter.ValueExpr</c> property, pass the return value of this method to the ExpressionEdit.SetAdditionalEvaluationConstants method to instruct the ExpressionEdit control to validate enumeration constants.</remarks>
      <returns>Returns an array of property objects where each property object represents an enumeration value or a ring control value.</returns>
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.SetAdditionalEvaluationConstants&quot;javascript:UILink('/RefTopics/ExpressionEdit_SetAdditionalEvaluationConstants_M.htm')" />
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.UpdateClusterMapping(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Updates the expression values for the cluster parameter elements when the parameter specifies an expression value that evaluates to a named data type that enables cluster passing.</summary>
      <remarks>This method is valid only on cluster parameters.</remarks>
      <returns>Returns <c>True</c> if the method updates any expression values for the elements of the cluster parameter.</returns>
      <param name="sequenceContext">Pass the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.</param>
      <seealso cref="&quot;Engine.NewEditContext&quot;Engine_NewEditContext_M.htm" />
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="SequenceContext" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.DisplayCreateCustomDataTypeDialog(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Launches the Create/Update Custom Data Type from Cluster dialog box, in which you configure a new custom data type or update an existing custom type.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. <c>False</c> if you click Cancel.</returns>
      <param name="sequenceContext">Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.</param>
      <seealso cref="&quot;Create/Update Custom Data Type from Cluster dialog box&quot;javascript:RefLink('/InfoTopics/DB_Create_Custom_DT_Cluster.htm')" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="SequenceContext" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.PartiallySpecified">
      <summary>Returns a value that indicates whether the parameter is partially specified.</summary>
      <remarks>A parameter is partially specified if some of the parameter elements specify to use default values while other parameter elements specify expression values.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.CreateDefaultArrayElements">
      <summary>Creates all the default array elements of an array parameter.</summary>
      <remarks>This method is valid only on array parameters and creates the elements only if the array control on the VI front panel defines default elements. TestStand replaces any existing array elements the parameter previously specified.</remarks>
      <returns>Returns a value that indicates whether the default array elements were created.</returns>
      <seealso cref="LabVIEWParameter.DeleteArrayElements" />
      <seealso cref="LabVIEWParameter.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.DeleteArrayElements">
      <summary>Deletes all the array elements.</summary>
      <remarks>This method is valid only on array parameters.</remarks>
      <seealso cref="LabVIEWParameter.DeleteArrayElement" />
      <seealso cref="LabVIEWParameter.InsertArrayElement" />
      <seealso cref="LabVIEWParameter.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.InsertArrayElement(System.Int32)">
      <summary>Inserts an array element at the specified index.</summary>
      <remarks>This method is valid only for one-dimensional array parameters. Use the LabVIEWParameter.ArrayDimensions property to determine the number of array dimensions.</remarks>
      <param name="index">Specifies the index at which to insert the array element. This value must be greater than or equal to <c>0</c> and less than or equal to the number of array elements.</param>
      <seealso cref="LabVIEWParameter.ArrayDimensions" />
      <seealso cref="LabVIEWParameter.DeleteArrayElement" />
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.DeleteArrayElement(System.Int32)">
      <summary>Deletes the array element at a specified index.</summary>
      <remarks>This method is valid only for one-dimensional array parameters. Use the LabVIEWParameter.ArrayDimensions property to determine the number of array dimensions.</remarks>
      <param name="index">Specifies the index at which to delete the array element. This value must be greater than or equal to <c>0</c> and less than the number of array elements.</param>
      <seealso cref="LabVIEWParameter.ArrayDimensions" />
      <seealso cref="LabVIEWParameter.DeleteArrayElements" />
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ComplexRealPartElement">
      <summary>Returns the real element of a complex number or array.</summary>
      <remarks>This method is valid only for a complex number and array of complex number parameters.</remarks>
      <seealso cref="LabVIEWParameter.ComplexImaginaryPartElement" />
      <seealso cref="LabVIEWParameter.Elements" />
      <seealso cref="LabVIEWParameterElement" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ComplexImaginaryPartElement">
      <summary>Returns the imaginary element of a complex number or array.</summary>
      <remarks>This method is valid only for a complex number or an array of complex number parameters.</remarks>
      <seealso cref="LabVIEWParameter.ComplexRealPartElement" />
      <seealso cref="LabVIEWParameter.Elements" />
      <seealso cref="LabVIEWParameterElement" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ParameterCaption">
      <summary>Returns the caption of the parameter in the VI.</summary>
      <remarks>Use the LabVIEWParameter.ParameterName property to determine the label or name of the parameter.</remarks>
      <seealso cref="LabVIEWParameter.ParameterName" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ExprClusterTypeMismatch(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Returns <c>True</c> if you enable cluster mapping for the variable or property the expression value returns and the names or types of cluster elements do not match the LabVIEW cluster the VI specifies. Otherwise this method returns <c>False</c>.</summary>
      <param name="sequenceContext">Specifies the SequenceContext to use to evaluate the parameter expression value.</param>
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ValueExprIsIgnored">
      <summary>Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.</summary>
      <seealso cref="LabVIEWParameter.UseDefaultValue" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
      <seealso cref="LabVIEWParameter.ValueExprIsOptional" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.ValueExprIsOptional">
      <summary>Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.</summary>
      <seealso cref="LabVIEWParameter.Direction" />
      <seealso cref="LabVIEWParameter.ValueExpr" />
      <seealso cref="LabVIEWParameter.ValueExprIsIgnored" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.IsClusterMappingInvalid(System.String@)">
      <summary>Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid by checking the cluster passing information for any custom data types used to confirm that the information matches the cluster definition stored when you specified the module.
<para>Note: This method does not load the VI you specify. The method relies on the cluster information stored for the parameter when the module was last specified.</para></summary>
      <returns>Returns <c>True</c> when all the following conditions are true:<para><para>&#160;&#160;&#160;&#160;* The parameter is a cluster or cluster array</para><para>&#160;&#160;&#160;&#160;* The argument expression is valid and non-empty</para><para>&#160;&#160;&#160;&#160;* The argument or cluster mapping of the argument is invalid</para></para>
In all other cases, this method returns <c>False</c>.</returns>
      <param name="reasonNotValid">When this method returns <c>True</c>, this parameter returns the reason why the argument is invalid.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.IsNodeUsingDefault">
      <summary>Returns a value that indicates whether the parameter is associated with a LabVIEW property configured to use the default value in a Property Node call.</summary>
      <returns>Returns <c>True</c> when the parameter is associated with a LabVIEW property configured to use the default value.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameter.IsParameterMappingValid(System.String@)">
      <summary>Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid. This method checks the cluster passing information for any custom data types used and confirms that the information matches the cluster definition stored when you specified the module. </summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo method or the Module.LoadPrototype method before calling this method to validate an enumeration parameter.</remarks>
      <returns>Returns <c>True</c> when all the following conditions are true: the parameter is a cluster or cluster array or enumeration or enumeration array, the argument expression is valid and not empty, the cluster mapping of the argument is valid if the parameter is a cluster, and the argument value is compatible with the enumeration parameter if the parameter is an enumeration.
In all other cases, returns <c>False</c>.</returns>
      <param name="reasonNotValid">When this method returns <c>False</c>, this parameter returns an explanation for why the argument is invalid.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElements">
      <summary>Use objects from the LabVIEWParameterElements class to configure and obtain elements for a cluster or array parameter of a module that uses the LabVIEW Adapter. Use the LabVIEWParameter.Elements property to obtain the collection of elements for a parameter of a module and the LabVIEWParameterElement.Elements property to obtain the collection of sub-elements for a parameter element.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWParameter.Elements" />
      <seealso cref="LabVIEWParameterElement" />
      <seealso cref="LabVIEWParameterElement.Elements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElements.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index.</param>
      <seealso cref="LabVIEWParameterElement" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElements.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="LabVIEWParameterElement" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement">
      <summary>Use objects from the LabVIEWParameterElement class to configure and obtain element-specific information in a cluster or array parameter of a module.
Use the LabVIEWParameter.Elements property to obtain the collection of elements for a parameter of a module.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWParameter.Elements" />
      <seealso cref="LabVIEWParameterElements" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the LabVIEWParameterElement object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ValueExpr">
      <summary>Specifies an expression to define the argument to pass for the cluster member or cluster array element when calling the VI.</summary>
      <remarks>Each cluster member or cluster array element can be passed to LabVIEW individually, or the entire cluster/array can be passed as a TestStand data type.
Call the LabVIEWModule.LoadVIInfo method before you get or set this property to ensure that LabVIEW parameters, such as clusters and arrays, are updated with their current definitions.</remarks>
      <seealso cref="LabVIEWParameter.UseDefaultValue" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.Category">
      <summary>Returns which group of data types (number, string, and so on) to which the parameter element belongs.</summary>
      <remarks>After obtaining the category of the parameter, you can obtain the data type with the LabVIEWParameterElement.Type property.</remarks>
      <seealso cref="LabVIEWParameterElement.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.Type">
      <summary>Returns the data type of the parameter element. It specifically indicates what type of number, string, etc.</summary>
      <remarks>Obtain the category using the LabVIEWParameterElement.Category property before obtaining the data type of the parameter.</remarks>
      <seealso cref="LabVIEWParameterCategories" />
      <seealso cref="LabVIEWParameterElement.Category" />
      <seealso cref="LabVIEWParameterTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ElementName">
      <summary>Returns the name of the parameter element in the cluster. Returns an error for array elements.</summary>
      <remarks>The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.
Use the LabVIEWParameterElement.ElementCaption property to determine the caption of the parameter. </remarks>
      <seealso cref="LabVIEWParameterElement.ElementCaption" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.PassAsBinaryString">
      <summary>Specifies if TestStand preserves NUL bytes when setting and getting LabVIEW string data.</summary>
      <remarks>This property applies only when the LabVIEWParameterElement.Category property of the parameter is <c>LVParamCategory_String</c> or <c>LVParamCategory_StringArray</c> and the LabVIEWParameterElement.Type property of the parameter is <c>LVParamType_String</c>.
TestStand handles the string data in different ways depending on the version of LabVIEW you are using.
When this property is <c>False</c>, the LabVIEW Adapter treats strings as C-style strings with a NUL character to indicate the end of the string. C-strings cannot contain binary data.
Call the PropertyObject.GetValBinary method on the variable that stores the binary string to retrieve the raw data in TestStand when the binary data is compressed.</remarks>
      <seealso cref="LabVIEWParameterCategories" />
      <seealso cref="LabVIEWParameterElement.Category" />
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="LabVIEWParameterTypes" />
      <seealso cref="&quot;PropertyObject.GetValBinary&quot;PropertyObject_GetValBinary_M.htm" />
      <seealso cref="&quot;String Parameters&quot;javascript:RefLink('/InfoTopics/LabVIEW_String_Params.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.Elements">
      <summary>If a parameter element is a cluster or array of clusters, this property returns a collection to access sub-elements of the parameter element.</summary>
      <seealso cref="LabVIEWParameterElements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ArrayDimensions">
      <summary>Returns the number of dimensions for array parameters.</summary>
      <seealso cref="LabVIEWParameterElement.GetArrayIndex" />
      <seealso cref="LabVIEWParameterElement.GetDefaultArrayDimensionSize" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.GetDefaultArrayDimensionSize(System.Int32)">
      <summary>Returns the default size of the array corresponding to the zero-based index passed as input.</summary>
      <remarks>The default size corresponds to the default size of the array control in the front panel of a VI. Call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before calling this method.</remarks>
      <param name="dimension">Specifies the zero-based index corresponding to one of the array dimensions.</param>
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="LabVIEWParameterElement.ArrayDimensions" />
      <seealso cref="LabVIEWParameterElement.GetArrayIndex" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.GetArrayIndex(System.Int32,System.Int32)">
      <summary>Returns the index of the array element the offset parameter specifies.</summary>
      <returns>An array index string. Array index strings are a list of numbers enclosed in brackets that index each dimension of the array. For example, the following is an array index for a two dimensional array: <c>[0][1]</c>.</returns>
      <param name="offset">Specifies a zero-based number representing the offset of an array element in the one-dimensional physical storage of the array. The offset is in terms of the number of elements.</param>
      <param name="options">Reserved for future use. Pass <c>0</c>.</param>
      <seealso cref="LabVIEWParameterElement.ArrayDimensions" />
      <seealso cref="LabVIEWParameterElement.GetDefaultArrayDimensionSize" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.UserData">
      <summary>Holds a data item you associate with the parameter object.</summary>
      <remarks>Typically, you do not use this property.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.DisplayType">
      <summary>Returns a localized string that describes the LabVIEW data type for the parameter element.</summary>
      <remarks>The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before you retrieve this property value.</remarks>
      <returns>The display value of the data type of the parameter.</returns>
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ArrayElementPrototype">
      <summary>Returns the cluster prototype for the elements of the array.</summary>
      <remarks>This property is valid only for arrays of LabVIEW clusters. Call the LabVIEWParameterElement.Category property to determine whether the parameter is an array of LabVIEW clusters. The array element prototype is a template from which new elements are copied when the size of the array increases. The array element prototype represents the expected structure of elements of the array. You can also use the array element prototype to create a TestStand custom data type that maps to the LabVIEW cluster.</remarks>
      <seealso cref="LabVIEWParameterElement" />
      <seealso cref="LabVIEWParameterElement.Category" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.DefaultValue">
      <summary>Returns a display string that represents the default value defined for the parameter element.</summary>
      <remarks>Default values apply only to recommended and optional parameters. You must call the LabVIEWModule.LoadVIInfo or Module.LoadPrototype method before retrieving the default value. Otherwise, TestStand returns an empty string. The values stay in memory until the sequence file closes.</remarks>
      <seealso cref="LabVIEWModule.LoadVIInfo" />
      <seealso cref="LabVIEWParameterElement.UseDefaultValue" />
      <seealso cref="LabVIEWParameterElement.ValueExpr" />
      <seealso cref="LabVIEWParameterElement.WireRequirement" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.TypeDisplayString">
      <summary>Returns a string that describes the type of the parameter element.</summary>
      <seealso cref="LabVIEWParameterElement.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ValidEvaluationTypes">
      <summary>Returns the valid types to which this parameter can evaluate.</summary>
      <remarks>You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the LabVIEWParameterElement.ValueExpr property contains errors.
If you are using an ExpressionEdit control to display the value of the <c>LabVIEWParameterElement.ValueExpr</c> property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.</remarks>
      <seealso cref="EvaluationTypes" />
      <seealso cref="&quot;EvaluationTypes.PropertyValueTypeFlags&quot;EvaluationTypes_PropertyValueTypeFlags_P.htm" />
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.GetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;ExpressionEdit.SetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.UseDefaultValue">
      <summary>Specifies to use the default value of the parameter element when calling the VI.</summary>
      <remarks>You can use the default value when a parameter is recommended or optional.</remarks>
      <seealso cref="LabVIEWParameterElement.PartiallySpecified" />
      <seealso cref="LabVIEWParameterElement.ValueExpr" />
      <seealso cref="LabVIEWParameterElement.WireRequirement" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.Direction">
      <summary>Returns a value that indicates whether the parameter is an input or output parameter.</summary>
      <remarks>This method is for convenience and returns the same value the LabVIEWParameter.Direction property returns when called on the parent LabVIEWParameter object.
The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the Module.LoadPrototype method before retrieving this property.</remarks>
      <seealso cref="LabVIEWParameter.Direction" />
      <seealso cref="LabVIEWParameterDirections" />
      <seealso cref="LabVIEWParameterElement.WireRequirement" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.WireRequirement">
      <summary>Indicates whether the parameter is required, recommended, or optional.</summary>
      <remarks>This method is for convenience and returns the same value the LabVIEWParameter.WireRequirement property returns when called on the parent LabVIEWParameter object.
The LabVIEW Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call Module.LoadPrototype before retrieving this property.</remarks>
      <seealso cref="LabVIEWParameter.WireRequirement" />
      <seealso cref="LabVIEWParameterElement.Direction" />
      <seealso cref="LabVIEWParameterWireRequirements" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.GetEnumValues">
      <summary>Returns the enumeration constants for an enumeration parameter or returns the ring control values for a ring control parameter.</summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo method or the Module.LoadPrototype method before calling this method. The values stay in memory until the sequence file closes.
<para>Note: TestStand supports ring control values only when you use LabVIEW 2012 and later.</para>
Use the name and value of the property objects in the array this method returns to determine the name and value of the enumeration constants or ring controls.
Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the LabVIEWParameterElement.ValueExpr property for errors.
If you are using an ExpressionEdit control to display the value of the <c>LabVIEWParameterElement.ValueExpr</c> property, pass the return value of this method to the ExpressionEdit.SetAdditionalEvaluationConstants method to instruct the ExpressionEdit control to validate enumeration constants.</remarks>
      <returns>Returns an array of property objects where each property object represents an enumeration value or a ring control value.</returns>
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.SetAdditionalEvaluationConstants&quot;javascript:UILink('/RefTopics/ExpressionEdit_SetAdditionalEvaluationConstants_M.htm')" />
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="LabVIEWParameterElement.ValueExpr" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.UpdateClusterMapping(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Updates the expression values for all the cluster parameter elements when the parameter specifies an expression value that evaluates to a named data type and the data type enables cluster passing.</summary>
      <remarks>This method is valid only on cluster parameter elements.</remarks>
      <returns>Returns <c>True</c> if the method updates any expression values for the elements of the cluster parameter element.</returns>
      <param name="sequenceContext">Specifies the sequence context that the dialog box uses to evaluate all value expressions. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.</param>
      <seealso cref="&quot;Engine.NewEditContext&quot;Engine_NewEditContext_M.htm" />
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="SequenceContext" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.DisplayCreateCustomDataTypeDialog(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Launches the Create/Update Custom Data Type from Cluster dialog box, in which you configure a new custom data type or update an existing custom type.</summary>
      <returns>Returns <c>True</c> if you click OK in the dialog box. <c>False</c> if you click Cancel.</returns>
      <param name="sequenceContext">Specifies the sequence context the dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.</param>
      <seealso cref="&quot;Create/Update Custom Data Type from Cluster dialog box&quot;javascript:RefLink('/InfoTopics/DB_Create_Custom_DT_Cluster.htm')" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.PartiallySpecified">
      <summary>Returns a value that indicates whether the parameter element is partially specified.</summary>
      <remarks>A parameter element is partially specified if some of the parameter elements specify to use default values while other parameter elements specify expression values.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.CreateDefaultArrayElements">
      <summary>Creates all the default array elements of an array parameter element.</summary>
      <remarks>This method is valid only on array parameter elements and creates the elements only if the array control on the VI front panel defines default. TestStand replaces any existing array elements the parameter previously specified.</remarks>
      <returns>Returns a value that indicates whether the default array elements were created.</returns>
      <seealso cref="LabVIEWParameterElement.DeleteArrayElements" />
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.DeleteArrayElements">
      <summary>Deletes all array elements.</summary>
      <remarks>This method is valid only on array parameter elements.</remarks>
      <seealso cref="LabVIEWParameterElement.DeleteArrayElement" />
      <seealso cref="LabVIEWParameterElement.InsertArrayElement" />
      <seealso cref="LabVIEWParameterElement.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.InsertArrayElement(System.Int32)">
      <summary>Inserts an array element at the specified index.</summary>
      <remarks>This method is valid only for one-dimensional array parameter elements. Use the LabVIEWParameterElement.ArrayDimensions property to determine the number of array dimensions.</remarks>
      <param name="index">Specifies the index at which to insert the array element. This value must be greater than or equal to <c>0</c> and less than or equal to the number of array elements.</param>
      <seealso cref="LabVIEWParameterElement.ArrayDimensions" />
      <seealso cref="LabVIEWParameterElement.DeleteArrayElement" />
      <seealso cref="LabVIEWParameterElement.Type" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.DeleteArrayElement(System.Int32)">
      <summary>Deletes the array element at the given index.</summary>
      <remarks>This method is valid only for one-dimensional array parameter elements. Use the LabVIEWParameterElement.ArrayDimensions property to determine the number of array dimensions.</remarks>
      <param name="index">Specifies the index at which to delete the array element. This value must be greater than or equal to <c>0</c> and less than the number of array elements.</param>
      <seealso cref="LabVIEWParameterElement.ArrayDimensions" />
      <seealso cref="LabVIEWParameterElement.DeleteArrayElements" />
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.IndexString">
      <summary>Returns a string that specifies the multi-dimensional array index of the parameter element in the parent LabVIEWParameterElements object. </summary>
      <remarks>You can use this array index string to display the index of an array parameter.</remarks>
      <seealso cref="LabVIEWParameterElements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ComplexRealPartElement">
      <summary>Returns the real part element of a complex number or array.</summary>
      <remarks>This method is valid only for a complex number and array of complex number parameter elements.</remarks>
      <seealso cref="LabVIEWParameterElement" />
      <seealso cref="LabVIEWParameterElement.ComplexImaginaryPartElement" />
      <seealso cref="LabVIEWParameterElement.Elements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ComplexImaginaryPartElement">
      <summary>Returns the imaginary part element of a complex number or array.</summary>
      <remarks>This method is valid only for a complex number or an array of complex number parameter elements.</remarks>
      <seealso cref="LabVIEWParameterElement" />
      <seealso cref="LabVIEWParameterElement.ComplexRealPartElement" />
      <seealso cref="LabVIEWParameterElement.Elements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ElementCaption">
      <summary>Returns the caption of the parameter element in the VI.</summary>
      <remarks>Use the LabVIEWParameterElement.ElementName property to determine the label or name of the parameter element.</remarks>
      <seealso cref="LabVIEWParameterElement.ElementName" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ExprClusterTypeMismatch(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Returns <c>True</c> if you enable cluster mapping for the variable or property the expression value returns and the names or types of cluster elements do not match the LabVIEW cluster the VI specifies. Otherwise this method returns <c>False</c>.</summary>
      <param name="sequenceContext">Specifies the SequenceContext to use to evaluate the parameter expression value.</param>
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="LabVIEWParameterElement.ValueExpr" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ValueExprIsIgnored">
      <summary>Use this property to determine whether the LabVIEW Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameter elements that belong to a parameter that uses default values or that has a non-empty value expression.</summary>
      <seealso cref="LabVIEWParameterElement.UseDefaultValue" />
      <seealso cref="LabVIEWParameterElement.ValueExpr" />
      <seealso cref="LabVIEWParameterElement.ValueExprIsOptional" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.ValueExprIsOptional">
      <summary>Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for output parameters and value expressions for cluster and array parameters that have parameter elements are optional.</summary>
      <seealso cref="LabVIEWParameterElement.Direction" />
      <seealso cref="LabVIEWParameterElement.ValueExpr" />
      <seealso cref="LabVIEWParameterElement.ValueExprIsIgnored" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.IsClusterMappingInvalid(System.String@)">
      <summary>Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid by checking the cluster passing information for any custom data types used to confirm that the information matches the cluster definition stored when you specified the module.
<para>Note: This method does not load the VI you specify. The method relies on the cluster information stored for the parameter when the module was last specified.</para></summary>
      <returns>Returns <c>True</c> when all the following conditions are true:<para><para>&#160;&#160;&#160;&#160;* The parameter is a cluster or cluster array</para><para>&#160;&#160;&#160;&#160;* The argument expression is valid and non-empty</para><para>&#160;&#160;&#160;&#160;* The argument or cluster mapping of the argument is invalid</para></para>
In all other cases, this method returns <c>False</c>.</returns>
      <param name="reasonNotValid">When this method returns <c>True</c>, this parameter returns the reason why the argument is invalid.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.IsNodeUsingDefault">
      <summary>Returns a value that indicates whether the parameter is associated with a LabVIEW property configured to use the default value in a Property Node call.</summary>
      <returns>Returns <c>True</c> when the parameter is associated with a LabVIEW property configured to use the default value.</returns>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterElement.IsParameterMappingValid(System.String@)">
      <summary>Returns a value that indicates whether the argument you specify for a LabVIEW cluster or cluster array parameter is valid. This method checks the cluster passing information for any custom data types used and confirms that the information matches the cluster definition stored when you specified the module.</summary>
      <remarks>Call the LabVIEWModule.LoadVIInfo method or the Module.LoadPrototype method before calling this method to validate an enumeration parameter. </remarks>
      <returns>Returns <c>True</c> when all the following conditions are true: the parameter is a cluster or cluster array or enumeration or enumeration array, the argument expression is valid and not empty, the cluster mapping of the argument is valid if the parameter is a cluster, and the argument value is compatible with the enumeration parameter if the parameter is an enumeration.
In all other cases, returns <c>False</c>.</returns>
      <param name="reasonNotValid">When this method returns <c>False</c>, this parameter returns an explanation for why the argument is invalid.</param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule">
      <summary>Use objects from the SequenceCallModule class to specify and obtain Sequence Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a SequenceCallModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the Module class, use the AsModule method to obtain an object.
You can use the Module.LoadPrototype method to load the prototype for the module that the step specifies.</summary>
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.LoadParameters(System.Boolean,System.String,System.String)">
      <summary><para>Note: This method is obsolete. Use the Module.LoadPrototype method instead.</para></summary>
      <remarks>Loads parameter information from the sequence file and sequence of the module or a specific sequence file and sequence.
If SequenceCallModule.UseSequenceParameterPrototype is <c>True</c> and SequenceCallModule.SpecifyByExpression is <c>False</c>, this method ignores the parameters and loads the parameter information from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify. Otherwise, this method loads the parameter information from the sequence the parameters of this method specify.
You must call this method or the SequenceCallModule.LoadParametersFromSequence method before accessing the SequenceCallModule.Parameters property of the module.</remarks>
      <param name="useCurrentSeqFile">Specifies to use the sequence file and sequence of the sequence call.</param>
      <param name="seqFilePath">Specifies a specific sequence file when the useCurrentSeqFile parameter is <c>False</c>.</param>
      <param name="seqName">Specifies a specific sequence name.</param>
      <seealso cref="&quot;Module.LoadPrototype&quot;javascript:APILink('/RefTopics/Module_LoadPrototype_M.htm')" />
      <seealso cref="SequenceCallModule.LoadParametersFromSequence" />
      <seealso cref="SequenceCallModule.Parameters" />
      <seealso cref="SequenceCallModule.SequenceFilePath" />
      <seealso cref="SequenceCallModule.SequenceName" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
      <seealso cref="SequenceCallModule.UseCurrentFile" />
      <seealso cref="SequenceCallModule.UseSequenceParameterPrototype" />
      <seealso cref="SequenceCallParameter.ValueExpr" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.AsModule">
      <summary>Returns the underlying Module object that represents the SequenceCallModule object.</summary>
      <remarks>Use the Module object to access properties and methods common to all modules.</remarks>
      <seealso cref="Module" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.SequenceFilePath">
      <summary>Specifies the path of the sequence file that contains the sequence the module calls.</summary>
      <remarks>You specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths. 
You must specify an expression for the file pathname if the SequenceCallModule.SpecifyByExpression property is <c>True</c>. The expression must evaluate to an absolute or relative pathname for the file or a reference to be a SequenceFile object.
If you set the SequenceCallModule.UseCurrentFile property to <c>True</c>, TestStand ignores the value of this property.</remarks>
      <seealso cref="&quot;SequenceFile&quot;SequenceFile.htm" />
      <seealso cref="SequenceCallModule.SequenceName" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
      <seealso cref="SequenceCallModule.UseCurrentFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.SequenceName">
      <summary>Specifies the name of the sequence the module calls.</summary>
      <remarks>You must specify an expression for the file pathname if the SequenceCallModule.SpecifyByExpression property is <c>True</c>.</remarks>
      <seealso cref="SequenceCallModule.SequenceFilePath" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
      <seealso cref="SequenceCallModule.UseCurrentFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.SpecifyByExpression">
      <summary>Specifies that the SequenceCallModule.SequenceFilePath, SequenceCallModule.SequenceName, and SequenceCallModule.NewExecutionModelPath properties contain expressions the Sequence Adapter evaluates at run time to determine the actual sequence file path, sequence name, and model file path.</summary>
      <seealso cref="SequenceCallModule.NewExecutionModelPath" />
      <seealso cref="SequenceCallModule.SequenceFilePath" />
      <seealso cref="SequenceCallModule.SequenceName" />
      <seealso cref="SequenceCallModule.UseCurrentFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.UseCurrentFile">
      <summary>Specifies that the sequence file of the sequence call contains the sequence the module calls. If you set this property to <c>True</c>, TestStand ignores the value of the SequenceCallModule.SequenceFilePath property.</summary>
      <seealso cref="SequenceCallModule.SequenceFilePath" />
      <seealso cref="SequenceCallModule.SequenceName" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.TraceSetting">
      <summary>Specifies to enable or disable tracing for calls to the subsequence.</summary>
      <remarks>This property corresponds to the Sequence Call Trace Setting control on the Run Options tab of the Step Properties dialog box.</remarks>
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="&quot;Run Options tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop_Run_Opt_Tab.htm')" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
      <seealso cref="SequenceCallModule.TraceSetting" />
      <seealso cref="&quot;StationOptions.TracingEnabled&quot;StationOptions_TracingEnabled_P.htm" />
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.IgnoreTermination">
      <summary>Specifies what happens when the subsequence the module calls causes execution to terminate. If this property is <c>True</c> and TestStand terminates the subsequence, TestStand sets the status of the module step to <c>Terminated</c> but allows the module sequence to proceed normally from the next step. Usually, only one process model file uses this option. This option has no effect when the execution aborts.</summary>
      <remarks>This property corresponds to the Ignore Termination option on the Run Options tab of the Step Properties dialog box.</remarks>
      <seealso cref="&quot;Run Options tab&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop_Run_Opt_Tab.htm')" />
      <seealso cref="&quot;Step Properties dialog box&quot;javascript:RefLink('/InfoTopics/DB_Step_Prop.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.UseSequenceParameterPrototype">
      <summary>This property affects the behavior of the Module.LoadPrototype method. When this property is <c>True</c>, <c>Module.LoadPrototype</c> loads the parameters of the module from the sequence the SequenceCallModule.UseCurrentFile, SequenceCallModule.SequenceFilePath, and SequenceCallModule.SequenceName properties specify.</summary>
      <remarks>This property is ignored when the SequenceCallModule.SpecifyByExpression property is <c>True</c>.</remarks>
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
      <seealso cref="SequenceCallModule.ParameterPrototype" />
      <seealso cref="SequenceCallModule.Parameters" />
      <seealso cref="SequenceCallModule.SequenceFilePath" />
      <seealso cref="SequenceCallModule.SequenceName" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
      <seealso cref="SequenceCallModule.UseCurrentFile" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.ParameterPrototype">
      <summary>Returns a copy of the parameters container from the sequence the module calls.</summary>
      <returns>The parameters container.</returns>
      <seealso cref="SequenceCallModule.Parameters" />
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.MultithreadingAndRemoteExecOption">
      <summary>Specifies that the module calls the subsequence in a separate thread, separate execution, or on a remote computer.</summary>
      <seealso cref="SequenceCallModule.NewExecutionModelOption" />
      <seealso cref="SequenceCallModule.NewThreadOptions" />
      <seealso cref="SequenceCallModule.RemoteHost" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.StoreActiveXReferenceExpr">
      <summary>Specifies an ActiveX reference variable in which to store a reference to the new Thread object. You can use this reference in subsequent calls to the TestStand API. You can also use this reference in the Wait step to wait for the thread to complete.</summary>
      <remarks>This property can be left blank. The Sequence Adapter ignores this property unless you set the SequenceCallModule.MultithreadingAndRemoteExecOption property to <c>SeqCallMultiThread_NewThread</c> or <c>SeqCallMultiThread_NewExecution</c>.</remarks>
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="SequenceCallModule.NewExecutionWaitForCompletion" />
      <seealso cref="SequenceCallModule.NewThreadOptions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.NewThreadOptions">
      <summary>Specifies the options to apply when calling a subsequence in a separate thread.</summary>
      <seealso cref="SeqCallNewThreadOptions" />
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.NewExecutionTypeMask">
      <summary>Specifies settings to apply when calling a subsequence in a new execution. The Sequence Adapter combines this value with the value to which the SequenceCallModule.NewExecutionTypeMaskExpr property evaluates when you call a subsequence in a new execution.</summary>
      <seealso cref="&quot;ExecutionTypeMask&quot;ExecutionTypeMask.htm" />
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="SequenceCallModule.NewExecutionTypeMaskExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.NewExecutionTypeMaskExpr">
      <summary>Specifies an expression that returns a numeric value to combine with the SequenceCallModule.NewExecutionTypeMask property value when calling a subsequence in a new execution.</summary>
      <seealso cref="&quot;ExecutionTypeMask&quot;ExecutionTypeMask.htm" />
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="SequenceCallModule.NewExecutionTypeMask" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.NewExecutionModelOption">
      <summary>Specifies which process model the new execution uses when calling a subsequence in a new execution.</summary>
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="SequenceCallModule.NewExecutionModelPath" />
      <seealso cref="SequenceCallModule.SequenceName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.NewExecutionModelPath">
      <summary>Specifies the path to the process model the new execution uses when calling a subsequence in a new execution.</summary>
      <remarks>Specify an absolute or relative pathname for the file. Relative pathnames are relative to the TestStand search directory paths. 
You must specify an expression for the file pathname if the SequenceCallModule.SpecifyByExpression property is <c>True</c>.
The Sequence Adapter ignores this property unless you set the SequenceCallModule.NewExecutionModelOption property equal to SeqCallNewExecModel_SpecifyModel.</remarks>
      <seealso cref="SeqCallNewExecModelOptions" />
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="SequenceCallModule.NewExecutionModelOption" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.NewExecutionBreakOnEntryExpr">
      <summary>Specifies an expression that, when it evaluates to <c>True</c>, suspends execution before executing the first step when calling a subsequence.</summary>
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.NewExecutionWaitForCompletion">
      <summary>Specifies whether and when to wait for the execution to complete after calling a subsequence in a new execution.</summary>
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.RemoteHost">
      <summary>Specifies the name of the remote host when calling a subsequence on a remote computer.</summary>
      <remarks>If the SequenceCallModule.SpecifyHostByExpression property is <c>True</c>, the value of this property must be in the form of an expression.
The Sequence Adapter ignores this property unless you set the SequenceCallModule.MultithreadingAndRemoteExecOption property equal to <c>SeqCallMultiThread_Remote</c>.</remarks>
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="SequenceCallModule.SpecifyHostByExpression" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.SpecifyHostByExpression">
      <summary>Set this property to <c>True</c> to specify that the value of the SequenceCallModule.RemoteHost property is in the form of an expression.</summary>
      <remarks>This property affects the behavior of the Module.LoadPrototype method.</remarks>
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="SequenceCallModule.RemoteHost" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.Parameters">
      <summary>Returns the SequenceCallParameters collection, which contains a list of the current parameters used as inputs and outputs of the corresponding module.</summary>
      <remarks>Use the Module.LoadPrototype method to load the parameter information from the sequence file and sequence of the module or a specific sequence file and sequence.</remarks>
      <returns>The collection of parameters.</returns>
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
      <seealso cref="SequenceCallModule.ParameterPrototype" />
      <seealso cref="SequenceCallParameters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.LoadParametersFromSequence(NationalInstruments.TestStand.Interop.API.Sequence)">
      <summary><para>Note: This property is obsolete. Use the SequenceCallModule.LoadPrototypeFromSequence method instead.</para></summary>
      <remarks>Loads parameter information from the specified sequence. If the SequenceCallModule.UseSequenceParameterPrototype property is <c>True</c>, this method ignores the parameters and loads the parameter information from the sequence the sequence parameter of this method specifies.
You must call the SequenceCallModule.LoadParameters method or this method before accessing the SequenceCallModule.Parameters property of the module.</remarks>
      <param name="sequence">Specifies the sequence that contains the prototype to load.</param>
      <seealso cref="Sequence" />
      <seealso cref="SequenceCallModule.LoadParameters" />
      <seealso cref="SequenceCallModule.LoadPrototypeFromSequence" />
      <seealso cref="SequenceCallModule.Parameters" />
      <seealso cref="SequenceCallModule.SequenceFilePath" />
      <seealso cref="SequenceCallModule.SequenceName" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
      <seealso cref="SequenceCallModule.UseCurrentFile" />
      <seealso cref="SequenceCallModule.UseSequenceParameterPrototype" />
      <seealso cref="SequenceCallParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.InitiallySuspended">
      <summary>Specifies to create the new execution or thread in a suspended state. You must call the Execution.Resume or Thread.Resume method, respectively, to continue execution.</summary>
      <remarks><para>Note: If you select Break or Resume in the Debug menu of the sequence editor, it does not affect an initially suspended thread. However, the commands do affect an initially suspended execution.</para></remarks>
      <seealso cref="Execution.Resume" />
      <seealso cref="Thread.Resume" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.LoadPrototypeFromSequence(NationalInstruments.TestStand.Interop.API.Sequence,System.Int32)">
      <summary>Sets the prototype of the module to the prototype specified by a sequence.</summary>
      <remarks>Use this method to set the parameters of the SequenceCallModule when the SequenceCallModule.UseSequenceParameterPrototype property is <c>False</c> or if the SequenceCallModule.SpecifyByExpression property is <c>True</c>.</remarks>
      <returns>Returns a value that indicates whether the step was modified.</returns>
      <param name="sequence">Specifies the sequence with the prototype to use.</param>
      <param name="options">Specify one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <seealso cref="LoadPrototypeOptions" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
      <seealso cref="Sequence" />
      <seealso cref="SequenceCallModule.SpecifyByExpression" />
      <seealso cref="SequenceCallModule.UseSequenceParameterPrototype" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.CPUAffinityForNewThreadOption">
      <summary>Specifies the CPUs on which the new thread executes.</summary>
      <remarks>The value this property specifies applies only if the value of the  SequenceCallModule.MultithreadingAndRemoteExecOption property is <c>SeqCallMultithread_NewThread</c> or <c>SeqCallMultithread_NewExecution</c>.
You can optimize TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.</remarks>
      <seealso cref="SeqCallMultithreadOptions" />
      <seealso cref="SequenceCallModule.CustomCPUAffinityForNewThread" />
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="&quot;StationOptions.DefaultCPUAffinityForThreadsEx&quot;StationOptions_DefaultCPUAffinityForThreadsEx_P.htm" />
      <seealso cref="&quot;Using TestStand on SMP Systems&quot;javascript:TSFundLink('/InfoTopics/SMP_Clarification.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.CustomCPUAffinityForNewThread">
      <summary>A numeric expression that specifies the CPUs on which the new thread executes when the value of the SequenceCallModule.CPUAffinityForNewThreadOption property is <c>CPUAffinityForNewThreadOption_UseCustomAffinity</c>.</summary>
      <remarks>This property evaluates to a numeric value in which each bit represents a CPU. The lowest-order bit represents the first CPU. For example, a value of <c>12</c>, which is <c>1100</c> in binary, represents CPUs 3 and 4 on a quad-core computer. A value of <c>-1</c> specifies to use all CPUs available to the process.
The value this property specifies applies only if the value of the  SequenceCallModule.MultithreadingAndRemoteExecOption property is <c>SeqCallMultithread_NewThread</c> or <c>SeqCallMultithread_NewExecution</c>.
Refer to Using TestStand on SMP Systems for more information about optimizing TestStand performance on symmetric multiprocessing (SMP) systems for multithreaded applications.</remarks>
      <seealso cref="SeqCallMultithreadOptions" />
      <seealso cref="SequenceCallModule.CPUAffinityForNewThreadOption" />
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
      <seealso cref="&quot;Using TestStand on SMP Systems&quot;javascript:TSFundLink('/InfoTopics/SMP_Clarification.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallModule.SequenceComment">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameters">
      <summary>Use objects from the SequenceCallParameters class to configure and obtain parameters for a module that uses the Sequence Adapter.
Use the SequenceCallModule.Parameters property to obtain the collection of parameters for a module.</summary>
      <seealso cref="SequenceCallModule.Parameters" />
      <seealso cref="SequenceCallParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameters.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the parameter to retrieve.</param>
      <seealso cref="SequenceCallParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameters.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="SequenceCallParameter" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter">
      <summary>Use objects from the SequenceCallParameter class to configure and obtain SequenceCallParameter-specific information for an item in the SequenceCallParameters collection class.</summary>
      <seealso cref="SequenceCallParameters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.AsPropertyObject">
      <summary><para>Note: This method is obsolete. Use the properties and methods in the SequenceCallParameter class to access the contents of the object.</para> 
</summary>
      <remarks>Returns the underlying PropertyObject that represents the SequenceCallParameter object. Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
      <seealso cref="SequenceCallParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.UseDefaultValue">
      <summary>Specifies whether to use the default value of the parameter when calling the subsequence.</summary>
      <seealso cref="SequenceCallParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.ValueExpr">
      <summary>An expression defining the argument to pass for the parameter when calling the subsequence.</summary>
      <seealso cref="SequenceCallParameter.UseDefaultValue" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.UserData">
      <summary>Holds a data item you associate with the parameter object.</summary>
      <remarks>Typically, you do not use this property.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.ValidEvaluationTypes">
      <summary>Returns the valid types to which this parameter can evaluate.</summary>
      <remarks>You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the SequenceCallParameter.ValueExpr property contains errors.
If you are using an ExpressionEdit control to display the value of the <c>SequenceCallParameter.ValueExpr</c> property, pass the value of this property to the ExpressionEdit.SetValidEvaluationTypes method.</remarks>
      <seealso cref="EvaluationTypes" />
      <seealso cref="&quot;EvaluationTypes.PropertyValueTypeFlags&quot;EvaluationTypes_PropertyValueTypeFlags_P.htm" />
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.GetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;ExpressionEdit.SetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.Type">
      <summary><para>Note: This property is obsolete. Use the SequenceCallParameter.PropertyObjectType property instead. You can also use the PropertyObjectType.ValueType property to obtain the equivalent value.</para>
</summary>
      <remarks>Returns the type of the parameter.</remarks>
      <seealso cref="&quot;Engine.NewPropertyObject&quot;Engine_NewPropertyObject_M.htm" />
      <seealso cref="&quot;PropertyObject.NewSubProperty&quot;PropertyObject_NewSubProperty_M.htm" />
      <seealso cref="&quot;PropertyObjectType.ValueType&quot;PropertyObjectType_ValueType_P.htm" />
      <seealso cref="SequenceCallParameter.PropertyObjectType" />
      <seealso cref="SequenceCallParameter.Name" />
      <seealso cref="SequenceCallParameter.TypeDisplayString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.Name">
      <summary>Returns the name of the parameter.</summary>
      <seealso cref="SequenceCallParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.PassByReference">
      <summary>Returns a value that indicates whether the parameter is passed by reference or passed by value.</summary>
      <seealso cref="SequenceCallParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.TypeDisplayString">
      <summary>Returns the display string used to describe the parameter type.</summary>
      <seealso cref="SequenceCallParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.PropertyObjectType">
      <summary>Returns an object that provides type information about the parameter.</summary>
      <seealso cref="PropertyObjectType" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.ArgumentObject">
      <summary>Returns the underlying PropertyObject that represents the SequenceCallParameter object.</summary>
      <remarks>Use the <c>PropertyObject</c> to access the attributes associated with the parameter or to edit, add, or remove custom properties of the parameter.</remarks>
      <seealso cref="&quot;PropertyObject&quot;PropertyObject.htm" />
      <seealso cref="&quot;PropertyObject.Attributes&quot;PropertyObject_Attributes_P.htm" />
      <seealso cref="SequenceCallParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.SequenceCallParameter.Comment">
      <summary></summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicModule">
      <summary>Use objects from the HTBasicModule class to specify and obtain HTBasic Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to an HTBasicModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the Module class, use the HTBasicModule.AsModule method to obtain an object.</summary>
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicModule.AsModule">
      <summary>Returns the underlying module that represents the HTBasicModule object.</summary>
      <remarks>Use the module to access properties and methods that are common to all modules.</remarks>
      <seealso cref="Module" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicModule.SubroutineFilePath">
      <summary>Specifies the pathname of the code module file that contains the subroutine the step calls. You can specify an absolute or relative pathname for the module file. Relative pathnames are relative to the TestStand search directory paths.</summary>
      <seealso cref="HTBasicModule.SubroutineName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicModule.SubroutineName">
      <summary>Specifies the name of the subroutine the step calls.</summary>
      <returns>The subroutine name.</returns>
      <seealso cref="HTBasicModule.SubroutineFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicModule.ShowHTBasicApp">
      <summary>Specifies if the HTBasic Adapter activates the HTBasic application when it executes a step that calls a HTBasic subroutine.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicModule.WorkingDirectory">
      <summary>Specifies whether the adapter sets the working directory of the HTBasic server before invoking the subroutine of the module.</summary>
      <remarks>Set this property if the test code assumes a particular working directory path. The default value of this property is <c>HTBasicWorkingDir_AdapterDefault</c>. If this property has the value <c>HTBasicWorkingDir_Specify</c>, ensure the <c>HTBasicModule.WorkingDirectorySpecifiedPath</c> property contains a path that specifies the desired working directory.</remarks>
      <seealso cref="HTBasicModule.WorkingDirectorySpecifiedPath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicModule.WorkingDirectorySpecifiedPath">
      <summary>Specifies a working directory to set for the HTBasic server before invoking the subroutine of the module.</summary>
      <remarks>The module ignores this property unless the value of HTBasicModule.WorkingDirectory is <c>HTBasicWorkingDir_Specify</c>.</remarks>
      <returns>The desired working directory.</returns>
      <seealso cref="HTBasicModule.WorkingDirectory" />
      <seealso cref="HTBasicWorkingDirTypes" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule">
      <summary>Use objects from the DotNetModule class to specify and obtain .NET Adapter-specific information about the code module that steps or step type substeps execute. Use the Step.Module property to obtain a reference to a DotNetModule object. To access the properties and methods of a specific module class, query the Module object for the interface of the module-specific interface you want to acquire.
Typically, you use this class only when you are writing a sequence editor.
To access the properties and methods of the Module class, use the DotNetModule.AsModule method to obtain an object.</summary>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="&quot;Module&quot;Module.htm" />
      <seealso cref="&quot;Step.Module&quot;javascript:APILink('/RefTopics/Step_Module_P.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.AssemblyWarnings">
      <summary>Returns warning messages, if any, associated with the use of the currently specified assembly. Returns an empty string if no warnings exist or if TestStand could not load the assembly.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.AsModule">
      <summary>Returns the underlying Module object that represents the DotNetModule object.</summary>
      <remarks>Use the Module object to access properties and methods common to all modules.</remarks>
      <seealso cref="Module" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ClassReference">
      <summary><para>Note: This method is obsolete. Create a <c>Use Existing Object</c>, constructor, or <c>Create Remote Object</c> call as the first call in the module and specify a value for the first parameter instead of using this property.</para></summary>
      <remarks>Specifies a variable or property for a reference to the class instance or struct definition to call. If the object being called is an instance of a class, the instance can be stored in an object reference variable. If the object being called is a struct, the members of the struct can be stored in an object reference variable or a variable of a data type that has mapping defined for the struct.</remarks>
      <seealso cref="DotNetModule.LoadPrototypeFromMetadataToken" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ClassName">
      <summary>Specifies the full type name, including the namespace, of the root class to which the first DotNetCall applies.</summary>
      <seealso cref="DotNetCall" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.CreateObject">
      <summary><para>Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the <c>DotNetModule</c> class instead of setting this property to <c>True</c>. You can specify a constructor or remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.</para></summary>
      <remarks>Specifies whether to create a new instance of the class.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="DotNetModule.ConstructorParameters" />
      <seealso cref="DotNetModule.DisposeObject" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ConstructorParameters">
      <summary><para>Note: This property is obsolete. Use a constructor as the first call in the <c>DotNetModule</c> class and then use the DotNetCall.Parameters property instead. You can specify a constructor by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.</para></summary>
      <remarks>Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs of the constructor.
Call the DotNetModule.LoadConstructorPrototypeFromMetadataToken method before accessing this property.</remarks>
      <returns>The collection of parameters.</returns>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetCall.Parameters" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="DotNetModule.CreateObject" />
      <seealso cref="DotNetModule.LoadConstructorPrototypeFromMetadataToken" />
      <seealso cref="DotNetParameters" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.DisposeObject">
      <summary><para>Note: This property is obsolete. Use a constructor or a remote creation call as the first call in the <c>DotNetModule</c> class and then use the DotNetParameter.DisposeObject property on the return value parameter instead. You can specify a constructor or a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.</para></summary>
      <remarks>Specifies whether TestStand attempts to dispose of the object when the object is released or goes out of scope.
If the DotNetModule.CreateObject property is <c>False</c> or if the object does not implement the IDisposable interface, this property is ignored.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="DotNetModule.CreateObject" />
      <seealso cref="DotNetParameter.DisposeObject" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.MemberType">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.MemberType property instead.</para></summary>
      <remarks>Specifies whether to call a method or access a property.</remarks>
      <seealso cref="DotNetCall.MemberType" />
      <seealso cref="DotNetModule.MemberName" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.MemberFlags">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.MemberFlags property instead.</para></summary>
      <remarks>Specifies certain attributes of the member the module calls.
Use the constants defined by DotNetMemberFlags with this property.</remarks>
      <seealso cref="DotNetCall.MemberFlags" />
      <seealso cref="DotNetMemberFlags" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.MemberName">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.MemberName property instead.</para></summary>
      <remarks>Specifies the name of the member function to call or property to access.</remarks>
      <seealso cref="DotNetCall.MemberName" />
      <seealso cref="DotNetModule.ClassName" />
      <seealso cref="DotNetModule.GetMetadataToken" />
      <seealso cref="DotNetModule.MemberType" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.LoadMemberInfo(System.Boolean)">
      <summary><para>Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.</para></summary>
      <remarks>Loads information for the parameters of the specified member of the module and for constructor parameters of the class constructor, if the module has specified one.

You must set the DotNetModule.ClassName, DotNetModule.MemberName, and DotNetModule.MemberIndex properties on the module before calling LoadMemberInfo to access the DotNetModule.Parameters property of the module.</remarks>
      <returns>Specifies whether to reset the DotNetParameter.ValueExpr property of existing parameter values when loading a new prototype.</returns>
      <param name="">Returns a value that indicates whether TestStand loaded the member information of the module. This method usually returns <c>True</c>.</param>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.ClassName" />
      <seealso cref="DotNetModule.MemberIndex" />
      <seealso cref="DotNetModule.MemberName" />
      <seealso cref="DotNetModule.Parameters" />
      <seealso cref="DotNetParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.Parameters">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.Parameters property instead.</para></summary>
      <remarks>Returns the DotNetParameters collection that contains a list of the current parameters used as inputs and outputs of the corresponding module.
Call the DotNetModule.LoadPrototypeFromMetadataToken method before accessing this property.</remarks>
      <returns>The collection of parameters for the method the module calls or the property the module accesses.</returns>
      <seealso cref="DotNetCall.Parameters" />
      <seealso cref="DotNetModule.ConstructorParameters" />
      <seealso cref="DotNetModule.LoadPrototypeFromMetadataToken" />
      <seealso cref="DotNetParameters" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.RemoteHost">
      <summary><para>Note: This property is obsolete. Use a remote creation call as the first call in the <c>DotNetModule</c> class instead, and specify the remote host using the first parameter of the call that is not a return value. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.</para></summary>
      <remarks>Specifies the Universal Resource Identifier (URI) the .NET Adapter uses to execute the assembly remotely. The URI specifies the type of channel, port number, and endpoint. If the DotNetModule.SpecifyHostByExpression property is <c>True</c>, the value of this property must be in the form of an expression.
Leave this property empty to instruct the .NET Adapter to not use a remote endpoint and create the object on the local computer instead.
The following is an example of a HTTP channel URI:
<c>http://remotecomputername:65100/theEndPointName</c>
The following is an example of a TCP channel URI:
<c>tcp://localhost:8085/theEndPointName</c></remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="DotNetModule.CreateObject" />
      <seealso cref="DotNetModule.SpecifyHostByExpression" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.SpecifyHostByExpression">
      <summary><para>Note: This property is obsolete. Use a remote creation call as the first call in the <c>DotNetModule</c> class instead, and specify the remote host using the first parameter of the call that is not a return value. The parameter value is always an expression. Setting this value affects only the conversion that occurs when you save the file for a version of TestStand earlier than 2010. You can specify a remote creation call by adding a call to the module using the DotNetModule.Calls collection and using the DotNetCall.LoadPrototypeFromSignature method to specify the call.</para></summary>
      <remarks>Specifies if the DotNetModule.RemoteHost property contains an expression the module evaluates at run time to determine the name of the remote host.
The module ignores this property if RemoteHost is empty.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="DotNetModule.CreateObject" />
      <seealso cref="DotNetModule.RemoteHost" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.UseStepLoadOptions">
      <summary>Controls the lifetime of an object the module creates. If this property is <c>False</c>, the module creates the object when it begins executing. Then, the module releases its internal reference to the object when it completes executing. If this property is <c>True</c>, the module creates the object when the step loads according to Step.ModuleLoadOption and then holds an internal reference to the object until the step unloads according to Step.ModuleUnloadOption.</summary>
      <seealso cref="&quot;Step.ModuleLoadOption&quot;Step_ModuleLoadOption_P.htm" />
      <seealso cref="&quot;Step.ModuleUnloadOption&quot;Step_ModuleUnloadOption_P.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.SetAssembly(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations,System.String)">
      <summary>Specifies the location of the assembly and pathname if the assembly is located in a file. Sets the strong name if the assembly is located in the Global Assembly Cache.</summary>
      <remarks>You can specify an absolute or relative pathname for a file. Relative pathnames are relative to the TestStand search directory paths.
The following is an example of a strong name for the Global Assembly Cache: 
<c>ADODB, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</c></remarks>
      <param name="assemblyLocationParam">Specifies whether the assembly is in a file or in the Global Assembly Cache.</param>
      <param name="assemblyPathParam">Specifies the pathname, if the assembly is located in a file. Specifies the strong name. if the assembly is located in the Global Assembly Cache.</param>
      <seealso cref="DotNetModule.GetAssembly" />
      <seealso cref="DotNetModuleAssemblyLocations" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.GetAssembly(NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations@,System.String@)">
      <summary>Returns the location of the assembly and pathname if the assembly is located in a file. This method returns the strong name if the assembly is located in the Global Assembly Cache (GAC).</summary>
      <param name="assemblyLocationParam">Returns a value that indicates whether the assembly is located in a file or in the Global Assembly Cache.</param>
      <param name="assemblyPathParam">Returns the pathname, if the assembly is located in a file. Returns the strong name, if the assembly is located in the Global Assembly Cache.</param>
      <seealso cref="DotNetModule.SetAssembly" />
      <seealso cref="DotNetModuleAssemblyLocations" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ConstructorIndex">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.</para></summary>
      <remarks>Specifies the index of the constructor the module invokes to create the reference. A class can contain more than one constructor. Constructors do not have names. This property specifies the currently selected constructor.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.GetConstructorMetadataToken" />
      <seealso cref="DotNetModule.LoadConstructorPrototypeFromMetadataToken" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.LoadConstructorInfo(System.Boolean)">
      <summary><para>Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.</para>
</summary>
      <remarks>Loads information for the parameters of the class constructor, if the module has specified one.
You must set the DotNetModule.ClassName and DotNetModule.ConstructorIndex properties on the module before calling this method to access the DotNetModule.ConstructorParameters property of the module.</remarks>
      <returns>Returns a value that indicates whether the constructor information of the module was loaded. This method usually returns <c>True</c>.</returns>
      <param name="discardParameterValues">Specifies whether to reset the DotNetParameter.ValueExpr property of existing parameter values when loading a new constructor prototype.</param>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.ClassName" />
      <seealso cref="DotNetModule.ConstructorIndex" />
      <seealso cref="DotNetModule.ConstructorParameters" />
      <seealso cref="DotNetParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.MemberIndex">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.</para></summary>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.GetMetadataToken" />
      <seealso cref="DotNetModule.MemberName" />
      <seealso cref="DotNetModule.Parameters" />
      <seealso cref="&quot;Module.LoadPrototype&quot;Module_LoadPrototype_M.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ConstructorPrototype">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.Signature property instead.</para></summary>
      <remarks>Returns a display string for the constructor prototype.</remarks>
      <seealso cref="DotNetCall.Signature" />
      <seealso cref="DotNetModule.ConstructorParameters" />
      <seealso cref="DotNetModule.LoadConstructorPrototypeFromMetaDataToken" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
      <seealso cref="&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.SourceFilePath">
      <summary>Specifies the pathname of the source file for the class the module calls. TestStand uses the source file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.</summary>
      <seealso cref="DotNetModule.ProjectFilePath" />
      <seealso cref="DotNetModule.SolutionFilePath" />
      <seealso cref="Module.CreateCode" />
      <seealso cref="Module.EditCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ProjectFilePath">
      <summary>Specifies the pathname of the project file for the class the module calls. TestStand uses the project file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.</summary>
      <seealso cref="DotNetModule.SolutionFilePath" />
      <seealso cref="Module.CreateCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.SolutionFilePath">
      <summary>Specifies the pathname of the solution file for the class the module calls. TestStand uses the solution file path when integrating with Microsoft Visual Studio. You can enter an absolute or relative pathname. Relative pathnames are relative to the TestStand search directory paths.</summary>
      <seealso cref="DotNetModule.ProjectFilePath" />
      <seealso cref="DotNetModule.SourceFilePath" />
      <seealso cref="Module.CreateCode" />
      <seealso cref="Module.EditCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.IsStruct">
      <summary>Returns a value that indicates whether the class the module calls is a struct.</summary>
      <seealso cref="DotNetModule.ClassName" />
      <seealso cref="DotNetModule.DisplayCreateCustomDataTypeDialog" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.DisplayCreateCustomDataTypeDialog(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Launches the Create Custom Data Type from Struct dialog box, in which you can create a new data type that you can use as the reference that the module operates on.</summary>
      <remarks>Call this method only if the class name specified for the module is a struct, otherwise this method returns without launching the Create Custom Data Type from Struct dialog box. Use the DotNetModule.IsStruct property to determine whether the class name is a struct.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box and <c>False</c> if you click Cancel.</returns>
      <param name="sequenceContext">Specifies the sequence context the Create Custom Data Type from Struct dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.</param>
      <seealso cref="&quot;Create Custom Data Type from Struct dialog box&quot;javascript:RefLink('/InfoTopics/DB_Create_Custom_DT_Struct.htm')" />
      <seealso cref="DotNetModule.IsStruct" />
      <seealso cref="Engine.NewEditContext" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.LoadConstructorPrototypeFromMetadataToken(System.Int32,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method on a constructor call instead.</para></summary>
      <remarks>Loads the prototype information for the constructor from the specified assembly. Calling this method updates the DotNetModule.ConstructorPrototype property and the DotNetModule.ConstructorParameters collection. 
This method replaces the DotNetModule.LoadConstructorInfo and DotNetModule.LoadMemberInfo obsolete methods.</remarks>
      <returns>Return <c>True</c> if the prototype for the constructor in the specified assembly is different from the current constructor prototype of the module. Otherwise, return <c>False</c>.</returns>
      <param name="metadataToken">Specifies the metadata token property from the .NET class MemberInfo, which you can retrieve using reflection on an assembly.</param>
      <param name="options">Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.ConstructorParameters" />
      <seealso cref="DotNetModule.ConstructorPrototype" />
      <seealso cref="DotNetModule.LoadConstructorInfo" />
      <seealso cref="DotNetModule.LoadMemberInfo" />
      <seealso cref="LoadPrototypeOptions" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.GetMetadataToken">
      <summary><para>Note: This method is obsolete. The .NET Adapter no longer uses metadata tokens to load the prototype. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call instead.</para></summary>
      <remarks>Returns the metadata token for the specified prototype. If the prototype is not compatible, the method returns <c>-1</c>.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.GetConstructorMetadataToken" />
      <seealso cref="DotNetModule.LoadPrototypeFromMetadataToken" />
      <seealso cref="&quot;Module.IsPrototypeIncompatible&quot;Module_IsPrototypeIncompatible_P.htm" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.GetConstructorMetadataToken">
      <summary><para>Note: This method is obsolete. The .NET Adapter no longer uses metadata tokens to load the prototype. Use the DotNetCall.LoadPrototypeFromSignature method to specify a signature for a call instead.</para></summary>
      <remarks>Returns the metadata token for the specified constructor prototype. If the prototype is not compatible, the method returns <c>-1</c>.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.GetMetadataToken" />
      <seealso cref="DotNetModule.IsConstructorPrototypeIncompatible" />
      <seealso cref="DotNetModule.LoadConstructorPrototypeFromMetadataToken" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.LoadPrototypeFromMetadataToken(System.Int32,System.Int32)">
      <summary><para>Note: This method is obsolete. Use the DotNetCall.LoadPrototypeFromSignature method instead.</para></summary>
      <remarks>Loads the prototype information for the class, method, or property from the specified assembly. Calling this method updates the DotNetModule.Parameters collection.
This method replaces the DotNetModule.LoadConstructorInfo and DotNetModule.LoadMemberInfo obsolete methods.</remarks>
      <returns>Return <c>True</c> if the prototype for the class in the specified assembly is different from the current prototype of the module. Otherwise, return <c>False</c>.</returns>
      <param name="metadataToken">Specifies the metadata token property from the .NET class MemberInfo, which you can retrieve using reflection on an assembly.</param>
      <param name="options">Specifies one or more LoadPrototypeOptions constants. Use the bitwise-OR operator to specify multiple flags.</param>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetModule.GetMetadataToken" />
      <seealso cref="DotNetModule.LoadConstructorInfo" />
      <seealso cref="DotNetModule.LoadConstructorPrototypeFromMetadataToken" />
      <seealso cref="DotNetModule.LoadMemberInfo" />
      <seealso cref="DotNetModule.Parameters" />
      <seealso cref="&quot;LoadPrototypeOptions&quot;LoadPrototypeOptions.htm" />
      <seealso cref="&quot;Module.IsPrototypeIncompatible&quot;Module_IsPrototypeIncompatible_P.htm" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ClassHelpString">
      <summary>Returns the help string the assembly associates with the selected class.</summary>
      <seealso cref="DotNetCall.MemberHelpString" />
      <seealso cref="DotNetModule.ClassName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.MemberHelpString">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.MemberHelpString property instead.</para></summary>
      <remarks>Returns the help string the assembly associates with the member.</remarks>
      <seealso cref="DotNetCall.MemberHelpString" />
      <seealso cref="DotNetModule.ClassHelpString" />
      <seealso cref="DotNetModule.MemberName" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.NameOfMethodToCreate">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.MemberName property as the name of the method to create for the DotNetCall.CreateCode method instead.</para></summary>
      <remarks>Specifies the method name the Module.CreateCode method uses.</remarks>
      <seealso cref="DotNetCall.CreateCode" />
      <seealso cref="DotNetCall.MemberName" />
      <seealso cref="DotNetModule.ProjectFilePath" />
      <seealso cref="DotNetModule.SolutionFilePath" />
      <seealso cref="DotNetModule.SourceFilePath" />
      <seealso cref="Module.CreateCode" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.UnmappedConstructorArgumentValues">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.UnmappedArgumentValues property on a constructor call instead.</para></summary>
      <remarks>Returns the UnmappedArgumentValues collection that contains a list of the arguments not used as inputs and outputs of the corresponding constructor for the module.
When the constructor prototype changes, TestStand attempts to map the current constructor arguments to the new prototype by looking for matching argument names and data types, and by matching argument positions and data types. If TestStand fails to assign an argument to the new prototype, the argument is added to this collection.
TestStand does not clear the collection when you load a new prototype. Use the DotNetModule.ClearUnmappedConstructorArgumentValues method to clear the collection before calling the DotNetModule.LoadConstructorPrototypeFromMetadataToken method.</remarks>
      <seealso cref="DotNetCall.UnmappedArgumentValues" />
      <seealso cref="DotNetModule.ClearUnmappedConstructorArgumentValues" />
      <seealso cref="DotNetModule.LoadConstructorPrototypeFromMetadataToken" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
      <seealso cref="&quot;UnmappedArgumentValue&quot;UnmappedArgumentValue.htm" />
      <seealso cref="&quot;UnmappedArgumentValues&quot;UnmappedArgumentValues.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.ClearUnmappedConstructorArgumentValues">
      <summary><para>Note: This method is obsolete. The Use the DotNetCall.UnmappedArgumentValues method on a constructor call instead.</para></summary>
      <remarks>Removes the items in the UnmappedArgumentValues collection.
Clear the items if you do not want them available for the next prototype change.</remarks>
      <seealso cref="DotNetCall.UnmappedArgumentValues" />
      <seealso cref="DotNetModule.UnmappedConstructorArgumentValues" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
      <seealso cref="&quot;UnmappedArgumentValues&quot;UnmappedArgumentValues.htm" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.IsConstructorPrototypeIncompatible">
      <summary><para>Note: This property is obsolete. Use the DotNetCall.IsPrototypeIncompatible property on a constructor call instead.</para></summary>
      <remarks>Returns a value that indicates whether the prototype the current constructor parameters specify is incompatible with the constructor prototype of the specified module.
This property obtains the prototype for the specified .NET constructor and compares it to the current constructor parameters. This property returns <c>True</c> if TestStand successfully reads the prototype from the .NET constructor and the current constructor parameters do not match the prototype the .NET constructor specifies. Accessing this property loads the assembly to determine the constructor prototype.</remarks>
      <seealso cref="DotNetCall.IsPrototypeIncompatible" />
      <seealso cref="DotNetModule.GetConstructorMetaDataToken" />
      <seealso cref="DotNetModule.LoadConstructorPrototypeFromMetaDataToken" />
      <seealso cref="&quot;Module.IsPrototypeIncompatible&quot;Module_IsPrototypeIncompatible_P.htm" />
      <seealso cref="&quot;Obsolete DotNetModule Properties&quot;javascript:APILink('/InfoTopics/Ob_DotNetModule_Properties.htm')" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.Calls">
      <summary>Returns the collection of calls for the module.</summary>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.Execute(NationalInstruments.TestStand.Interop.API.SequenceContext,NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleArguments)">
      <summary>Use this method to call a .NET code module directly without using a step, sequence, or execution.</summary>
      <remarks>When you call a .NET code module using this method, you can evaluate the parameter expressions to determine the argument values or specify the argument values directly using a DotNetModuleArguments collection.
To use the parameter value expressions, pass a valid SequenceContext object to the sequenceContextParam parameter to evaluate the DotNetParameter.ValueExpr expressions.
To pass specific argument values, use the DotNetModule.NewModuleArguments method to create a collection of DotNetArguments objects.  Each <c>DotNetArguments</c> object in the collection is itself a collection of DotNetArgument objects that represents the arguments to pass to the corresponding DotNetCall object in the collection the DotNetModule.Calls property returns. Set the DotNetArgument.Value property on each item in the <c>DotNetArguments</c> collection to the argument value you want to pass to the <c>DotNetCall</c> object.</remarks>
      <param name="sequenceContextParam">Specifies the <c>SequenceContext</c> object this method uses to evaluate each of the <c>DotNetParameter.ValueExpr</c> expressions in the module parameters. Pass <c>NULL</c> for this parameter if you pass a <c>DotNetModuleArguments</c> collection to the argumentsParam parameter.</param>
      <param name="argumentsParam">Specifies the collection of argument collections that contain the argument values to pass to each <c>DotNetCall</c> object. Pass <c>NULL</c> for this parameter to pass the values obtained from evaluating each of the <c>DotNetParameter.ValueExpr</c> expressions in the module parameters.</param>
      <seealso cref="DotNetArgument" />
      <seealso cref="DotNetArgument.Value" />
      <seealso cref="DotNetArguments" />
      <seealso cref="DotNetCall" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="DotNetModule.NewModuleArguments" />
      <seealso cref="DotNetModuleArguments" />
      <seealso cref="DotNetParameter.ValueExpr" />
      <seealso cref="&quot;SequenceContext&quot;SequenceContext.htm" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModule.NewModuleArguments">
      <summary>Creates and returns a new DotNetModuleArguments collection. Use this collection to pass argument values to a DotNetModule object using the DotNetModule.Execute method.</summary>
      <remarks>The new collection contains the same number of items as the DotNetModule.Calls collection. Each item in the collection is a collection of DotNetArguments that contains the same number of items as the corresponding DotNetCall.Parameters collection.
To pass an argument value to a parameter, set the DotNetArgument.Value property to an item in the <c>DotNetArguments</c> collection that has the same index as the parameter in the DotNetParameters collection.</remarks>
      <seealso cref="DotNetArgument.Value" />
      <seealso cref="DotNetArguments" />
      <seealso cref="DotNetCall.Parameters" />
      <seealso cref="DotNetModule" />
      <seealso cref="DotNetModule.Calls" />
      <seealso cref="DotNetModule.Execute" />
      <seealso cref="DotNetModuleArguments" />
      <seealso cref="DotNetParameters" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameters">
      <summary>Use objects from the DotNetParameters class to configure and obtain parameters for a DotNetCall. Use the DotNetCall.Parameters property to obtain the collection of parameters for a call and the DotNetParameter.Elements method to obtain the collection that represents the members of a structure parameter or the elements of an array of structures parameter.</summary>
      <seealso cref="DotNetCall" />
      <seealso cref="DotNetCall.Parameters" />
      <seealso cref="DotNetParameter" />
      <seealso cref="DotNetParameter.Elements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameters.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the parameter to retrieve.</param>
      <seealso cref="DotNetParameter" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameters.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="DotNetParameter" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter">
      <summary>Use objects from the DotNetParameters class to configure and obtain parameters for a module that uses the .NET Adapter. Use the DotNetCall.Parameters property to obtain the collection of parameters for a module and the DotNetParameter.Elements property to obtain the collection that represents the members of a structure parameter or the elements of an array of structures parameter.</summary>
      <seealso cref="DotNetCall.Parameters" />
      <seealso cref="DotNetParameters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.Elements">
      <summary>Returns a collection that represents the following types of parameters, depending on the data type of the parameter:
<para><para>&#160;&#160;&#160;&#160;* Struct parameters&#8212;Fields of the struct.</para><para>&#160;&#160;&#160;&#160;* Array parameters&#8212;Elements of the array for the case in which you configure the code module to explicitly pass each element instead of the entire array.</para><para>&#160;&#160;&#160;&#160;* Array of struct parameters&#8212;Fields of the struct definition for the array.</para></para></summary>
      <seealso cref="DotNetParameters" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.AsPropertyObject">
      <summary>Returns the underlying PropertyObject that represents the DotNetParameter object.</summary>
      <remarks>Use the PropertyObject to modify, add, or remove custom properties of the object.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.ValueExpr">
      <summary>Specifies an expression defining the argument to pass for the parameter when calling the member.</summary>
      <seealso cref="DotNetParameter.UseDefaultValue" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.DisposeObject">
      <summary>Specifies whether TestStand attempts to dispose the object the DotNetParameter returns when the object is released or goes out of scope.</summary>
      <remarks>If the parameter is not an object reference or if the object does not implement the IDisposable interface, TestStand ignores this property.</remarks>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.ParameterName">
      <summary>Returns the name of the parameter.</summary>
      <remarks>The .NET Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the DotNetCall.LoadPrototypeFromSignature method before you retrieve this property value.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.Type">
      <summary>Returns the data type of the parameter.</summary>
      <remarks>The .NET Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the DotNetCall.LoadPrototypeFromSignature method before you retrieve this property value.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetParameter.DisplayType" />
      <seealso cref="DotNetParameterTypes" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.DisplayType">
      <summary>Returns a localized display value for the data type of the parameter.</summary>
      <seealso cref="DotNetParameter.Type" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.Flags">
      <summary>Returns flags that indicate certain attributes of the DotNetParameter. Refer to DotNetParameterFlags for a description of these flags.</summary>
      <remarks>You must call the DotNetCall.LoadPrototypeFromSignature method before retrieving this property value.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetParameterFlags" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.Direction">
      <summary>Returns a value that indicates whether the parameter is an input parameter, output parameter, input/output parameter, or a return value. Refer to DotNetParameterDirections for all the possible values.</summary>
      <remarks>The Direction property does not apply to DotNetParameter objects that represent fields of a structure or elements of an array.
The .NET Adapter persists this property value when you specify a code module for a step. For an unspecified step, you must call the DotNetCall.LoadPrototypeFromSignature method before you retrieve this property value.</remarks>
      <seealso cref="DotNetCall.LoadPrototypeFromSignature" />
      <seealso cref="DotNetParameterDirections" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.DefaultValue">
      <summary>Returns a display string that represents the default value defined for the parameter.</summary>
      <remarks>This value loads dynamically from the metadata stored in the assembly. The assembly you specify for the DotNetCall must exist and you must be able to load the assembly for TestStand to successfully retrieve this value.
The DefaultValue property does not apply to <c>DotNetParameter</c> objects that represent fields of a structure or elements of an array.</remarks>
      <seealso cref="DotNetParameter.UseDefaultValue" />
      <seealso cref="DotNetParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.UseDefaultValue">
      <summary>Specifies whether to use the default value of the parameter when calling the assembly.</summary>
      <remarks>You can only use the default value for optional parameters. This property does not apply to DotNetParameter objects that represent fields of a structure or elements of an array.</remarks>
      <seealso cref="DotNetParameter.DefaultValue" />
      <seealso cref="DotNetParameter.Flags" />
      <seealso cref="DotNetParameter.ValueExpr" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.ArrayDimensions">
      <summary><para>Note: This property is obsolete. Use the DotNetParameter.ArrayDimensionsEx property instead.</para></summary>
      <remarks>Returns the number of dimensions for array parameters.</remarks>
      <seealso cref=".ArrayDimensionsEx" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.UserData">
      <summary>Holds a data item you associate with the parameter object.</summary>
      <remarks>Typically, you do not use this property.</remarks>
      <seealso cref="PropertyObject" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.ValidEvaluationTypes">
      <summary>Returns the valid types to which this parameter can evaluate.</summary>
      <remarks>You can pass the value of this property to the validEvaluationTypes parameter of the Expression.ValidateEvaluationType method to determine whether the value of the DotNetParameter.ValueExpr property contains errors.
If you are using an ExpressionEdit control to display the value of the <c>DotNetParameter.ValueExpr</c> property, pass the value of this property to the  ExpressionEdit.SetValidEvaluationTypes method.</remarks>
      <seealso cref="DotNetParameter.GetEnumValues" />
      <seealso cref="DotNetParameter.ValueExpr" />
      <seealso cref="&quot;EvaluationTypes&quot;EvaluationTypes.htm" />
      <seealso cref="&quot;EvaluationTypes.PropertyValueTypeFlags&quot;EvaluationTypes_PropertyValueTypeFlags_P.htm" />
      <seealso cref="&quot;Expression.ValidateEvaluationType&quot;Expression_ValidateEvaluationType_M.htm" />
      <seealso cref="&quot;ExpressionEdit.GetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
      <seealso cref="&quot;ExpressionEdit.SetValidEvaluationTypes&quot;javascript:UILink('/RefTopics/ExpressionEdit_GetValidEvaluationTypes_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.GetEnumValues">
      <summary>Returns the enumeration constants for a parameter that is an enumeration.</summary>
      <remarks>The property objects in the array that this method returns have a name and value that corresponds to the name and value of the enumeration constant.
Pass the return value of this method as the additionalConstants parameter of Expression.ValidateEvaluationType when checking the DotNetParameter.ValueExpr property for errors.

If you are using an ExpressionEdit control to specify the <c>DotNetParameter.ValueExpr</c> property, pass the return value of this method to ExpressionEdit.SetAdditionalEvaluationConstants to direct the ExpressionEdit control to recognize the enumeration constants.</remarks>
      <returns>Returns an array of property objects where each property object represents an enumeration value.</returns>
      <seealso cref="DotNetParameter.ValidEvaluationTypes" />
      <seealso cref="DotNetParameter.ValueExpr" />
      <seealso cref="Expression.ValidateEvaluationType" />
      <seealso cref="&quot;ExpressionEdit.SetAdditionalEvaluationConstants&quot;javascript:UILink('/RefTopics/ExpressionEdit_SetAdditionalEvaluationConstants_M.htm')" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.InsertArrayElement(System.Int32)">
      <summary>Inserts an element into an array at the specified index.  </summary>
      <remarks>Call this method only on array parameters. Use the DotNetParameter.Flags property to determine whether a parameter is an array.

This method is valid only for one-dimensional array parameters. Use DotNetParameter.ArrayDimensionsEx to determine the number of array dimensions.</remarks>
      <param name="index">Specifies the zero-based index that specifies the location where to insert the element.</param>
      <seealso cref="DotNetParameter.ArrayDimensionsEx" />
      <seealso cref="DotNetParameter.DeleteArrayElement" />
      <seealso cref="DotNetParameter.Flags" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.DeleteArrayElement(System.Int32)">
      <summary>Deletes an element from an array at the specified index.  </summary>
      <remarks>Call this method only on array parameters. Use the DotNetParameter.Flags property to determine whether a parameter is an array.

This method is valid only for one-dimensional array parameters. Use DotNetParameter.ArrayDimensionsEx to determine the number of array dimensions.</remarks>
      <param name="index">Specifies the zero-based index that specifies the location where to delete the element.</param>
      <seealso cref="DotNetParameter.ArrayDimensionsEx" />
      <seealso cref="DotNetParameter.Flags" />
      <seealso cref="DotNetParameter.InsertArrayElement" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.DisplayCreateCustomDataTypeDialog(NationalInstruments.TestStand.Interop.API.SequenceContext)">
      <summary>Launches the Create Custom Data Type from Struct dialog box, in which you can create a new data type you can pass to a .NET struct parameter.</summary>
      <remarks>Call this method only if the parameter is a struct. Otherwise, this method returns without launching the Create Custom Data Type from Struct dialog box. Use the DotNetParameter.Type property to determine whether a parameter is a struct.</remarks>
      <returns>Returns <c>True</c> if you click OK in the dialog box and <c>False</c> if you click Cancel.</returns>
      <param name="sequenceContext">Specifies the sequence context the Create Custom Data Type from Struct dialog box uses to obtain information about the sequence file. You can use the Engine.NewEditContext method to obtain an edit-time sequence context.</param>
      <seealso cref="&quot;Create Custom Data Type from Struct dialog box&quot;javascript:RefLink('/InfoTopics/DB_Create_Custom_DT_Struct.htm')" />
      <seealso cref="DotNetParameter.Type" />
      <seealso cref="&quot;Engine.NewEditContext&quot;Engine_NewEditContext_M.htm" />
      <seealso cref="SequenceContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.HelpString">
      <summary>Returns the help string the assembly associates with the parameter.</summary>
      <seealso cref="DotNetCall.MemberHelpString" />
      <seealso cref="DotNetModule.ClassHelpString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.ValueExprIsIgnored">
      <summary>Use this property to determine whether the .NET Adapter ignores the argument value expression when it calls the module. The adapter ignores the argument value expression for parameters that use default values.</summary>
      <seealso cref="DotNetParameter.UseDefaultValue" />
      <seealso cref="DotNetParameter.ValueExpr" />
      <seealso cref="DotNetParameter.ValueExprIsOptional" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.ValueExprIsOptional">
      <summary>Use this property to determine whether the argument value expression is optional. You do not have to specify an optional value expression to call the module successfully. Value expressions for return values are optional.</summary>
      <seealso cref="DotNetParameter.Direction" />
      <seealso cref="DotNetParameter.ValueExpr" />
      <seealso cref="DotNetParameter.ValueExprIsIgnored" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.ArrayDimensionsEx">
      <summary>Returns the number of dimensions for array parameters. This property supports arrays of arrays, also known as jagged arrays, which can specify more than one number of dimensions.</summary>
      <remarks>For non-array parameters, this property returns an empty array.
For regular array parameters, this property returns an array with a single element that specifies a value that is the number of dimensions of the array.
For jagged arrays, this property returns an array with elements that represent the number of dimensions for each array level.</remarks>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.IsStructMappingInvalid(System.String@)">
      <summary>Indicates whether the argument you specify for a .NET struct or struct array parameter is valid by checking the struct passing information for any custom data types used to ensure that it matches the struct definition stored when you specified the module.
<para>Note: This method does not load the assembly you specify. The method relies on the struct information stored for the parameter when the module was last specified.</para></summary>
      <returns>Returns <c>True</c> when the parameter is a struct or struct array, the argument expression is valid and non-empty, and the argument or struct mapping of the argument is invalid. In all other cases, this method returns <c>False</c>.</returns>
      <param name="reasonNotValid">When this method returns <c>True</c>, this parameter returns the reason why the argument is invalid.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.TypeName">
      <summary>Returns the .NET name for the data type of the parameter.</summary>
      <remarks>This property is similar to the DotNetParameter.DisplayType property, which contains the TestStand type followed by the .NET type name in parentheses. The <c>DotNetParameter.TypeName</c> property contains only the .NET type name.
For the following .NET types, the <c>DotNetParameter.TypeName</c> property omits the <c>System</c> namespace prefix: <c>Boolean</c>, <c>Byte</c>, <c>Char</c>, <c>Double</c>, <c>Int16</c>, <c>Int32</c>, <c>Int64</c>, <c>IntPtr</c>, <c>SByte</c>, <c>Single</c>, <c>UInt16</c>, <c>UInt32</c>, <c>UInt64</c>, and <c>UIntPtr</c>.</remarks>
      <seealso cref="DotNetParameter.DisplayType" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameter.IsParameterMappingInvalid(System.String@)">
      <summary></summary>
      <param name="reasonNotValid"></param>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions">
      <summary>Use these constants with the CommonCAdapter.DefaultStructPacking property and the  CommonCAdapter.GetStructPacking and CommonCAdapter.SetStructPacking methods to specify the packing alignment for structure and union members.</summary>
      <seealso cref="CommonCAdapter.DefaultStructPacking" />
      <seealso cref="CommonCAdapter.GetStructPacking" />
      <seealso cref="CommonCAdapter.SetStructPacking" />
      <seealso cref="&quot;C/C++ DLL Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_DLLAdapterConfig.htm')" />
      <seealso cref="&quot;LabWindows/CVI Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_C_CVI_AdapterConfig.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions.StructPassing_OneByte">
      <summary>(Value: 0x1) Specifies to store structure and union members on a 1-byte boundary.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions.StructPassing_TwoByte">
      <summary>(Value: 0x2) Specifies to store structure and union members on a 2-byte boundary.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions.StructPassing_FourByte">
      <summary>(Value: 0x4) Specifies to store structure and union members on a 4-byte boundary.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions.StructPassing_EightByte">
      <summary>(Value: 0x8) Specifies to store structure and union members on an 8-byte boundary.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions.StructPassing_SixteenByte">
      <summary>(Value: 0x16) Specifies to store structure and union members on a 16-byte boundary.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructPassingOptions.StructPassing_AdapterDefault">
      <summary>(Value: 0x0) Specifies to use the default TestStand setting to store structure and union members. You can change the default TestStand setting by modifying the CommonCAdapter.DefaultStructPacking property or by configuring it in the C/C++ DLL Adapter Configuration or LabWindows/CVI Adapter Configuration dialog boxes. Do not pass <c>StructPassing_AdapterDefault</c> to the <c>CommonCAdapter.DefaultStructPacking</c> property itself.</summary>
      <seealso cref="Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_C_CVI_AdapterConfig.htm')" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicDefaultWorkingDirTypes">
      <summary>Use these constants with the HTBasicAdapter.DefaultWorkingDirectory property.</summary>
      <seealso cref="HTBasicAdapter.DefaultWorkingDirectory" />
      <seealso cref="HTBasicAdapter.SpecWorkingDirectoryPath" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicDefaultWorkingDirTypes.HTBasicDefaultWorkingDir_DoNotChange">
      <summary>(Value: 1) Do not change the working directory before calling the module.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicDefaultWorkingDirTypes.HTBasicDefaultWorkingDir_HTBasicServer">
      <summary>(Value: 2) Set the current working directory to the location of the HTBasic server before calling the module.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicDefaultWorkingDirTypes.HTBasicDefaultWorkingDir_SubroutineFile">
      <summary>(Value: 3) Set the current working directory to the location of the subroutine before calling the module.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicDefaultWorkingDirTypes.HTBasicDefaultWorkingDir_Specific">
      <summary>(Value: 4) Set the current working directory to the location the HTBasicAdapter.SpecWorkingDirectoryPath property defines.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWServerTypes">
      <summary>Use these constants with the serverType parameter of the LabVIEWAdapter.GetServerInfo method to determine the type of server the LabVIEW Adapter is using.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="&quot;LabVIEW Adapter Configuration dialog box&quot;javascript:RefLink('/InfoTopics/DB_LVAdapterConfig.htm')" />
      <seealso cref="LabVIEWAdapter.GetServerInfo" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWServerTypes.LabVIEWServer_ExecServer">
      <summary>(Value: 0x0) Specifies to use a LabVIEW executable server. LabVIEW executable servers include a LabVIEW development environment or a LabVIEW application that registers itself as a LabVIEW ActiveX Automation server.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWServerTypes.LabVIEWServer_RTEServer">
      <summary>(Value: 0x1) Specifies to use a LabVIEW run-time server.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes">
      <summary>Use these constants with the CommonCAdapter.GetStructMemberType and CommonCAdapter.SetStructMemberType methods to get or set the data type of the structure member.</summary>
      <seealso cref="CommonCAdapter.GetStructMemberType" />
      <seealso cref="CommonCAdapter.SetStructMemberType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_IUnknown">
      <summary>(Value: 0x42) Specifies a COM reference stored as an IUnknown pointer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_CVIHandle">
      <summary>(Value: 0x41) Specifies an ActiveX reference stored as a LabWindows/CVI CAObjHandle.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_IDispatch">
      <summary>(Value: 0x40) Specifies an ActiveX reference stored as an IDispatch pointer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_UnicodeStringBuffer">
      <summary>(Value: 0x23) Specifies a C-style wide character string stored as a buffer of 16-bit characters that can be modified.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_CStringBuffer">
      <summary>(Value: 0x22) Specifies a C-style char string stored as a buffer that can be modified.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_UnicodeString">
      <summary>(Value: 0x21) Specifies a string stored as a C-style wide character pointer, such as a pointer to an array of 16-bit characters. Do not modify the string value in the struct if it has this type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_CString">
      <summary>(Value: 0x20) Specifies a string stored as a C-style char pointer. Do not modify the string value in the struct if it has this type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_Float64">
      <summary>(Value: 1) Specifies a number stored as a 64-bit floating point value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_Float32">
      <summary>(Value: 0) Specifies a number stored as a 32-bit floating point value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_UInt32">
      <summary>(Value: 7) Specifies a number stored as a 32-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_Int32">
      <summary>(Value: 6) Specifies a number stored as a 32-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_UInt16">
      <summary>(Value: 5) Specifies a number stored as a 16-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_Int16">
      <summary>(Value: 4) Specifies a number stored as a 16-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_UInt8">
      <summary>(Value: 3) Specifies a number stored as a 8-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_Int8">
      <summary>(Value: 2) Specifies a number stored as a 8-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_Int64">
      <summary>(Value: 8) Specifies a number stored as a 64-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberTypes.StructMemberType_UInt64">
      <summary>(Value: 9) Specifies a number stored as a 64-bit unsigned integer.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberStorageOptions">
      <summary>Use these constants with the CommonCAdapter.GetStructMemberStorage and CommonCAdapter.SetStructMemberStorage methods to specify how to store a member inside a structure.</summary>
      <seealso cref="CommonCAdapter.GetStructMemberStorage" />
      <seealso cref="CommonCAdapter.GetStructMemberType" />
      <seealso cref="CommonCAdapter.SetStructMemberStorage" />
      <seealso cref="CommonCAdapter.SetStructMemberType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberStorageOptions.StructMemberStorage_StructPointer">
      <summary>(Value: 33) Specifies to store a pointer inside the containing struct which points to a member struct at a memory location outside of the containing struct.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberStorageOptions.StructMemberStorage_EmbeddedStruct">
      <summary>(Value: 32) Specifies to store a struct as a member inside the containing struct.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberStorageOptions.StructMemberStorage_LabVIEWString">
      <summary>(Value: 2) Specifies to store a string in the format used by DLLs created with the LabVIEW Application Builder. The CommonCAdapter.GetStructMemberType and CommonCAdapter.SetStructMemberType methods do not apply when the CommonCAdapter.GetStructMemberStorage method returns this value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberStorageOptions.StructMemberStorage_StringPointer">
      <summary>(Value: 1) Specifies to store a string as a character pointer. The characters themselves are stored at a memory location outside of the containing struct.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberStorageOptions.StructMemberStorage_InlineString">
      <summary>(Value: 0) Specifies to store a string as an array of characters inside the struct.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberArrayStorageOptions">
      <summary>Use these constants with the CommonCAdapter.GetStructMemberArrayStorage and CommonCAdapter.SetStructMemberArrayStorage methods to specify how to store an array inside a structure.</summary>
      <seealso cref="CommonCAdapter.GetStructMemberArrayStorage" />
      <seealso cref="CommonCAdapter.SetStructMemberArrayStorage" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberArrayStorageOptions.StructMemberStorage_LabVIEWArray">
      <summary>(Value: 0x102) Specifies to store the array in the format that the DLLs created with the LabVIEW Application Builder use.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberArrayStorageOptions.StructMemberStorage_ArrayPointer">
      <summary>(Value: 0x101) Specifies to store the array as a pointer to a memory location outside of the struct.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.StructMemberArrayStorageOptions.StructMemberStorage_InlineArray">
      <summary>(Value 0x100) Specifies to store the array within the structure itself.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleCreateOptions">
      <summary>Use these constants with the ActiveXModule.CreateOption method to specify how an ActiveX module creates a new instance of the specified object class when it executes.</summary>
      <seealso cref="ActiveXModule.CreateOption" />
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleCreateOptions.ActiveXCreate_DoNotCreate">
      <summary>(Value: 3) Specifies that the module does not create a new instance of the object class.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleCreateOptions.ActiveXCreate_FromFile">
      <summary>(Value: 2) Specifies that the module loads an existing object from a file and obtains a reference to the object. If the server application is already running, this option might launch another copy of the application. The server application determines when to launch multiple copies of itself. When you make this selection, the Specify Module dialog box displays a File Selection control and a Browse button. Use these controls to specify the file path.</summary>
      <seealso cref="&quot;Specify Module dialog box&quot;javascript:RefLink('/InfoTopics/DB_EditAutoCall.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleCreateOptions.ActiveXCreate_AttachToActive">
      <summary>(Value: 1) Specifies that the module obtains a reference to an active Application object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleCreateOptions.ActiveXCreate_New">
      <summary>(Value: 0) Specifies that the module creates a new object and obtains a reference to the object. If the server application is already running, the module might launch another copy of the application. The server application determines when to launch multiple copies of itself.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleMemberTypes">
      <summary>Use these constants with the ActiveXModule.MemberType property to specify the type of member the module accesses when it executes.</summary>
      <seealso cref="ActiveXModule.MemberType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleMemberTypes.ActiveXMember_SetPropertyByRef">
      <summary>(Value: 8) Specifies that the module sets a reference to a property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleMemberTypes.ActiveXMember_SetProperty">
      <summary>(Value: 4) Specifies that the module sets a property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleMemberTypes.ActiveXMember_GetProperty">
      <summary>(Value: 2) Specifies that the module gets a property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleMemberTypes.ActiveXMember_CallMethod">
      <summary>(Value: 1) Specifies that the module calls a method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXModuleMemberTypes.ActiveXMember_DoNotCall">
      <summary>(Value: -1) Specifies that the module does not call a method or access a property.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameterDirections">
      <summary>The ActiveXParameter.Direction property returns one or more of the following constants to indicate how the module passes the parameter when it executes. Use the bitwise-AND operator to determine whether any of these flags are set when obtaining the property value.</summary>
      <seealso cref="ActiveXParameter.Direction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameterDirections.ActiveXParamDirection_Out">
      <summary>(Value: 0x2) Indicates that the parameter is an output parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameterDirections.ActiveXParamDirection_In">
      <summary>(Value: 0x1) Indicates that the parameter is an input parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXParameterDirections.ActiveXParamDirection_Unknown">
      <summary>(Value: 0x0) Indicates that the module does not have enough information to determine the parameter direction.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions">
      <summary>Use these constants with the CommonCParameter.Pass property and the paramPass parameter of CVIParameters.New and DllParameters.New methods to specify how to pass the parameter.</summary>
      <seealso cref="CommonCParameter.Pass" />
      <seealso cref="CVIParameters.New" />
      <seealso cref="DllParameters.New" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions.CParamPass_ByConstReference">
      <summary>(Value: 0x50) Passes a reference to a constant value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions.CParamPass_ByConstPointer">
      <summary>(Value: 0x41) Passes a pointer to a constant value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions.CParamPass_ByReference">
      <summary>(Value: 0x10) Passes a reference to a modifiable value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions.CParamPass_ByPointer">
      <summary>(Value: 1) Passes a pointer to a modifiable value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterPassOptions.CParamPass_ByVal">
      <summary>(Value: 0) Passes a copy of the value.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes">
      <summary>Use the following constants with the CVIParameter.Type and DllParameter.Type properties to specify the parameters data type, or as the parameterType parameter of the CVIParameters.New and DllParameters.New methods. When you get or set the parameter data type, also get or set the category with the CVIParameter.Category or DllParameter.Category properties, or set the parameterCategory parameter of the <c>CVIParameters.New</c> and <c>DllParameters.New</c> methods.</summary>
      <seealso cref="CVIParameterCategories" />
      <seealso cref="CVIParameter.Category" />
      <seealso cref="CVIParameter.Type" />
      <seealso cref="CVIParameters.New" />
      <seealso cref="DllParameterCategories" />
      <seealso cref="DllParameter.Category" />
      <seealso cref="DllParameter.Type" />
      <seealso cref="DllParameters.New" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_IUnknown">
      <summary>(Value: 0x42) Specifies that the parameter is a pointer to an ActiveX IUnknown interface.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_CVIHandle">
      <summary>(Value: 0x41) Specifies that the parameter is an ActiveX reference passed as a CVI CAObjHandle.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_IDispatch">
      <summary>(Value: 0x40) Specifies that the parameter is a pointer to an ActiveX dispatch interface.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_UnicodeStringBuffer">
      <summary>(Value: 0x23) Specifies that the parameter is a C-style, wide character string buffer, such as a pointer to a modifiable array of dual-byte characters. The code module can also modify the value of a string parameter of this type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_CStringBuffer">
      <summary>(Value: 0x22) Specifies that the parameter is a C-style string buffer, such as a pointer to a modifiable array of single-byte characters. The code module can also modify the value of a string parameter of this type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_UnicodeString">
      <summary>(Value: 0x21) Specifies that the parameter is a C-style, wide character string buffer, such as a pointer to an array of double-byte characters. Ensure the code module does not modify the value of a string parameter of this type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_CString">
      <summary>(Value: 0x20) Specifies that the parameter is a C-style string, such as a pointer to an array of single-byte characters. Ensure the code module does not modify the value of a string parameter of this type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_Float64">
      <summary>(Value: 7) Specifies that the parameter is a 64-bit floating-point number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_Float32">
      <summary>(Value: 6) Specifies that the parameter is a 32-bit floating-point number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_UInt32">
      <summary>(Value: 5) Specifies that the parameter is a 32-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_Int32">
      <summary>(Value: 4) Specifies that the parameter is a 32-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_UInt16">
      <summary>(Value: 3) Specifies that the parameter is a 16-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_Int16">
      <summary>(Value: 2) Specifies that the parameter is a 16-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_UInt8">
      <summary>(Value: 1) Specifies that the parameter is an 8-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_Int8">
      <summary>(Value: 0) Specifies that the parameter is an 8-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_NotUsed">
      <summary>(Value: 200) Specifies that no data type is associated with the category of the parameter. Refer to CVIParameterCategories and DllParameterCategories for more information about category descriptions.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_Int64">
      <summary>(Value: 8) Specifies that the parameter is a 64-bit integer. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterTypes.CParamType_UInt64">
      <summary>(Value: 9) Specifies that the parameter is a 64-bit unsigned integer.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterResultActions">
      <summary>Use the following constants with the CommonCParameter.ResultAction property to specify what action to take when the code module returns a value. This property is valid only for return values and numeric parameters you pass by pointer.</summary>
      <seealso cref="CommonCParameter.ResultAction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterResultActions.CParamResult_SetErrorIfNotZero">
      <summary>(Value: 4) Specifies to set the error state of the step if the return value is not zero.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterResultActions.CParamResult_SetErrorIfZero">
      <summary>(Value: 3) Specifies to set the error state of the step if the return value is equal to zero.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterResultActions.CParamResult_SetErrorIfPositive">
      <summary>(Value: 2) Specifies to set the error state of the step if the return value is greater than zero.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterResultActions.CParamResult_SetErrorIfNegative">
      <summary>(Value: 1) Specifies to set the error state of the step if the return value is less than zero.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterResultActions.CParamResult_NoAction">
      <summary>(Value: 0) Specifies to ignore the return value.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModuleTypes">
      <summary>Use these constants with the CVIModule.ModuleType property to specify what type of executable the module runs.</summary>
      <seealso cref="CVIModule.ModuleType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModuleTypes.CVIModuleType_Lib">
      <summary>(Value: 3) This constant is obsolete. Specifies that the module is a static library.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModuleTypes.CVIModuleType_DLL">
      <summary>(Value: 2) Specifies that the module is a DLL.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModuleTypes.CVIModuleType_Source">
      <summary>(Value: 1) This constant is obsolete. Specifies that the module is a source file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIModuleTypes.CVIModuleType_Obj">
      <summary>(Value: 0) This constant is obsolete. Specifies that the module is an object file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories">
      <summary>Use the following constants with the CVIParameter.Category property and the parameterCategory parameter of CVIParameters.New method to specify the group of data types to which the parameter belongs. When you get or set the category of the parameter, also get or set the data type with the CVIParameter.Type property or set the parameterType parameter of the <c>CVIParameters.New</c> method. Some categories do not have an associated data type. For these categories, the only valid value for <c>CVIParameter.Type</c> is ParamType_NotUsed.</summary>
      <seealso cref="CommonCParameter.SetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.StringBufferSizeExpr" />
      <seealso cref="CommonCParameter.StructType" />
      <seealso cref="CommonCParameterTypes" />
      <seealso cref="CVIParameter.Category" />
      <seealso cref="CVIParameter.Type" />
      <seealso cref="CVIParameters.New" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_Void">
      <summary>(Value: 3) Specifies that the parameter is a void parameter, meaning it has no value. This category applies only to return values.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_TestError">
      <summary>(Value: 101) Specifies that the parameter is a legacy LabWindows/CVI tTestError struct. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_TestData">
      <summary>(Value: 100) Specifies that the parameter is a legacy LabWindows/CVI tTestData struct. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_CStructArray">
      <summary>(Value: 8) Specifies that the parameter is an array of C-style structs. This category does not have any associated data types. However, you can use the <c>CommonCParameter.StructType</c> property to specify the name of the TestStand type that the parameter represents.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_ObjectArray">
      <summary>(Value: 7) Specifies that the parameter is an array of ActiveX object references. Valid data types for this category include <c>CParamType_CVIHandle</c>, <c>CParamType_IDispatch</c>, and <c>CParamType_IUnknown</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_StringArray">
      <summary>(Value: 6) Specifies that the parameter is an array of strings. Valid data types for this category include <c>CParamType_CString</c>, <c>CParamType_CStringBuffer</c>, <c>CParamType_UnicodeString</c>, and <c>CParamType_UnicodeStringBuffer</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_NumericArray">
      <summary>(Value: 1) Specifies that the parameter is an array of numbers. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_CStruct">
      <summary>(Value: 5) Specifies that the parameter is a C-style struct. This category does not have any associated data types. However, you can use the CommonCParameter.StructType property to specify the name of the TestStand type the parameter represents.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_Object">
      <summary>(Value: 4) Specifies that the parameter is an ActiveX object reference. Valid data types for this category include <c>CParamType_CVIHandle</c>, <c>CParamType_IDispatch</c>, and <c>CParamType_IUnknown</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_String">
      <summary>(Value: 2) Specifies that the parameter is a string. Valid data types for this category include <c>CParamType_CString</c>, <c>CParamType_CStringBuffer</c>, <c>CParamType_UnicodeString</c>, and <c>CParamType_UnicodeStringBuffer</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_Numeric">
      <summary>(Value: 0) Specifies that the parameter is a numeric data type. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_Pointer">
      <summary>(Value: 9)</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_Enumeration">
      <summary>(Value: 10) Specifies that the parameter is an enumeration data type. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CVIParameterCategories.CVIParamCategory_EnumArray">
      <summary>(Value: 11) Specifies that the parameter is an array of C-style structs. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories">
      <summary>Use the following constants with the DllParameter.Category property and the parameterCategory parameter of the DllParameters.New module to specify the group of data types to which the parameter belongs. When you get or set the category of the parameter, also get or set the data type with the DllParameter.Type property, or set the parameterType parameter of the <c>DllParameters.New</c> method. Some categories do not have an associated data type; for these categories, the only valid value for the <c>DllParameter.Type</c> property is CParamType_NotUsed</summary>
      <seealso cref="CommonCParameter.ParameterName" />
      <seealso cref="CommonCParameter.SetArrayDimensionSizeExpr" />
      <seealso cref="CommonCParameter.StringBufferSizeExpr" />
      <seealso cref="CommonCParameter.StructType" />
      <seealso cref="CommonCParameterTypes" />
      <seealso cref="DllParameter.Category" />
      <seealso cref="DllParameter.TSObjectParameterType" />
      <seealso cref="DllParameter.Type" />
      <seealso cref="DllParameters.New" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_Void">
      <summary>(Value: 3) Specifies that the parameter is a void parameter, meaning it has no value. This category applies only to return values.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_bstr_t">
      <summary>(Value: 209) Specifies that the parameter is an instance of the Microsoft Visual Studio <c>_bstr_t</c> class. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CStringArray">
      <summary>(Value: 208) Specifies that the parameter is an instance of the MFC CStringArray class. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CString">
      <summary>(Value: 207) Specifies that the parameter is an instance of the Microsoft Foundation Classes (MFC) CString class. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CNiBoolVector">
      <summary>(Value: 206) Specifies that the parameter is an instance of the Measurement Studio <c>CNiBoolVector</c> class. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CNiComplexVector">
      <summary>(Value: 204) Specifies that the parameter is an instance of the Measurement Studio <c>CNiComplexVector</c> class. If you get or set this category, also get or set the <c>DllParameter.Type</c> property. This category is associated with numeric data types, such as <c>CParamType_Float32</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CNiComplex">
      <summary>(Value: 202) Specifies that the parameter is an instance of the Measurement Studio <c>CNiComplexT</c> template class. If you get or set this category, also get or set the DllParameter.Type property. This category is associated with numeric data types, such as <c>CParamType_Float32</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CNiString">
      <summary>(Value: 203) Specifies that the parameter is an instance of the Measurement Studio <c>CNiString</c> class. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CNiMatrix">
      <summary>(Value: 201) Specifies that the parameter is an instance of the Measurement Studio <c>CNiScalarMatrix</c> template class. If you get or set this category, also get or set the <c>DllParameter.Type</c> property. This category is associated with numeric data types, such as <c>CParamType_Float32</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CNiVector">
      <summary>(Value: 200) Specifies that the parameter is an instance of the Measurement Studio <c>CNiScalarVector</c> template class. If you get or set this category, also get or set the <c>DllParameter.Type</c> property. This category is associated with numeric data types, such as <c>CParamType_Float32</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_TSObject">
      <summary>(Value: 205) Specifies that the parameter is an object from the TestStand ActiveX API. This category does not have any associated parameters. However, the DllParameter.TSObjectParameterType property specifies what kind of TestStand object the parameter represents.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_BooleanArray">
      <summary>(Value: 101) Specifies that the parameter is an array of Boolean values. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_Boolean">
      <summary>(Value: 100) Specifies that the parameter is a Boolean type. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CStructArray">
      <summary>(Value: 8) Specifies that the parameter is an array of C-style structs. This category does not have any associated data types. However, you can use the <c>CommonCParameter.StructType</c> property to specify the name of the TestStand type the parameter represents.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_ObjectArray">
      <summary>(Value: 7) Specifies that the parameter is an array of ActiveX object references. Valid data types for this category include <c>CParamType_CVIHandle</c>, <c>CParamType_IDispatch</c>, and <c>CParamType_IUnknown</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_StringArray">
      <summary>(Value: 6) Specifies that the parameter is an array of strings. Valid data types for this category include <c>CParamType_CString</c>, <c>CParamType_CStringBuffer</c>, <c>CParamType_UnicodeString</c>, and <c>CParamType_UnicodeStringBuffer</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_NumericArray">
      <summary>(Value: 1) Specifies that the parameter is an array of numbers. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CStruct">
      <summary>(Value: 5) Specifies that the parameter is a C-style struct. This category does not have any associated data types. However, you can use the CommonCParameter.StructType property to specify the name of the TestStand type the parameter represents.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_Object">
      <summary>(Value: 4) Specifies that the parameter is an ActiveX object reference. Valid data types for this category include <c>CParamType_CVIHandle</c>, <c>CParamType_IDispatch</c>, and <c>CParamType_IUnknown</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_String">
      <summary>(Value: 2) Specifies that the parameter is a string. Valid data types for this category include <c>CParamType_CString</c>, <c>CParamType_CStringBuffer</c>, <c>CParamType_UnicodeString</c>, and <c>CParamType_UnicodeStringBuffer</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_Numeric">
      <summary>(Value: 0) Specifies that the parameter is a numeric data type. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_CNiStringVector">
      <summary>(Value: 210) Specifies that the parameter is an instance of the Measurement Studio <c>CNiStringVector</c> class. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_Pointer">
      <summary>(Value: 9) Specifies that the parameter is a pointer. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_Enumeration">
      <summary>(Value: 10) Specifies that the parameter is an enumeration data type. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllParameterCategories.DllParamCategory_EnumArray">
      <summary>(Value: 11) Specifies that the parameter is an array of C-style structs. Valid data types for this category include <c>CParamType_Float32</c>, <c>CParamType_Float64</c>, <c>CParamType_Int16</c>, <c>CParamType_Int32</c>, <c>CParamType_Int8</c>, <c>CParamType_UInt16</c>, <c>CParamType_UInt32</c>, <c>CParamType_UInt8</c>, <c>CParamType_UInt64</c>, and <c>CParamType_Int64</c>.  You can use the CommonCParameter.StructType property to specify the name of the TestStand type that the parameter represents. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories">
      <summary>The LabVIEWParameter.Category and LabVIEWParameterElement.Category properties return one of the following constants to indicate what group of data types the parameter belongs to. After obtaining the category of the parameter, you can obtain the data type with the LabVIEWParameter.Type or LabVIEWParameterElement.Type property. Some categories do not have an associated data type; for these categories, the only valid value for the <c>LabVIEWParameter.Type</c> property is LVParamType_Unspecified.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWParameter.Category" />
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="LabVIEWParameterElement.Category" />
      <seealso cref="LabVIEWParameterElement.Type" />
      <seealso cref="LabVIEWParameterTypes" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_Unknown">
      <summary>(Value: 8) Indicates that the parameter has a data type TestStand does not recognize.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_VariantArray">
      <summary>(Value: 56) Indicates the parameter is an array of COM Variants. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_ComplexArray">
      <summary>(Value: 55) Indicates that the parameter is an array of complex numbers. Data types associated with this category include <c>LVParamType_Complex128</c>, <c>LVParamType_Complex64</c>, and <c>LVParamType_ComplexEx</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_ReferenceArray">
      <summary>(Value: 54) Indicates that the parameter is an array of COM references. Data types associated with this category include <c>LVParamType_ActiveXRef</c>, <c>LVParamType_OtherRef</c>, and <c>LVParamType_LVClass</c> but do not include <c>LVParamType_IOCluster</c>, which is considered a cluster data type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_ClusterArray">
      <summary>(Value: 53) Indicates that the parameter is an array of clusters. Data types associated with this category include <c>LVParamType_DigitalData</c>, <c>LVParamType_DigitalWaveform</c>, <c>LVParamType_ErrorOut</c>, <c>LVParamType_IO</c>, <c>LVParamType_Standard</c>, <c>LVParamType_TestData</c>, and <c>LVParamType_Waveform</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_BooleanArray">
      <summary>(Value: 52) Indicates that the parameter is an array of Boolean values. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_StringArray">
      <summary>(Value: 51) Indicates that the parameter is an array of strings. Data types associated with this category include <c>LVParamType_BinaryString</c>, <c>LVParamType_CString</c>, <c>LVParamType_PathString</c>, and <c>LVParamType_TimestampString</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_NumericArray">
      <summary>(Value: 50) Indicates that the parameter is a an array of numbers. Numeric data types include enumerations, but do not include complex numbers. Data types associated with this category include <c>LVParamType_Ext</c>, <c>LVParamType_Int16</c>, <c>LVParamType_Int32</c>, <c>LVParamType_Int64</c>, <c>LVParamType_Int8</c>, <c>LVParamType_Real32</c>, <c>LVParamType_Real64</c>, <c>LVParamType_UInt16</c>, <c>LVParamType_UInt32</c>, <c>LVParamType_UInt64</c>, and <c>LVParamType_UInt8</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_Variant">
      <summary>(Value: 7) Indicates the parameter is a COM Variant. This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_Complex">
      <summary>(Value: 6) Indicates that the parameter is a complex numeric data type. Data types associated with this category include <c>LVParamType_Complex128</c>, <c>LVParamType_Complex64</c>, and <c>LVParamType_ComplexEx</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_Reference">
      <summary>(Value: 4) Indicates that the parameter is a reference. Data types associated with this category include <c>LVParamType_ActiveXRef</c>, <c>LVParamType_OtherRef</c>, and <c>LVParamType_LVClass</c> but do not include <c>LVParamType_IOCluster</c>, which is considered a cluster data type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_Cluster">
      <summary>(Value: 3) Indicates that the parameter is a cluster. Data types associated with this category include <c>LVParamType_DigitalData</c>, <c>LVParamType_DigitalWaveform</c>, <c>LVParamType_ErrorOut</c>, <c>LVParamType_IO</c>, <c>LVParamType_Standard</c>, <c>LVParamType_TestData</c>, and <c>LVParamType_Waveform</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_Boolean">
      <summary>(Value: 2) Indicates that the parameter is a Boolean type This category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_String">
      <summary>(Value: 1) Indicates that the parameter is a string data type. Data types associated with this category include <c>LVParamType_BinaryString</c>, <c>LVParamType_CString</c>, <c>LVParamType_PathString</c>, and <c>LVParamType_TimestampString</c>.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterCategories.LVParamCategory_Numeric">
      <summary>(Value: 0) Indicates that the parameter is a numeric data type. Numeric data types include enumerations, but do not include complex numbers. Data types associated with this category include <c>LVParamType_Ext</c>, <c>LVParamType_Int16</c>, <c>LVParamType_Int32</c>, <c>LVParamType_Int64</c>, <c>LVParamType_Int8</c>, <c>LVParamType_Real32</c>, <c>LVParamType_Real64</c>, <c>LVParamType_UInt16</c>, <c>LVParamType_UInt32</c>, <c>LVParamType_UInt64</c>, and <c>LVParamType_UInt8</c>.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes">
      <summary>The LabVIEWParameter.Type and LabVIEWParameterElement.Type properties return one of the following constants to indicate the data type of the parameter. Before you get or set the parameter data type, also get or set the category with the LabVIEWParameter.Category or LabVIEWParameterElement.Category property.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWParameter.Category" />
      <seealso cref="LabVIEWParameter.PassAsBinaryString" />
      <seealso cref="LabVIEWParameter.Type" />
      <seealso cref="LabVIEWParameterCategories" />
      <seealso cref="LabVIEWParameterElement.Category" />
      <seealso cref="LabVIEWParameterElement.Type" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_ErrorOut">
      <summary>(Value: 0x22) Indicates that the parameter is an error out type. For parameters of this LabVIEW data type, use the TestStand Error data type as a parameter value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_TestData">
      <summary>(Value: 0x21) Indicates that the parameter is a legacy TestData data type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_DigitalWaveform">
      <summary>(Value: 24) Indicates that the parameter is a Digital Waveform type. For parameters of this LabVIEW data type, use the TestStand LabVIEWDigitalWaveform data type as a parameter value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_AnalogWaveform">
      <summary>(Value: 23) Indicates that the parameter is an Analog Waveform type. For parameters of this LabVIEW data type, use the TestStand LabVIEWAnalogWaveform data type as a parameter value. <para>Note: If the Y element representation of an analog waveform is set to Quad or Unsigned Quad, do not use the LabVIEWAnalogWaveform data type because the representation of the Y element for the type is set to double-precision, 64-bit floating-point, which cannot store a Quad or unsigned Quad value without the risk of losing precision. In these cases, create a new custom data type and set the representation of the Y element to signed 64-bit integer or unsigned 64-bit integer, respectively.</para></summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_DigitalData">
      <summary>(Value: 22) Indicates that the parameter is a Digital Data type. For parameters of this LabVIEW data type, use the TestStand LabVIEWDigitalData data type as a parameter value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_IO">
      <summary>(Value: 21) Indicates that the parameter is an I/O control reference cluster.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_TimestampString">
      <summary>(Value: 0x63) Indicates that the parameter is a timestamp, which TestStand treats as a C-string.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_PathString">
      <summary>(Value: 0x62) Indicates that the parameter is a path. TestStand treats paths as C-strings.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_String">
      <summary>(Value: 0x60) Indicates that the parameter is a string that contains binary data. Use the LabVIEWParameter.PassAsBinaryString property to instruct TestStand to preserve <c>NUL</c> bytes by unescaping a TestStand string before assigning a value to a LabVIEW control, and by escaping a binary string from a LabVIEW indicator before storing in TestStand.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_OtherRef">
      <summary>(Value: 0x43) Indicates that the parameter is a LabVIEW reference but not an I/O control reference. TestStand treats such references as unsigned, numeric long values.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_ActiveXRef">
      <summary>(Value: 0x40) Indicates that the parameter is an ActiveX reference.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_ComplexExt">
      <summary>(Value: 11) Indicates that the parameter is an extended-precision complex number. TestStand treats parameters of this type as two 64-bit floating point numbers.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Complex128">
      <summary>(Value: 10) Indicates that the parameter is a 128-bit complex number. TestStand treats parameters of this type as two 64-bit floating point numbers.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Complex64">
      <summary>(Value: 9) Indicates that the parameter is a 64-bit complex number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Ext">
      <summary>(Value: 8) Indicates that the parameter is an extended-precision number. TestStand treats parameters of this type as 64-bit floating point numbers, so some data could be lost.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Real64">
      <summary>(Value: 7) Indicates that the parameter is a 64-bit real number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Real32">
      <summary>(Value: 6) Indicates that the parameter is a 32-bit real number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_UInt32">
      <summary>(Value: 5) Indicates that the parameter is a 32-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Int32">
      <summary>(Value: 4)  Indicates that the parameter is a 32-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_UInt16">
      <summary>(Value: 3) Indicates that the parameter is a 16-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Int16">
      <summary>(Value: 2) Indicates that the parameter is a 16-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_UInt8">
      <summary>(Value: 1) Indicates that the parameter is an 8-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Int8">
      <summary>(Value: 0) Indicates that the parameter is an 8-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Unspecified">
      <summary>(Value: 200) Indicates that the parameter has an unspecified data type because the category does not have any associated data types.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_DotNetRef">
      <summary>(Value: 0x41) Indicates that the parameter is a .NET reference.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_LVObjectRef">
      <summary>(Value: 0x42) Indicates that the parameter is a LabVIEW VI or application reference. TestStand treats such references as unsigned, numeric long values.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_DynamicData">
      <summary>(Value: 25) Indicates that the parameter is a Dynamic Data type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_StandardCluster">
      <summary>(Value: 20) Indicates that the parameter is a standard cluster.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_Int64">
      <summary>(Value: 12) Indicates that the parameter is a 64-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_UInt64">
      <summary>(Value: 13) Indicates that the parameter is a 64-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_LVClass">
      <summary>(Value: 0x44) Indicates that the parameter is a LabVIEW class.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_EnumUInt8">
      <summary>(Value: 14) Indicates that the parameter is an enumeration represented by an 8-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_EnumUInt16">
      <summary>(Value: 15) Indicates that the parameter is an enumeration represented by a 16-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterTypes.LVParamType_EnumUInt32">
      <summary>(Value: 16) Indicates that the parameter is an enumeration represented by a 32-bit unsigned integer.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterDirections">
      <summary>The LabVIEWParameter.Direction property returns one of the following constants to indicate how the module passes the parameter when it executes.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWParameter.Direction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterDirections.LVParamDirection_In">
      <summary>(Value: 0) Indicates that the parameter is passed to the VI.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterDirections.LVParamDirection_Out">
      <summary>(Value: 1) Indicates that the parameter is returned from the VI.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterWireRequirements">
      <summary>The LabVIEWParameter.WireRequirement property returns one of the following constants to indicate if the module can pass a default value for the parameter.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWParameter.WireRequirement" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterWireRequirements.LVParamWireReq_Required">
      <summary>(Value: 0) Indicates that the module must pass a value for the parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterWireRequirements.LVParamWireReq_Recommended">
      <summary>(Value: 1) Indicates that the module can use the default value for the parameter. However, passing a value is recommended.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWParameterWireRequirements.LVParamWireReq_Optional">
      <summary>(Value: 2) Indicates that the module can use the default value for the parameter instead of passing a value.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallTraceSettings">
      <summary>Use these constants with the SequenceCallModule.TraceSetting property to control tracing calls to the specified subsequence of the module.</summary>
      <seealso cref="&quot;Execution tab&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt_Exe_Tab.htm')" />
      <seealso cref="SequenceCallModule.TraceSetting" />
      <seealso cref="&quot;Station Options dialog box&quot;javascript:RefLink('/InfoTopics/DB_Station_Opt.htm')" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallTraceSettings.SeqCallTrace_UseCurrent">
      <summary>(Value: 1) Specifies to maintain the current tracing state when calling the subsequence. This is the default value for the SequenceCallModule.TraceSetting property. Usually, only process model files use other values for this option.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallTraceSettings.SeqCallTrace_Enable">
      <summary>(Value: 2) Specifies to enable tracing for calls to the subsequence and restores the original tracing state when the subsequence returns.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallTraceSettings.SeqCallTrace_Disable">
      <summary>(Value: 3) Specifies to disable tracing for calls to the subsequence and restores the original tracing state when the subsequence returns. However, if you enable the Allow Tracing into Sequence Calls Marked with Tracing &quot;Disabled&quot; option on the Execution tab of the Station Options dialog box, TestStand ignores this setting and does not alter the tracing state.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallTraceSettings.SeqCallTrace_UseExecutionSetting">
      <summary>(Value: 4) Specifies to enable the tracing state unless the execution was created with tracing disabled. Typically, a process model uses this setting to control the tracing state when the model calls the <c>MainSequence</c> in the client sequence file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallMultithreadOptions">
      <summary>Use these constants with the SequenceCallModule.MultithreadingAndRemoteExecOption property to call the subsequence in a new execution, a new thread, or on a remote computer when executing the module.</summary>
      <seealso cref="SequenceCallModule.MultithreadingAndRemoteExecOption" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallMultithreadOptions.SeqCallMultithread_None">
      <summary>(Value: 0) Specifies to call the subsequence in the current thread and execution on the current computer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallMultithreadOptions.SeqCallMultithread_NewThread">
      <summary>(Value: 1) Specifies to call the subsequence in a new thread.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallMultithreadOptions.SeqCallMultithread_NewExecution">
      <summary>(Value: 2) Specifies to call the subsequence in a new execution.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallMultithreadOptions.SeqCallMultithread_Remote">
      <summary>(Value: 0x100) Specifies to call the subsequence on a remote computer.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewThreadOptions">
      <summary>Use the following constants with the SequenceCallModule.NewThreadOptions property to specify the options to apply when calling a subsequence in a separate thread. Use the bitwise-AND operator to determine whether any of these options are set when obtaining the property value. Use the bitwise-OR operator to set more than one option when setting the property value.</summary>
      <seealso cref="SequenceCallModule.NewThreadOptions" />
      <seealso cref="&quot;Thread.Resume&quot;Thread_Resume_M.htm" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewThreadOptions.SeqCallThread_WaitForThreadCompletion">
      <summary>(Value: 0x1) Specifies that the calling sequence waits for the thread it launches to complete before the calling sequence returns.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewThreadOptions.SeqCallThread_InitiallySuspended">
      <summary>(Value: 0x2) Specifies that TestStand creates the new thread in a suspended state. You can call the Thread.Resume method to start the thread.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewThreadOptions.SeqCallThread_UseSingleThreadedApartment">
      <summary>(Value: 0x4) Specifies to initialize the concurrency model of the thread as single-threaded apartment. By default, TestStand initializes new executions and threads to use the multithreaded apartment model. A thread must use the single-threaded apartment model if the thread creates or launches a dialog box that contains ActiveX controls.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewExecModelOptions">
      <summary>Use these constants with the SequenceCallModule.NewExecutionModelOption property to specify which process model the new execution uses.</summary>
      <seealso cref="SequenceCallModule.NewExecutionModelOption" />
      <seealso cref="SequenceCallModule.NewExecutionModelPath" />
      <seealso cref="SequenceCallModule.SequenceName" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewExecModelOptions.SeqCallNewExecModel_None">
      <summary>(Value: 0) The new execution does not run under a process model.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewExecModelOptions.SeqCallNewExecModel_UseModelOfCurrentFile">
      <summary>(Value: 1) When you set this option, the execution runs under the model the sequence file you call specifies. If the file you call does not specify a model, the execution runs under the default station model. You can use the <c>SequenceCallModule.SequenceName</c> property to designate which entry point to call in the process model. Typically, the Process Model entry point calls the <c>MainSequence</c> in the client sequence file you specify.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallNewExecModelOptions.SeqCallNewExecModel_SpecifyModel">
      <summary>(Value: 2) When you set this option, you can use the SequenceCallModule.NewExecutionModelPath property to specify the process model under which the new execution runs. You can also use the SequenceCallModule.SequenceName property to specify which entry point to call in the process model. Typically, the Process Model entry point calls the <c>MainSequence</c> in the client sequence file you specify.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallWaitForExecOptions">
      <summary>Use these constants with the SequenceCallModule.NewExecutionWaitForCompletion property to specify whether to wait for the execution to complete.</summary>
      <seealso cref="SequenceCallModule.NewExecutionWaitForCompletion" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallWaitForExecOptions.SeqCallWait_DoNotWait">
      <summary>(Value: 0) The calling sequence does not wait for the execution to complete.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallWaitForExecOptions.SeqCallWait_BeforeNextStep">
      <summary>(Value: 1) The calling sequence waits for the execution to complete before it executes another step.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.SeqCallWaitForExecOptions.SeqCallWait_EndOfSequence">
      <summary>(Value: 2) The calling sequence waits for the execution to complete before the calling sequence returns.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicWorkingDirTypes">
      <summary>Use these constants with the HTBasicModule.WorkingDirectory property to specify the working directory for the HTBasic server before invoking the subroutine. Enable this option if the test code assumes a particular working directory path.</summary>
      <seealso cref="HTBasicModule.WorkingDirectory" />
      <seealso cref="HTBasicModule.WorkingDirectorySpecifiedPath" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicWorkingDirTypes.HTBasicWorkingDir_AdapterDefault">
      <summary>(Value: 0) Use the setting specified for the HTBasic Adapter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicWorkingDirTypes.HTBasicWorkingDir_DoNotChange">
      <summary>(Value: 1) Do not change the working directory for the HTBasic server.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicWorkingDirTypes.HTBasicWorkingDir_HTBasicServer">
      <summary>(Value: 2) Use the directory in which the HTBasic server is located.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicWorkingDirTypes.HTBasicWorkingDir_SubroutineFileDir">
      <summary>(Value: 3) Use the directory in which the subroutine file is located.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.HTBasicWorkingDirTypes.HTBasicWorkingDir_Specify">
      <summary>(Value: 4) Use the directory specified in the HTBasicModule.WorkingDirectorySpecifiedPath property.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes">
      <summary>Use these constants with the DotNetCall.MemberType property to specify the type of member the module accesses when it executes.</summary>
      <seealso cref="DotNetCall.MemberType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes.DotNetMember_DoNotCall">
      <summary>(Value: 0) Specifies that you have not completely specified the <c>DotNetCall</c> object and that the object does not call a method or access a property or field.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes.DotNetMember_CallMethod">
      <summary>(Value: 1) Specifies that the <c>DotNetCall</c> object calls a method.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes.DotNetMember_GetProperty">
      <summary>(Value: 2) Specifies that the <c>DotNetCall</c> object gets a property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes.DotNetMember_SetProperty">
      <summary>(Value: 3) Specifies that the <c>DotNetCall</c> object sets a property.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes.DotNetMember_CallConstructor">
      <summary>(Value: 4) Specifies that the DotNetCall object calls a constructor.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes.DotNetMember_CreateRemote">
      <summary>(Value: 5) Specifies that the <c>DotNetCall</c> object creates a remote object.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleMemberTypes.DotNetMember_UseExisting">
      <summary>(Value: 6) Specifies that the <c>DotNetCall</c> object uses an existing object a TestStand variable specifies as the .NET object on which to make the next call.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes">
      <summary>The DotNetParameter.Type property returns one of the following constants to indicate the data type of the parameter:</summary>
      <seealso cref="DotNetParameter.Type" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Class">
      <summary>(Value: 0) Indicates that the parameter is a class reference.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_String">
      <summary>(Value: 1) Indicates that the parameter is a string.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Boolean">
      <summary>(Value: 2) Indicates that the parameter is a Boolean type.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Byte">
      <summary>(Value: 3) Indicates that the parameter is a single-byte value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_SByte">
      <summary>(Value: 4) Indicates that the parameter is a signed-byte value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Int16">
      <summary>(Value: 5) Indicates that the parameter is a 16-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Int32">
      <summary>(Value: 6) Indicates that the parameter is a 32-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Int64">
      <summary>(Value: 7) Indicates that the parameter is a 64-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_UInt16">
      <summary>(Value: 8) Indicates that the parameter is a 16-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_UInt32">
      <summary>(Value: 9) Indicates that the parameter is a 32-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_UInt64">
      <summary>(Value: 10) Indicates that the parameter is a 64-bit unsigned integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Single">
      <summary>(Value: 11) Indicates that the parameter is a 32-bit single-precision floating point number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Double">
      <summary>(Value: 12) Indicates that the parameter is a 64-bit double-precision floating point number.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Decimal">
      <summary>(Value: 13) Indicates that the parameter is a 96-bit numeric value. TestStand treats parameters of this type as 64-bit floating point numbers, so some data could be lost.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Char">
      <summary>(Value: 14) Indicates that the parameter is a 16-bit Unicode character.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_IntPtr">
      <summary>(Value: 15) A platform-specific type that stores a pointer or a handle. For a 32-bit process, the pointer or handle is stored as a 32-bit integer. For a 64-bit process, the pointer or handle is stored as a 64-bit integer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Enum">
      <summary>(Value: 16) Indicates that the parameter is an enumeration value.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Object">
      <summary>(Value: 17) Indicates that the parameter is an object reference.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Struct">
      <summary>(Value: 18) Indicates that the parameter is a struct.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_Void">
      <summary>(Value: 19) Indicates that the parameter is a void parameter; therefore, it has no value. This type applies only to return values.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterTypes.DotNetParamType_UIntPtr">
      <summary>(Value: 20) A platform-specific type that stores a pointer or a handle. For a 32-bit process, the pointer or handle is stored as an unsigned 32-bit integer. For a 64-bit process, the pointer or handle is stored as an unsigned 64-bit integer.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterDirections">
      <summary>The DotNetParameter.Direction property returns one or more of the following constants to indicate the direction of the parameter. Use the bitwise-AND operator to determine which of these flags are set when obtaining the property value.</summary>
      <seealso cref="DotNetParameter.Direction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterDirections.DotNetParamDirection_In">
      <summary>(Value: 0x1) Indicates that the parameter is an input parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterDirections.DotNetParamDirection_Out">
      <summary>(Value: 0x2) Indicates that the parameter is an output parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterDirections.DotNetParamDirection_Return">
      <summary>(Value: 0x4) Indicates that the parameter is a return value.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.AdapterCodeTemplatePolicies">
      <summary>Use these constants with the LabVIEWAdapter.CodeTemplatePolicy property to specify which code templates the LabVIEW Adapter uses during code generation.</summary>
      <seealso cref="LabVIEWAdapter.CodeTemplatePolicy" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.AdapterCodeTemplatePolicies.AdapterCodeTemplatePolicy_UseOnlyNew">
      <summary>(Value: 0) Specifies that the adapter only searches for new code templates.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.AdapterCodeTemplatePolicies.AdapterCodeTemplatePolicy_UseOnlyLegacy">
      <summary>(Value: 1) Specifies that the adapter only searches for legacy code templates.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.AdapterCodeTemplatePolicies.AdapterCodeTemplatePolicy_UseNewAndLegacy">
      <summary>(Value: 2) Specifies that the adapter searches for new and legacy code templates.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterUnknownInfoFlags">
      <summary>The CommonCParameter.UnknownInfo property returns one or more of the following constants to indicate how much information TestStand was able to acquire about the parameter when reading the module information from a DLL exports table or a type library:</summary>
      <seealso cref="CommonCParameter.UnknownInfo" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterUnknownInfoFlags.CParamInfo_EveryThingKnown">
      <summary>(Value: 0) Indicates that TestStand could determine the required information about the parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterUnknownInfoFlags.CParamInfo_DontKnowNumElements">
      <summary>(Value: 1) Indicates that TestStand could not determine the number of elements in the array parameter.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterUnknownInfoFlags.CParamInfo_DontKnowIfArrayOrPointer">
      <summary>(Value: 2) Indicates that TestStand could not determine whether the parameter was an array or pointer.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterUnknownInfoFlags.CParamInfo_DontKnowFirstDimensionSize">
      <summary>(Value: 3) Indicates that TestStand could not determine how large the first dimension was for an array parameter.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterFlags">
      <summary>Use the following constant with the CommonCParameter.Flags property to specify what action to take when the code module returns a value. A value of zero indicates that no flags are set.</summary>
      <seealso cref="CommonCParameter.Flags" />
      <seealso cref="CommonCParameter.ResultAction" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCParameterFlags.CParamFlags_SetErrorCodeToReturnValue">
      <summary>(Value: 1) Specifies to assign the return value of the parameter to the <c>Error.Code</c> property of the currently executing step. This flag is valid only for return values and numeric parameters passed by pointer or reference.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModuleCallOptions">
      <summary>Use the following constants with the LabVIEWModule.VICallOptions method to get or set options for calling the VI for the module. Use the bitwise-AND operator to determine whether either of these flags are set when obtaining the property value. Use the bitwise-OR operator to set both flags when setting the property value.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWModule.VICallOptions" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModuleCallOptions.LVModuleOptions_ShowFrontPanel">
      <summary>(Value: 0x1) Specifies to activate the front panel of the VI of the module when called.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWModuleCallOptions.LVModuleOptions_AutoDetectLVRT">
      <summary>(Value: 0x2) Specifies to automatically detect the version of the LabVIEW Run-Time server to call when executing the VI of the module.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetMemberFlags">
      <summary>Use the following constants with the DotNetCall.MemberFlags property to determine certain attributes of the member the DotNetCall object calls. Use the bitwise-AND operator to determine whether any of these flags are set when obtaining the property value.</summary>
      <seealso cref="DotNetCall.MemberFlags" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetMemberFlags.DotNetMemberFlags_Static">
      <summary>(Value: 0x1) Indicates that the member is a static member. A static member does not use or require a class instance. A static member can access only static data on its class.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetMemberFlags.DotNetMemberFlags_TopLevel">
      <summary>(Value: 0x2) Indicates whether the adapter shows members that are at a base class level when specifying the module. This flag is obsolete and will never be set. Instead, the adapter always shows and supports calling base class members.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterFlags">
      <summary>The DotNetParameter.Flags property returns the following constants to indicate certain attributes of the parameter. Use the bitwise-AND operator to determine whether any of these flags are set when obtaining the property value.</summary>
      <seealso cref="DotNetParameter.Flags" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterFlags.DotNetParamFlags_Lcid">
      <summary>(Value: 0x4) Indicates that the parameter is a locale identifier.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterFlags.DotNetParamFlags_Optional">
      <summary>(Value: 0x10) Indicates that the parameter is optional.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetParameterFlags.DotNetParamFlags_IsArray">
      <summary>(Value: 0x100) Indicates that the parameter is an array.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations">
      <summary>Use these constants with the DotNetModule.SetAssembly method to specify whether the assembly is located in a file or in the global assembly cache (GAC).</summary>
      <seealso cref="DotNetModule.SetAssembly" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations.DotNetModule_AssemblyLocation_File">
      <summary>(Value: 0) Located in a file, such as a DLL.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DotNetModuleAssemblyLocations.DotNetModule_AssemblyLocation_GAC">
      <summary>(Value: 1) Located in the GAC.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVITypes">
      <summary>Use these constants with the LabVIEWModule.ImportVI method to specify the type of VI to import to the module.</summary>
      <seealso cref="LabVIEWModule.ImportVI" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVITypes.ImportVIType_ExpressVIWrapper">
      <summary>(Value: 0) Indicates that the VI to import is a TestStand-generated Express VI wrapper. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVITypes.ImportVIType_ExpressVITemplate">
      <summary>(Value: 1) Indicates that the VI to import is an Express VI template. When you use this option, TestStand generates a wrapper VI to call the given Express VI template and imports the generated wrapper VI into the module.  </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVITypes.ImportVIType_PropertyNodeVIWrapper ">
      <summary>(Value: 2) Indicates that the VI to import is a TestStand-generated LabVIEW Property Node VI wrapper.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ImportVITypes.ImportVIType_PropertyNodeVICreate">
      <summary>(Value: 3) When you use this option, TestStand generates a wrapper VI to call the LabVIEW Property Node and selected properties already configured in the step. TestStand imports the generated wrapper VI into the code module.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWVITypes">
      <summary>Use these constants with the LabVIEWModule.VIType property to specify the type of VI the LabVIEW module calls.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="&quot;LabVIEW Adapter&quot;javascript:RefLink('/InfoTopics/LabVIEW.htm')" />
      <seealso cref="LabVIEWModule.VIType" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWVITypes.LVVIType_Standard">
      <summary>(Value: 0) Indicates that the VI module calls a standard VI. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWVITypes.LVVIType_Express">
      <summary>(Value: 1) Indicates that the VI module calls an Express VI.  </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DeployProjectLibraryOptions">
      <summary>Use the following constants with the LabVIEWAdapter.DeployProjectLibrary method to specify whether to deploy or undeploy a LabVIEW project library file:</summary>
      <seealso cref="&quot;Deploying Network-Published Shared Variables&quot;javascript:TSLabVIEW('/InfoTopics/Variable.htm')" />
      <seealso cref="LabVIEWAdapter.DeployProjectLibrary" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DeployProjectLibraryOptions.DeployProjectLibraryOption_Deploy">
      <summary>(Value: 0) Specifies to deploy the LabVIEW project library file. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DeployProjectLibraryOptions.DeployProjectLibraryOption_Undeploy">
      <summary>(Value: 1) Specifies to undeploy the LabVIEW project library file.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServers">
      <summary>A collection of ActiveXServer objects.
Use the ActiveXAdapter.Servers property to obtain a collection of ActiveXServer objects. You must call the ActiveXServer.LoadTypeLibrary method before you access any type library related properties.</summary>
      <seealso cref="ActiveXAdapter.Servers" />
      <seealso cref="ActiveXServer" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServers.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <remarks>The first time you access this property or the ActiveXServer.Count property, ActiveXServers reads the list of servers registered on the computer from the registry.</remarks>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="ActiveXServer" />
      <seealso cref="ActiveXServers.Count" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServers.Count">
      <summary>Returns the number of items in the collection.</summary>
      <remarks>The first time you access the ActiveXServer.Item property or this property, ActiveXServers reads the list of servers registered on the computer from the registry.</remarks>
      <seealso cref="ActiveXServers.Item" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServers.RegisterTypeLibrary(System.String,System.Boolean@)">
      <summary>Registers the specified type library on this computer.</summary>
      <remarks>This method updates ActiveXServers' collection of ActiveXServer objects to include the type library you specified.</remarks>
      <returns>Returns the GUID of the type library this method registers.</returns>
      <param name="typeLibraryPath">Specifies the absolute path of the file that contains the type library you want to register. Typically you specify a <c>.exe</c>, <c>.dll</c>, or <c>.tlb</c> file.</param>
      <param name="newerTypeLibraryAlreadyRegistered">Returns <c>True</c> if a newer version of the type library you specified was already registered on the computer.</param>
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServers.Refresh">
      <summary>Call this method to refresh the ActiveXServer objects in the collection.</summary>
      <remarks>After calling this method, ActiveXServers contains a new collection of ActiveXServer objects. After calling this method, do not access properties or methods of any ActiveXServer object you acquired before calling this method.</remarks>
      <seealso cref="ActiveXServers.RefreshCount" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServers.RefreshCount">
      <summary>Returns the number of times the ActiveXServer.Refresh method has been called.</summary>
      <remarks>Use this property to determine whether a call to the <c>ActiveXServer.Refresh</c> method has created new objects in the collection.</remarks>
      <seealso cref="ActiveXServers.Refresh" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer">
      <summary>Use an ActiveXServer object to obtain information about a server and its type library registered on this computer. Use the ActiveXAdapter.Servers property to obtain a collection of ActiveXServer objects. You must call the ActiveXServer.LoadTypeLibrary method before you access any type library related properties.</summary>
      <seealso cref="ActiveXAdapter.Servers" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.Path">
      <summary>Returns the absolute path of the server.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.Id">
      <summary>Returns the GUID of the server.</summary>
      <seealso cref="ActiveXServer.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.Name">
      <summary>Returns the name of the server.</summary>
      <seealso cref="ActiveXServer.DisplayName" />
      <seealso cref="ActiveXServer.Id" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.MajorVersion">
      <summary>Returns the major version of the server.</summary>
      <seealso cref="ActiveXServer.MinorVersion" />
      <seealso cref="ActiveXServer.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.MinorVersion">
      <summary>Returns the minor version of the server.</summary>
      <seealso cref="ActiveXServer.MajorVersion" />
      <seealso cref="ActiveXServer.VersionString" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.HelpContext">
      <summary>Returns the ID of the help topic for the server in the help file the  ActiveXServer.HelpFilePath property specifies.</summary>
      <seealso cref="ActiveXServer.HelpFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.LibraryFlags">
      <summary>Returns the library flags of the server. This property can be any combination of LIBFLAGS defined in the Microsoft Windows Software Development Kit.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.LocaleId">
      <summary>Returns the locale ID of the server.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.CoClasses">
      <summary>Returns the coclasses defined in this server.</summary>
      <remarks>You must call the ActiveXServer.LoadTypeLibrary method to load the coclasses from the type library and populate this collection.</remarks>
      <seealso cref="ActiveXCoClasses" />
      <seealso cref="ActiveXServer.Interfaces" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.Interfaces">
      <summary>Returns the interfaces defined in this server.</summary>
      <remarks>You must call the ActiveXServer.LoadTypeLibrary method to load the interfaces from the type library and populate this collection.</remarks>
      <seealso cref="ActiveXInterfaces" />
      <seealso cref="ActiveXServer.CoClasses" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.HelpFilePath">
      <summary>Returns the absolute path of the help file of the server.</summary>
      <seealso cref="ActiveXServer.HelpContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.LoadTypeLibrary">
      <summary>Populates the <c>ActiveXServer.CoClasses</c> and <c>ActiveXServer.Interfaces</c> collections from the coclasses and interfaces defined in the type library the ActiveXServer.Path property specifies.</summary>
      <returns>Returns <c>True</c> if this method updates the ActiveXServer.CoClasses and ActiveXServer.Interfaces collections from the type library. This method does nothing and returns <c>False</c> if the type library was not modified on disk since the last time you called this method.</returns>
      <seealso cref="ActiveXServer.CoClasses" />
      <seealso cref="ActiveXServer.Interfaces" />
      <seealso cref="ActiveXServer.Path" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.DisplayName">
      <summary>Returns the display name of the server.</summary>
      <seealso cref="ActiveXServer.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXServer.VersionString">
      <summary>Returns the version string of the server.</summary>
      <remarks>This property displays the major version and minor version as hexadecimal numbers.</remarks>
      <seealso cref="ActiveXServer.MajorVersion" />
      <seealso cref="ActiveXServer.MinorVersion" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClasses">
      <summary>A collection of ActiveXCoClass objects.
Use the ActiveXServer.CoClasses property to obtain a collection of ActiveXCoClass objects the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any coclass information for the server.</summary>
      <seealso cref="ActiveXCoClass" />
      <seealso cref="ActiveXServer.CoClasses" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClasses.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="ActiveXCoClass" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClasses.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass">
      <summary>Use an ActiveXCoClass object to obtain information about a coclass defined in a type library. Use the ActiveXServer.CoClasses property to obtain a collection of coclasses the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any coclass information for the server.</summary>
      <seealso cref="ActiveXServer.CoClasses" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.Id">
      <summary>Returns the GUID of the coclass.</summary>
      <seealso cref="ActiveXCoClass.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.Name">
      <summary>Returns the name of the coclass.</summary>
      <seealso cref="ActiveXCoClass.Id" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.Documentation">
      <summary>Returns the brief description of the coclass.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.HelpContext">
      <summary>Returns the ID of the help topic for the coclass in the help file the  ActiveXCoClass.HelpFilePath property specifies.</summary>
      <seealso cref="ActiveXCoClass.HelpFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.TypeFlags">
      <summary>Returns the type flags of the coclass. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.Interfaces">
      <summary>Returns the interfaces this coclass implements.</summary>
      <seealso cref="ActiveXCoClass.GetInterfaceImplementationTypeFlags" />
      <seealso cref="ActiveXInterfaces" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.HelpFilePath">
      <summary>Returns the absolute path of the help file of the coclass.</summary>
      <seealso cref="ActiveXCoClass.HelpContext" />
    </member>
    <member name="M:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXCoClass.GetInterfaceImplementationTypeFlags(System.Int32)">
      <summary>Returns flags associated with a specified interface in the ActiveXCoClass.Interfaces property.</summary>
      <returns>Returns any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.</returns>
      <param name="interfaceIndex">Specifies the index of an interface in the ActiveXCoClass.Interfaces property.</param>
      <seealso cref="ActiveXCoClass.Interfaces" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterfaces">
      <summary>A collection of ActiveXInterface objects. Use the ActiveXServer.Interfaces property to obtain a collection of interfaces the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any interface information for the server.</summary>
      <seealso cref="ActiveXInterface" />
      <seealso cref="ActiveXServer.Interfaces" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterfaces.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="ActiveXInterface" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterfaces.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface">
      <summary>Use an ActiveXInterface object to obtain information about an interface defined in a type library. Use the ActiveXServer.Interfaces property to obtain a collection of interfaces the type library for the server defines. You must call the ActiveXServer.LoadTypeLibrary method before accessing any interface information for the server.</summary>
      <seealso cref="ActiveXServer.Interfaces" />
      <seealso cref="ActiveXServer.LoadTypeLibrary" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.Id">
      <summary>Returns the GUID of the interface.</summary>
      <seealso cref="ActiveXInterface.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.Name">
      <summary>Returns the name of the interface.</summary>
      <seealso cref="ActiveXInterface.Id" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.Documentation">
      <summary>Returns the brief description of the interface.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.HelpContext">
      <summary>Returns the ID of the help topic for the interface in the help file the ActiveXInterface.HelpFilePath property specifies.</summary>
      <seealso cref="ActiveXInterface.HelpFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.TypeFlags">
      <summary>Returns the type flags of the interface. This property can be any combination of TYPEFLAGS defined in the Microsoft Windows Software Development Kit.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.ForTypedefOnly">
      <summary>Returns <c>True</c> if this interface is an alias for another interface.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.VTableMembers">
      <summary>Returns the members of the interface that supports virtual table bindings.</summary>
      <seealso cref="ActiveXMembers" />
      <seealso cref=".DispatchMembers" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.DispatchMembers">
      <summary>Returns the members of the interface that supports IDispatch bindings.</summary>
      <seealso cref="ActiveXInterface.VTableMembers" />
      <seealso cref="ActiveXMembers" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXInterface.HelpFilePath">
      <summary>Returns the absolute path of the help file of the interface.</summary>
      <seealso cref="ActiveXInterface.HelpContext" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMembers">
      <summary>A collection of ActiveXMember objects.
Use the ActiveXInterface.VTableMembers and ActiveXInterface.DispatchMembers properties to obtain a collection of ActiveXMember objects defined for an interface in the type library of the server.</summary>
      <seealso cref="ActiveXInterface.DispatchMembers" />
      <seealso cref="ActiveXInterface.VTableMembers" />
      <seealso cref="ActiveXMember" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMembers.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve.</param>
      <seealso cref="ActiveXMember" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMembers.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember">
      <summary>Use an ActiveXMember object to obtain information about a method or property defined in a type library. Use the ActiveXInterface.VTableMembers and ActiveXInterface.DispatchMembers properties to obtain a collection of members the type library for an interface of the server defines.</summary>
      <seealso cref="ActiveXInterface.DispatchMembers" />
      <seealso cref="ActiveXInterface.VTableMembers" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.VTableOffset">
      <summary>Returns the offset of the member in the virtual table.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.DispatchId">
      <summary>Returns the ID of the member.</summary>
      <seealso cref="ActiveXMember.Name" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.Name">
      <summary>Returns the name of the member.</summary>
      <seealso cref="ActiveXMember.DispatchId" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.Documentation">
      <summary>Returns the brief description of the member.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.HelpContext">
      <summary>Returns the ID of the help topic for the member in the help file the ActiveXMember.HelpFilePath property specifies.</summary>
      <seealso cref="ActiveXMember.HelpFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.FunctionFlags">
      <summary>Returns the function flags of the member. This property can be any combination of FUNCFLAGS defined in the Microsoft Windows Software Development Kit.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.MemberType">
      <summary>Returns a value that indicates whether the member is a method or property.</summary>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.HelpFilePath">
      <summary>Returns the absolute path of the help file of the member.</summary>
      <seealso cref="ActiveXMember.HelpContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.ActiveXMember.ParameterTypeWarnings">
      <summary>Returns a warning message if the type of any parameter or the type of the return value of this member is incompatible with TestStand types.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunctions">
      <summary>This class is a collection of DllFunction objects. Each item in the collection represents a function exported from a DLL that can be called from TestStand using the LabWindows/CVI or C/C++ DLL adapter.

Use the CommonCAdapter.GetDllFunctions method to obtain a collection of functions from a DLL. 
</summary>
      <seealso cref="CommonCAdapter.GetDllFunctions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunctions.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index.</param>
      <seealso cref="DllFunction" />
      <seealso cref="DllFunctions.Count" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunctions.Count">
      <summary>Returns the number of items in the collection.</summary>
      <seealso cref="DllFunctions.Item" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction">
      <summary>Use objects from the DllFunction class to obtain information about a function exported from a DLL. Use the CommonCAdapter.GetDllFunctions method to obtain a collection of functions from a DLL.</summary>
      <seealso cref="CommonCAdapter.GetDllFunctions" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction.DisplayName">
      <summary>Returns the name of a function in a DLL.</summary>
      <remarks>There can be up to three different names for a function: <c>DisplayName</c>, UniqueDisplayName and SymbolName.
The <c>DisplayName</c> is the simple function name. The <c>UniqueDisplayName</c> is a name that contains parameter type information to distinguish different function overloads in the DLL. If no overloads for a function exist, <c>DisplayName</c> is the same as <c>UniqueDisplayName</c>. The <c>SymbolName</c> is the name exported from the DLL. For C++ functions, the <c>SymbolName</c> contains decorations that encode parameter type information. <c>SymbolName</c> is also a unique name, but it is not intended to be displayed.</remarks>
      <seealso cref="DllFunction.SymbolName" />
      <seealso cref="DllFunction.UniqueDisplayName" />
      <seealso cref="&#xD;&#xA;&#xD;&#xA;" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction.UniqueDisplayName">
      <summary>Returns a unique name for a function in a DLL.</summary>
      <remarks>There can be up to three different names for a function: DisplayName, <c>UniqueDisplayName</c> and SymbolName.
The <c>DisplayName</c> is the simple function name. The <c>UniqueDisplayName</c> is a name that contains parameter type information to distinguish different function overloads in the DLL. If no overloads exist for a function, <c>DisplayName</c> is the same as <c>UniqueDisplayName</c>. The <c>SymbolName</c> is the name exported from the DLL. For C++ functions, the <c>SymbolName</c> contains decorations that encode parameter type information. <c>SymbolName</c> is also a unique name, but it is not intended to be displayed.</remarks>
      <seealso cref="DllFunction.DisplayName" />
      <seealso cref="DllFunction.SymbolName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction.SymbolName">
      <summary>Returns the symbol name of a function in a DLL.</summary>
      <remarks>There can be up to three different names for a function: DisplayName, UniqueDisplayName and <c>SymbolName</c>.
The <c>DisplayName</c> is the simple function name. The <c>UniqueDisplayName</c> is a name that contains parameter type information to distinguish different function overloads in the DLL. If no overloads for a function exist, <c>DisplayName</c> is the same as <c>UniqueDisplayName</c>. The <c>SymbolName</c> is the name exported from the DLL. For C++ functions, the <c>SymbolName</c> contains decorations that encode parameter type information. <c>SymbolName</c> is also a unique name, but it is not intended to be displayed.</remarks>
      <seealso cref="DllFunction.DisplayName" />
      <seealso cref="DllFunction.SymbolName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction.HelpContext">
      <summary>Returns a tag for the help topic for the function in the help file the DllFunction.HelpFilePath property specifies.</summary>
      <remarks>You can associate a help file with a function in a type library.</remarks>
      <seealso cref="DllFunction.HelpFilePath" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction.HelpFilePath">
      <summary>Returns the absolute path of the help file associated with the function.</summary>
      <remarks>You can associate a help file with a function in a type library.</remarks>
      <seealso cref="DllFunction.HelpContext" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction.ParameterTypeWarnings">
      <summary>Returns a warning message if TestStand could not obtain type information for the parameters from the type library associated with the DLL.</summary>
      <remarks>TestStand reads a type library to obtain type information for parameters. If TestStand cannot read the type library for some reason, it sets this property to a message that explains what failed.</remarks>
      <seealso cref="DllFunction.HasParameterInformation" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllFunction.HasParameterInformation">
      <summary>Returns a value that indicates whether TestStand obtained type information for the parameters of the function in the DLL.</summary>
      <remarks>TestStand obtains type information for parameters from the DLL or from a type library.</remarks>
      <seealso cref="DllFunction.ParameterTypeWarnings" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllCodeCreationTargets">
      <summary>Use these constants for the DllModule.CodeCreationTarget property.</summary>
      <seealso cref="DllModule.CodeCreationTarget" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllCodeCreationTargets.DllCodeCreationTarget_TextFile">
      <summary>(Value: 0) Specifies that the C/C++ DLL Module creates and edits code using the default application Microsoft Windows associates with the file extension of the source file.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.DllCodeCreationTargets.DllCodeCreationTarget_VisualStudio">
      <summary>(Value: 1) Specifies the C/C++ DLL Module creates and edits code in Microsoft Visual Studio.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCVerifyPrototypeResults">
      <summary>Use these constants with the result parameter the CommonCModule.VerifyPrototype method returns.</summary>
      <seealso cref="CommonCModule.VerifyPrototype" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCVerifyPrototypeResults.CommonCVerifyPrototypeResult_PrototypesMatch">
      <summary>(Value: 0) Specifies that the prototype the source code specifies matches the currently loaded parameters.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCVerifyPrototypeResults.CommonCVerifyPrototypeResult_ModuleUpdated">
      <summary>(Value: 1) Specifies that the CommonCModule.VerifyPrototype method modified the currently loaded parameters to match the prototype the source code specifies.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCVerifyPrototypeResults.CommonCVerifyPrototypeResult_SourceUpdated">
      <summary>(Value: 2) Specifies that the <c>CommonCModule.VerifyPrototype</c> method modified the source code to match the prototype the currently loaded parameters specify.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.CommonCVerifyPrototypeResults.CommonCVerifyPrototypeResult_UserCancelled">
      <summary>(Value: 3) Specifies that the <c>CommonCModule.VerifyPrototype</c> method prompted the user to update the module or source code, but the user cancelled the dialog box.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.ExpressVIMenuItemProperties">
      <summary>Use these property names with the property objects the LabVIEWAdapter.GetExpressVIMenuStructure method returns to access information about menu structures.</summary>
      <seealso cref="LabVIEWAdapter.GetExpressVIMenuStructure" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ExpressVIMenuItemProperties.ExpressVIMenu_NameProp">
      <summary>(Value: ItemName) String value that specifies the text to display for the menu item. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ExpressVIMenuItemProperties.ExpressVIMenu_PathProp">
      <summary>Value: ItemPath) String value that specifies the absolute path to the Express VI. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ExpressVIMenuItemProperties.ExpressVIMenu_IconProp">
      <summary>(Value: IconHandle) Numeric value that is the handle in a metafile that contains the icon of the Express VI. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ExpressVIMenuItemProperties.ExpressVIMenu_IsSubmenuProp">
      <summary>(Value: IsSubMenu) Boolean value that specifies whether the menu item is a submenu. Use <c>ExpressVIMenu_MenuItemsProp</c> to access the submenu items. </summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ExpressVIMenuItemProperties.ExpressVIMenu_SeparatorAboveProp">
      <summary>(Value: SeparatorAbove) Boolean value that specifies whether a separator exists above the menu item.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.ExpressVIMenuItemProperties.ExpressVIMenu_MenuItemsProp">
      <summary>(Value: MenuItems) PropertyObject array that represents the menu items in a submenu. </summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions">
      <summary>Use the following constants with the DotNetAdapter.VisualStudioDTEVersionForEditing, DotNetAdapter.VisualStudioDTEVersionForDebugging, DllAdapter.VisualStudioDTEVersionForEditing, and DllAdapter.VisualStudioDTEVersionForDebugging properties.</summary>
      <seealso cref="DllAdapter.VisualStudioDTEVersionForDebugging" />
      <seealso cref="DllAdapter.VisualStudioDTEVersionForEditing" />
      <seealso cref="DotNetAdapter.VisualStudioDTEVersionForDebugging" />
      <seealso cref="DotNetAdapter.VisualStudioDTEVersionForEditing" />
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions.VisualStudioDTEVersion_2010">
      <summary>(Value: &quot;VisualStudio.DTE.10.0&quot;) The adapter uses the Microsoft Visual Studio&#160;2010 DTE, if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio&#160;2010 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions.VisualStudioDTEVersion_2012">
      <summary>(Value: &quot;VisualStudio.DTE.11.0&quot;) The adapter uses the Microsoft Visual Studio&#160;2012 DTE, if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio&#160;2012 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions.VisualStudioDTEVersion_AlwaysPrompt">
      <summary>(Value: &quot;AlwaysPrompt&quot;) Prompt for each operation to select a version of the Visual Studio DTE. If only one version of the DTE is installed, the adapter does not prompt and instead uses the installed version.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions.VisualStudioDTEVersion_MatchProject">
      <summary>(Value: &quot;MatchProject&quot;) Use the Visual Studio DTE version that corresponds to the project file the step specifies. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the version of the DTE that corresponds to the project file is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use. This option applies only to the DotNetAdapter.VisualStudioDTEVersionForEditing and DllAdapter.VisualStudioDTEVersionForEditing properties.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions.VisualStudioDTEVersion_2005">
      <summary>(Value: &quot;VisualStudio.DTE.8.0&quot;) The adapter uses the Microsoft Visual Studio&#160;2005 development environment (DTE), if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio&#160;2005 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions.VisualStudioDTEVersion_2008">
      <summary>(Value: &quot;VisualStudio.DTE.9.0&quot;) The adapter uses the Microsoft Visual Studio&#160;2008 DTE, if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio&#160;2008 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.</summary>
    </member>
    <member name="F:NationalInstruments.TestStand.Interop.AdapterAPI.VisualStudioDTEVersions.VisualStudioDTEVersion_2013">
      <summary>(Value: &quot;VisualStudio.DTE.12.0&quot;) The adapter uses the Microsoft Visual Studio&#160;2013 DTE, if installed. If only one version of the DTE is installed, the adapter ignores this value and always uses the installed version. If the Visual Studio&#160;2013 DTE is not installed, but more than one version of the DTE is installed, the adapter prompts the user to select which version to use.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllArgument">
      <summary>Use objects from the <c>DllArgument</c> class to set the argument value to pass to a DLL module function using the DllModule.Execute method. </summary>
      <seealso cref="DllArguments" />
      <seealso cref="DllModule.Execute" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllArgument.Value">
      <summary>Specifies the argument value to pass for the corresponding parameter.</summary>
      <remarks>When you pass a DllArguments collection to the DllModule.Execute function, the adapter passes this property to the function instead of evaluating the CommonCParameter.ValueExpr expression.</remarks>
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="DllArguments" />
      <seealso cref="DllModule.Execute" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllArgument.ImaginaryPartValue">
      <summary>Specifies the argument value for to pass for the imaginary part of a DllParamCategory_CNiComplex or DllParamCategory_CNiComplexVector parameter.</summary>
      <seealso cref="DllArgument.Value" />
      <seealso cref="DllParameter.ImaginaryPartValueExpr" />
      <seealso cref="DllParameterCategories" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.DllArguments">
      <summary>Use objects from the <c>DllArguments</c> class to pass specific argument values to a DLL module function using the DllModule.Execute method. Use the DllParameters.NewArguments method to create a new arguments collection.</summary>
      <seealso cref="DllModule.Execute" />
      <seealso cref="DllParameters.NewArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllArguments.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve. An argument at a specific index in the DllArguments collection corresponds to the parameter at the same index in the DllParameters collection that you used to create the <c>DllArguments</c> collection.</param>
      <seealso cref="DllArguments" />
      <seealso cref="DllParameters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.DllArguments.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIArguments">
      <summary>Use objects from the <c>CVIArguments</c> class to pass specific argument values to a LabWindows/CVI module function using the CVIModule.Execute method. Use the CVIParameters.NewArguments method to create a new arguments collection.</summary>
      <seealso cref="CVIModule.Execute" />
      <seealso cref="CVIParameters.NewArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIArguments.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve. An argument at a specific index in the CVIArguments collection corresponds to the parameter at the same index in the CVIParameters collection that you used to create the <c>CVIArguments</c> collection.</param>
      <seealso cref="CVIArgument" />
      <seealso cref="CVIArguments" />
      <seealso cref="CVIParameters" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIArguments.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.CVIArgument">
      <summary>Use objects from the <c>CVIArgument</c> class to set the argument value to pass to a LabWindows/CVI module function using the CVIModule.Execute method.</summary>
      <seealso cref="CVIArguments" />
      <seealso cref="CVIModule.Execute" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.CVIArgument.Value">
      <summary>Specifies the argument value to pass for the corresponding parameter.</summary>
      <remarks>When you pass a CVIArguments collection to the CVIModule.Execute function, the adapter passes this property to the function instead of evaluating the CommonCParameter.ValueExpr expression.</remarks>
      <seealso cref="CommonCParameter.ValueExpr" />
      <seealso cref="CVIArguments" />
      <seealso cref="CVIModule.Execute" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArgument">
      <summary>Use objects from the <c>LabVIEWArgument</c> class to set the argument value to pass to a LabVIEW VI using the LabVIEWModule.Execute method.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWArguments" />
      <seealso cref="LabVIEWModule.Execute" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArgument.Value">
      <summary>Specifies the argument value to pass for the corresponding parameter.</summary>
      <seealso cref="LabVIEWModule.Execute" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArgument.ParameterName">
      <summary>Returns the name of the parameter in the VI that is associated with the argument.</summary>
      <seealso cref="LabVIEWParameter.ParameterName" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArgument.Elements">
      <summary>Returns a collection of LabVIEWArguments to pass to a parameter that is a cluster or an array of clusters.</summary>
      <seealso cref="LabVIEWArguments" />
      <seealso cref="LabVIEWParameter.Elements" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArgument.ComplexRealPart">
      <summary>Returns the LabVIEWArgument for the real part of a complex number or array.</summary>
      <seealso cref="LabVIEWArgument" />
      <seealso cref="LabVIEWParameter.ComplexRealPartElement" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArgument.ComplexImaginaryPart">
      <summary>Returns the LabVIEWArgument for the imaginary part of a complex number or array.</summary>
      <seealso cref="LabVIEWArgument" />
      <seealso cref="LabVIEWParameter.ComplexImaginaryPartElement" />
    </member>
    <member name="T:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArguments">
      <summary>Use objects from the <c>LabVIEWArguments</c> class to pass specific argument values to a LabVIEW VI using the LabVIEWModule.Execute method. Use the LabVIEWParameters.NewArguments method to create a new arguments collection.</summary>
      <seealso cref="&quot;Effectively Using LabVIEW with TestStand&quot;javascript:TSLabVIEW('/InfoTopics/TSLabVIEW.htm')" />
      <seealso cref="LabVIEWModule.Execute" />
      <seealso cref="LabVIEWParameters.NewArguments" />
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArguments.Item(System.Object)">
      <summary>Returns a reference to an item at the specified index in the collection.</summary>
      <param name="index">Specifies the zero-based index of the item to retrieve. An argument at a specific index in the LabVIEWArguments collection corresponds to the parameter at the same index in the LabVIEWParameters collection that you used to create the <c>LabVIEWArguments</c> collection.</param>
    </member>
    <member name="P:NationalInstruments.TestStand.Interop.AdapterAPI.LabVIEWArguments.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
  </members>
</doc>